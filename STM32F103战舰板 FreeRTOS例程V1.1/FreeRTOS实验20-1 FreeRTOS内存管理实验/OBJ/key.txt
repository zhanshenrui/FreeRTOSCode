; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\key.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\key.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I"E:\STM32F103战舰V3资料\STM32F103 FreeRTOS例程\FreeRTOS实验17-1 FreeRTOS内存管理实验\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\key.crf ..\HARDWARE\KEY\key.c]
                          THUMB

                          AREA ||i.KEY_Init||, CODE, READONLY, ALIGN=2

                  KEY_Init PROC
;;;18     //按键初始化函数
;;;19     void KEY_Init(void) //IO初始化
000000  b508              PUSH     {r3,lr}
;;;20     { 
;;;21      	GPIO_InitTypeDef GPIO_InitStructure;
;;;22      
;;;23      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOE,ENABLE);//使能PORTA,PORTE时钟
000002  2101              MOVS     r1,#1
000004  2044              MOVS     r0,#0x44
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;24     
;;;25     	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;//KEY0-KEY2
00000a  201c              MOVS     r0,#0x1c
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;26     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; //设置成上拉输入
000010  2048              MOVS     r0,#0x48
000012  f88d0003          STRB     r0,[sp,#3]
;;;27      	GPIO_Init(GPIOE, &GPIO_InitStructure);//初始化GPIOE2,3,4
000016  4669              MOV      r1,sp
000018  4806              LDR      r0,|L1.52|
00001a  f7fffffe          BL       GPIO_Init
;;;28     
;;;29     	//初始化 WK_UP-->GPIOA.0	  下拉输入
;;;30     	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;
00001e  2001              MOVS     r0,#1
000020  f8ad0000          STRH     r0,[sp,#0]
;;;31     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //PA0设置成输入，默认下拉	  
000024  2028              MOVS     r0,#0x28
000026  f88d0003          STRB     r0,[sp,#3]
;;;32     	GPIO_Init(GPIOA, &GPIO_InitStructure);//初始化GPIOA.0
00002a  4669              MOV      r1,sp
00002c  4802              LDR      r0,|L1.56|
00002e  f7fffffe          BL       GPIO_Init
;;;33     
;;;34     }
000032  bd08              POP      {r3,pc}
;;;35     //按键处理函数
                          ENDP

                  |L1.52|
                          DCD      0x40011800
                  |L1.56|
                          DCD      0x40010800

                          AREA ||i.KEY_Scan||, CODE, READONLY, ALIGN=2

                  KEY_Scan PROC
;;;43     //注意此函数有响应优先级,KEY0>KEY1>KEY2>KEY3!!
;;;44     u8 KEY_Scan(u8 mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;45     {	 
;;;46     	static u8 key_up=1;//按键按松开标志
;;;47     	if(mode)key_up=1;  //支持连按		  
000004  4c2e              LDR      r4,|L2.192|
;;;48     	if(key_up&&(KEY0==0||KEY1==0||KEY2==0||WK_UP==1))
000006  4f2f              LDR      r7,|L2.196|
000008  4d2f              LDR      r5,|L2.200|
00000a  2601              MOVS     r6,#1                 ;47
00000c  b108              CBZ      r0,|L2.18|
00000e  7026              STRB     r6,[r4,#0]            ;47
000010  e001              B        |L2.22|
                  |L2.18|
000012  7820              LDRB     r0,[r4,#0]  ; key_up
000014  b1a0              CBZ      r0,|L2.64|
                  |L2.22|
000016  2110              MOVS     r1,#0x10
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ReadInputDataBit
00001e  b1b0              CBZ      r0,|L2.78|
000020  2108              MOVS     r1,#8
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       GPIO_ReadInputDataBit
000028  b188              CBZ      r0,|L2.78|
00002a  2104              MOVS     r1,#4
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       GPIO_ReadInputDataBit
000032  b160              CBZ      r0,|L2.78|
000034  2101              MOVS     r1,#1
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       GPIO_ReadInputDataBit
00003c  2801              CMP      r0,#1
00003e  d006              BEQ      |L2.78|
                  |L2.64|
;;;49     	{
;;;50     		delay_ms(10);//去抖动 
;;;51     		key_up=0;
;;;52     		if(KEY0==0)return KEY0_PRES;
;;;53     		else if(KEY1==0)return KEY1_PRES;
;;;54     		else if(KEY2==0)return KEY2_PRES;
;;;55     		else if(WK_UP==1)return WKUP_PRES;
;;;56     	}else if(KEY0==1&&KEY1==1&&KEY2==1&&WK_UP==0)key_up=1; 	    
000040  2110              MOVS     r1,#0x10
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       GPIO_ReadInputDataBit
000048  2801              CMP      r0,#1
00004a  d024              BEQ      |L2.150|
00004c  e035              B        |L2.186|
                  |L2.78|
00004e  200a              MOVS     r0,#0xa               ;50
000050  f7fffffe          BL       delay_ms
000054  2000              MOVS     r0,#0                 ;51
000056  7020              STRB     r0,[r4,#0]            ;51
000058  2110              MOVS     r1,#0x10              ;52
00005a  4628              MOV      r0,r5                 ;52
00005c  f7fffffe          BL       GPIO_ReadInputDataBit
000060  b180              CBZ      r0,|L2.132|
000062  2108              MOVS     r1,#8                 ;53
000064  4628              MOV      r0,r5                 ;53
000066  f7fffffe          BL       GPIO_ReadInputDataBit
00006a  b170              CBZ      r0,|L2.138|
00006c  2104              MOVS     r1,#4                 ;54
00006e  4628              MOV      r0,r5                 ;54
000070  f7fffffe          BL       GPIO_ReadInputDataBit
000074  b158              CBZ      r0,|L2.142|
000076  2101              MOVS     r1,#1                 ;55
000078  4638              MOV      r0,r7                 ;55
00007a  f7fffffe          BL       GPIO_ReadInputDataBit
00007e  2801              CMP      r0,#1                 ;55
000080  d007              BEQ      |L2.146|
000082  e01a              B        |L2.186|
                  |L2.132|
000084  2001              MOVS     r0,#1                 ;52
                  |L2.134|
;;;57      	return 0;// 无按键按下
;;;58     }
000086  e8bd81f0          POP      {r4-r8,pc}
                  |L2.138|
00008a  2002              MOVS     r0,#2                 ;53
00008c  e7fb              B        |L2.134|
                  |L2.142|
00008e  2003              MOVS     r0,#3                 ;54
000090  e7f9              B        |L2.134|
                  |L2.146|
000092  2004              MOVS     r0,#4                 ;55
000094  e7f7              B        |L2.134|
                  |L2.150|
000096  2108              MOVS     r1,#8                 ;56
000098  4628              MOV      r0,r5                 ;56
00009a  f7fffffe          BL       GPIO_ReadInputDataBit
00009e  2801              CMP      r0,#1                 ;56
0000a0  d10b              BNE      |L2.186|
0000a2  2104              MOVS     r1,#4                 ;56
0000a4  4628              MOV      r0,r5                 ;56
0000a6  f7fffffe          BL       GPIO_ReadInputDataBit
0000aa  2801              CMP      r0,#1                 ;56
0000ac  d105              BNE      |L2.186|
0000ae  2101              MOVS     r1,#1                 ;56
0000b0  4638              MOV      r0,r7                 ;56
0000b2  f7fffffe          BL       GPIO_ReadInputDataBit
0000b6  b900              CBNZ     r0,|L2.186|
0000b8  7026              STRB     r6,[r4,#0]            ;56
                  |L2.186|
0000ba  2000              MOVS     r0,#0                 ;57
0000bc  e7e3              B        |L2.134|
                          ENDP

0000be  0000              DCW      0x0000
                  |L2.192|
                          DCD      ||.data||
                  |L2.196|
                          DCD      0x40010800
                  |L2.200|
                          DCD      0x40011800

                          AREA ||.data||, DATA, ALIGN=0

                  key_up
000000  01                DCB      0x01
