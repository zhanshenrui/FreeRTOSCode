; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\timers.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\timers.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I"E:\STM32F103战舰V3资料\STM32F103 FreeRTOS例程\FreeRTOS实验17-1 FreeRTOS内存管理实验\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\timers.crf ..\FreeRTOS\timers.c]
                          THUMB

                          AREA ||i.pcTimerGetName||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  pcTimerGetName PROC
;;;488    
;;;489    const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  b510              PUSH     {r4,lr}
;;;490    {
;;;491    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L1.18|
;;;492    
;;;493    	configASSERT( xTimer );
000006  f24012ed          MOV      r2,#0x1ed
00000a  a103              ADR      r1,|L1.24|
00000c  a008              ADR      r0,|L1.48|
00000e  f7fffffe          BL       __2printf
                  |L1.18|
;;;494    	return pxTimer->pcTimerName;
000012  6820              LDR      r0,[r4,#0]
;;;495    }
000014  bd10              POP      {r4,pc}
;;;496    /*-----------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
000018  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
00001c  72656552
000020  544f535c
000024  74696d65
000028  72732e63
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L1.48|
000030  4572726f          DCB      "Error:%s,%d\r\n",0
000034  723a2573
000038  2c25640d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.prvCheckForValidListAndQueue||, CODE, READONLY, ALIGN=2

                  prvCheckForValidListAndQueue PROC
;;;929    
;;;930    static void prvCheckForValidListAndQueue( void )
000000  b510              PUSH     {r4,lr}
;;;931    {
;;;932    	/* Check that the list from which active timers are referenced, and the
;;;933    	queue used to communicate with the timer service, have been
;;;934    	initialised. */
;;;935    	taskENTER_CRITICAL();
000002  f7fffffe          BL       vPortEnterCritical
;;;936    	{
;;;937    		if( xTimerQueue == NULL )
000006  4c0e              LDR      r4,|L2.64|
000008  6820              LDR      r0,[r4,#0]  ; xTimerQueue
00000a  b9a0              CBNZ     r0,|L2.54|
;;;938    		{
;;;939    			vListInitialise( &xActiveTimerList1 );
00000c  480d              LDR      r0,|L2.68|
00000e  f7fffffe          BL       vListInitialise
;;;940    			vListInitialise( &xActiveTimerList2 );
000012  480c              LDR      r0,|L2.68|
000014  3014              ADDS     r0,r0,#0x14
000016  f7fffffe          BL       vListInitialise
;;;941    			pxCurrentTimerList = &xActiveTimerList1;
00001a  480a              LDR      r0,|L2.68|
;;;942    			pxOverflowTimerList = &xActiveTimerList2;
00001c  60e0              STR      r0,[r4,#0xc]  ; pxCurrentTimerList
00001e  3014              ADDS     r0,r0,#0x14
;;;943    
;;;944    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;945    			{
;;;946    				/* The timer queue is allocated statically in case
;;;947    				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
;;;948    				static StaticQueue_t xStaticTimerQueue;
;;;949    				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];
;;;950    
;;;951    				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
;;;952    			}
;;;953    			#else
;;;954    			{
;;;955    				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
000020  6120              STR      r0,[r4,#0x10]  ; pxOverflowTimerList
000022  2200              MOVS     r2,#0
000024  2110              MOVS     r1,#0x10
000026  2005              MOVS     r0,#5
000028  f7fffffe          BL       xQueueGenericCreate
;;;956    			}
;;;957    			#endif
;;;958    
;;;959    			#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;960    			{
;;;961    				if( xTimerQueue != NULL )
00002c  6020              STR      r0,[r4,#0]  ; xTimerQueue
00002e  b110              CBZ      r0,|L2.54|
;;;962    				{
;;;963    					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
000030  a105              ADR      r1,|L2.72|
000032  f7fffffe          BL       vQueueAddToRegistry
                  |L2.54|
;;;964    				}
;;;965    				else
;;;966    				{
;;;967    					mtCOVERAGE_TEST_MARKER();
;;;968    				}
;;;969    			}
;;;970    			#endif /* configQUEUE_REGISTRY_SIZE */
;;;971    		}
;;;972    		else
;;;973    		{
;;;974    			mtCOVERAGE_TEST_MARKER();
;;;975    		}
;;;976    	}
;;;977    	taskEXIT_CRITICAL();
000036  e8bd4010          POP      {r4,lr}
00003a  f7ffbffe          B.W      vPortExitCritical
;;;978    }
;;;979    /*-----------------------------------------------------------*/
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      ||.data||
                  |L2.68|
                          DCD      ||.bss||
                  |L2.72|
000048  546d7251          DCB      "TmrQ",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.prvInsertTimerInActiveList||, CODE, READONLY, ALIGN=2

                  prvInsertTimerInActiveList PROC
;;;682    
;;;683    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
000000  b570              PUSH     {r4-r6,lr}
;;;684    {
;;;685    BaseType_t xProcessTimerNow = pdFALSE;
000002  2400              MOVS     r4,#0
;;;686    
;;;687    	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
;;;688    	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000004  6041              STR      r1,[r0,#4]
;;;689    
;;;690    	if( xNextExpiryTime <= xTimeNow )
;;;691    	{
;;;692    		/* Has the expiry time elapsed between the command to start/reset a
;;;693    		timer was issued, and the time the command was processed? */
;;;694    		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;695    		{
;;;696    			/* The time between a command being issued and the command being
;;;697    			processed actually exceeds the timers period.  */
;;;698    			xProcessTimerNow = pdTRUE;
;;;699    		}
;;;700    		else
;;;701    		{
;;;702    			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
000006  4d0b              LDR      r5,|L3.52|
000008  6100              STR      r0,[r0,#0x10]         ;688
00000a  4291              CMP      r1,r2                 ;690
00000c  d806              BHI      |L3.28|
00000e  1ad1              SUBS     r1,r2,r3              ;694
000010  6982              LDR      r2,[r0,#0x18]         ;694
000012  4291              CMP      r1,r2                 ;694
000014  d206              BCS      |L3.36|
000016  1d01              ADDS     r1,r0,#4
000018  6928              LDR      r0,[r5,#0x10]  ; pxOverflowTimerList
00001a  e007              B        |L3.44|
                  |L3.28|
;;;703    		}
;;;704    	}
;;;705    	else
;;;706    	{
;;;707    		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
00001c  429a              CMP      r2,r3
00001e  d203              BCS      |L3.40|
000020  4299              CMP      r1,r3
000022  d301              BCC      |L3.40|
                  |L3.36|
;;;708    		{
;;;709    			/* If, since the command was issued, the tick count has overflowed
;;;710    			but the expiry time has not, then the timer must have already passed
;;;711    			its expiry time and should be processed immediately. */
;;;712    			xProcessTimerNow = pdTRUE;
000024  2401              MOVS     r4,#1
000026  e003              B        |L3.48|
                  |L3.40|
;;;713    		}
;;;714    		else
;;;715    		{
;;;716    			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
000028  1d01              ADDS     r1,r0,#4
00002a  68e8              LDR      r0,[r5,#0xc]  ; pxCurrentTimerList
                  |L3.44|
00002c  f7fffffe          BL       vListInsert
                  |L3.48|
;;;717    		}
;;;718    	}
;;;719    
;;;720    	return xProcessTimerNow;
000030  4620              MOV      r0,r4
;;;721    }
000032  bd70              POP      {r4-r6,pc}
;;;722    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.52|
                          DCD      ||.data||

                          AREA ||i.prvProcessExpiredTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  prvProcessExpiredTimer PROC
;;;497    
;;;498    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
000000  b5f8              PUSH     {r3-r7,lr}
;;;499    {
000002  4605              MOV      r5,r0
;;;500    BaseType_t xResult;
;;;501    Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
000004  4814              LDR      r0,|L4.88|
000006  460e              MOV      r6,r1                 ;499
000008  68c0              LDR      r0,[r0,#0xc]  ; pxCurrentTimerList
00000a  68c0              LDR      r0,[r0,#0xc]
;;;502    
;;;503    	/* Remove the timer from the list of active timers.  A check has already
;;;504    	been performed to ensure the list is not empty. */
;;;505    	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
00000c  68c4              LDR      r4,[r0,#0xc]
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
;;;506    	traceTIMER_EXPIRED( pxTimer );
;;;507    
;;;508    	/* If the timer is an auto reload timer then calculate the next
;;;509    	expiry time and re-insert the timer in the list of active timers. */
;;;510    	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
000014  69e0              LDR      r0,[r4,#0x1c]
000016  2801              CMP      r0,#1
000018  d117              BNE      |L4.74|
;;;511    	{
;;;512    		/* The timer is inserted into a list using a time relative to anything
;;;513    		other than the current time.  It will therefore be inserted into the
;;;514    		correct list relative to the time this task thinks it is now. */
;;;515    		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
00001a  69a0              LDR      r0,[r4,#0x18]
00001c  462b              MOV      r3,r5
00001e  1941              ADDS     r1,r0,r5
000020  4632              MOV      r2,r6
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       prvInsertTimerInActiveList
000028  b178              CBZ      r0,|L4.74|
;;;516    		{
;;;517    			/* The timer expired before it was added to the active timer
;;;518    			list.  Reload it now.  */
;;;519    			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
00002a  2000              MOVS     r0,#0
00002c  4603              MOV      r3,r0
00002e  4601              MOV      r1,r0
000030  9000              STR      r0,[sp,#0]
000032  462a              MOV      r2,r5
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       xTimerGenericCommand
;;;520    			configASSERT( xResult );
00003a  b930              CBNZ     r0,|L4.74|
00003c  4907              LDR      r1,|L4.92|
00003e  f44f7202          MOV      r2,#0x208
000042  f1010018          ADD      r0,r1,#0x18
000046  f7fffffe          BL       __2printf
                  |L4.74|
;;;521    			( void ) xResult;
;;;522    		}
;;;523    		else
;;;524    		{
;;;525    			mtCOVERAGE_TEST_MARKER();
;;;526    		}
;;;527    	}
;;;528    	else
;;;529    	{
;;;530    		mtCOVERAGE_TEST_MARKER();
;;;531    	}
;;;532    
;;;533    	/* Call the timer callback. */
;;;534    	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
00004a  6a61              LDR      r1,[r4,#0x24]
00004c  b001              ADD      sp,sp,#4
00004e  4620              MOV      r0,r4
000050  e8bd40f0          POP      {r4-r7,lr}
000054  4708              BX       r1
;;;535    }
;;;536    /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      ||.data||
                  |L4.92|
                          DCD      ||i.xTimerCreate||+0x4c

                          AREA ||i.prvProcessReceivedCommands||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  prvProcessReceivedCommands PROC
;;;723    
;;;724    static void	prvProcessReceivedCommands( void )
000000  b570              PUSH     {r4-r6,lr}
;;;725    {
000002  b086              SUB      sp,sp,#0x18
;;;726    DaemonTaskMessage_t xMessage;
;;;727    Timer_t *pxTimer;
;;;728    BaseType_t xTimerListsWereSwitched, xResult;
;;;729    TickType_t xTimeNow;
;;;730    
;;;731    	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
000004  4e2f              LDR      r6,|L5.196|
000006  e053              B        |L5.176|
                  |L5.8|
;;;732    	{
;;;733    		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
;;;734    		{
;;;735    			/* Negative commands are pended function calls rather than timer
;;;736    			commands. */
;;;737    			if( xMessage.xMessageID < ( BaseType_t ) 0 )
000008  9801              LDR      r0,[sp,#4]
00000a  2800              CMP      r0,#0
00000c  da06              BGE      |L5.28|
;;;738    			{
;;;739    				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
;;;740    
;;;741    				/* The timer uses the xCallbackParameters member to request a
;;;742    				callback be executed.  Check the callback is not NULL. */
;;;743    				configASSERT( pxCallback );
;;;744    
;;;745    				/* Call the function. */
;;;746    				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
00000e  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000012  9a02              LDR      r2,[sp,#8]
000014  4790              BLX      r2
;;;747    			}
;;;748    			else
;;;749    			{
;;;750    				mtCOVERAGE_TEST_MARKER();
;;;751    			}
;;;752    		}
;;;753    		#endif /* INCLUDE_xTimerPendFunctionCall */
;;;754    
;;;755    		/* Commands that are positive are timer commands rather than pended
;;;756    		function calls. */
;;;757    		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
000016  9801              LDR      r0,[sp,#4]
000018  2800              CMP      r0,#0
00001a  db49              BLT      |L5.176|
                  |L5.28|
;;;758    		{
;;;759    			/* The messages uses the xTimerParameters member to work on a
;;;760    			software timer. */
;;;761    			pxTimer = xMessage.u.xTimerParameters.pxTimer;
;;;762    
;;;763    			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
00001c  9c03              LDR      r4,[sp,#0xc]
00001e  6960              LDR      r0,[r4,#0x14]
000020  b110              CBZ      r0,|L5.40|
000022  1d20              ADDS     r0,r4,#4
;;;764    			{
;;;765    				/* The timer is in a list, remove it. */
;;;766    				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
000024  f7fffffe          BL       uxListRemove
                  |L5.40|
;;;767    			}
;;;768    			else
;;;769    			{
;;;770    				mtCOVERAGE_TEST_MARKER();
;;;771    			}
;;;772    
;;;773    			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageValue );
;;;774    
;;;775    			/* In this case the xTimerListsWereSwitched parameter is not used, but
;;;776    			it must be present in the function call.  prvSampleTimeNow() must be
;;;777    			called after the message is received from xTimerQueue so there is no
;;;778    			possibility of a higher priority task adding a message to the message
;;;779    			queue with a time that is ahead of the timer daemon task (because it
;;;780    			pre-empted the timer daemon task after the xTimeNow value was set). */
;;;781    			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
000028  a805              ADD      r0,sp,#0x14
00002a  f7fffffe          BL       prvSampleTimeNow
00002e  4605              MOV      r5,r0
;;;782    
;;;783    			switch( xMessage.xMessageID )
000030  9801              LDR      r0,[sp,#4]
000032  280a              CMP      r0,#0xa
000034  d23c              BCS      |L5.176|
000036  e8dff000          TBB      [pc,r0]
00003a  0505              DCB      0x05,0x05
00003c  053b2738          DCB      0x05,0x3b,0x27,0x38
000040  05053b27          DCB      0x05,0x05,0x3b,0x27
;;;784    			{
;;;785    				case tmrCOMMAND_START :
;;;786    			    case tmrCOMMAND_START_FROM_ISR :
;;;787    			    case tmrCOMMAND_RESET :
;;;788    			    case tmrCOMMAND_RESET_FROM_ISR :
;;;789    				case tmrCOMMAND_START_DONT_TRACE :
;;;790    					/* Start or restart a timer. */
;;;791    					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
000044  9802              LDR      r0,[sp,#8]
000046  69a1              LDR      r1,[r4,#0x18]
000048  4603              MOV      r3,r0
00004a  4401              ADD      r1,r1,r0
00004c  462a              MOV      r2,r5
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       prvInsertTimerInActiveList
000054  2800              CMP      r0,#0
000056  d02b              BEQ      |L5.176|
;;;792    					{
;;;793    						/* The timer expired before it was added to the active
;;;794    						timer list.  Process it now. */
;;;795    						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000058  6a61              LDR      r1,[r4,#0x24]
00005a  4620              MOV      r0,r4
00005c  4788              BLX      r1
;;;796    						traceTIMER_EXPIRED( pxTimer );
;;;797    
;;;798    						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
00005e  69e0              LDR      r0,[r4,#0x1c]
000060  2801              CMP      r0,#1
000062  d125              BNE      |L5.176|
;;;799    						{
;;;800    							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
000064  2000              MOVS     r0,#0
000066  9000              STR      r0,[sp,#0]
000068  9802              LDR      r0,[sp,#8]
00006a  69a1              LDR      r1,[r4,#0x18]
00006c  2300              MOVS     r3,#0
00006e  1842              ADDS     r2,r0,r1
000070  4619              MOV      r1,r3
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       xTimerGenericCommand
;;;801    							configASSERT( xResult );
000078  b9d0              CBNZ     r0,|L5.176|
00007a  f2403221          MOV      r2,#0x321
00007e  a112              ADR      r1,|L5.200|
000080  a017              ADR      r0,|L5.224|
000082  f7fffffe          BL       __2printf
000086  e013              B        |L5.176|
;;;802    							( void ) xResult;
;;;803    						}
;;;804    						else
;;;805    						{
;;;806    							mtCOVERAGE_TEST_MARKER();
;;;807    						}
;;;808    					}
;;;809    					else
;;;810    					{
;;;811    						mtCOVERAGE_TEST_MARKER();
;;;812    					}
;;;813    					break;
;;;814    
;;;815    				case tmrCOMMAND_STOP :
;;;816    				case tmrCOMMAND_STOP_FROM_ISR :
;;;817    					/* The timer has already been removed from the active list.
;;;818    					There is nothing to do here. */
;;;819    					break;
;;;820    
;;;821    				case tmrCOMMAND_CHANGE_PERIOD :
;;;822    				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
;;;823    					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
000088  9802              LDR      r0,[sp,#8]
;;;824    					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
00008a  61a0              STR      r0,[r4,#0x18]
00008c  b928              CBNZ     r0,|L5.154|
00008e  f44f724e          MOV      r2,#0x338
000092  a10d              ADR      r1,|L5.200|
000094  a012              ADR      r0,|L5.224|
000096  f7fffffe          BL       __2printf
                  |L5.154|
;;;825    
;;;826    					/* The new period does not really have a reference, and can
;;;827    					be longer or shorter than the old one.  The command time is
;;;828    					therefore set to the current time, and as the period cannot
;;;829    					be zero the next expiry time can only be in the future,
;;;830    					meaning (unlike for the xTimerStart() case above) there is
;;;831    					no fail case that needs to be handled here. */
;;;832    					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
00009a  69a0              LDR      r0,[r4,#0x18]
00009c  462b              MOV      r3,r5
00009e  1941              ADDS     r1,r0,r5
0000a0  461a              MOV      r2,r3
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       prvInsertTimerInActiveList
;;;833    					break;
0000a8  e002              B        |L5.176|
;;;834    
;;;835    				case tmrCOMMAND_DELETE :
;;;836    					/* The timer has already been removed from the active list,
;;;837    					just free up the memory if the memory was dynamically
;;;838    					allocated. */
;;;839    					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;840    					{
;;;841    						/* The timer can only have been allocated dynamically -
;;;842    						free it again. */
;;;843    						vPortFree( pxTimer );
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       vPortFree
                  |L5.176|
0000b0  2300              MOVS     r3,#0                 ;731
0000b2  461a              MOV      r2,r3                 ;731
0000b4  a901              ADD      r1,sp,#4              ;731
0000b6  6830              LDR      r0,[r6,#0]            ;731  ; xTimerQueue
0000b8  f7fffffe          BL       xQueueGenericReceive
0000bc  2800              CMP      r0,#0                 ;731
0000be  d1a3              BNE      |L5.8|
;;;844    					}
;;;845    					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;846    					{
;;;847    						/* The timer could have been allocated statically or
;;;848    						dynamically, so check before attempting to free the
;;;849    						memory. */
;;;850    						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;851    						{
;;;852    							vPortFree( pxTimer );
;;;853    						}
;;;854    						else
;;;855    						{
;;;856    							mtCOVERAGE_TEST_MARKER();
;;;857    						}
;;;858    					}
;;;859    					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;860    					break;
;;;861    
;;;862    				default	:
;;;863    					/* Don't expect to get here. */
;;;864    					break;
;;;865    			}
;;;866    		}
;;;867    	}
;;;868    }
0000c0  b006              ADD      sp,sp,#0x18
0000c2  bd70              POP      {r4-r6,pc}
;;;869    /*-----------------------------------------------------------*/
                          ENDP

                  |L5.196|
                          DCD      ||.data||
                  |L5.200|
0000c8  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
0000cc  72656552
0000d0  544f535c
0000d4  74696d65
0000d8  72732e63
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L5.224|
0000e0  4572726f          DCB      "Error:%s,%d\r\n",0
0000e4  723a2573
0000e8  2c25640d
0000ec  0a00    
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.prvProcessTimerOrBlockTask||, CODE, READONLY, ALIGN=2

                  prvProcessTimerOrBlockTask PROC
;;;573    
;;;574    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
000000  b5f8              PUSH     {r3-r7,lr}
;;;575    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;576    TickType_t xTimeNow;
;;;577    BaseType_t xTimerListsWereSwitched;
;;;578    
;;;579    	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		/* Obtain the time now to make an assessment as to whether the timer
;;;582    		has expired or not.  If obtaining the time causes the lists to switch
;;;583    		then don't process this timer as any timers that remained in the list
;;;584    		when the lists were switched will have been processed within the
;;;585    		prvSampleTimeNow() function. */
;;;586    		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       prvSampleTimeNow
000010  4604              MOV      r4,r0
;;;587    		if( xTimerListsWereSwitched == pdFALSE )
000012  9800              LDR      r0,[sp,#0]
000014  b110              CBZ      r0,|L6.28|
;;;588    		{
;;;589    			/* The tick count has not overflowed, has the timer expired? */
;;;590    			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
;;;591    			{
;;;592    				( void ) xTaskResumeAll();
;;;593    				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
;;;594    			}
;;;595    			else
;;;596    			{
;;;597    				/* The tick count has not overflowed, and the next expire
;;;598    				time has not been reached yet.  This task should therefore
;;;599    				block to wait for the next expire time or a command to be
;;;600    				received - whichever comes first.  The following line cannot
;;;601    				be reached unless xNextExpireTime > xTimeNow, except in the
;;;602    				case when the current timer list is empty. */
;;;603    				if( xListWasEmpty != pdFALSE )
;;;604    				{
;;;605    					/* The current timer list is empty - is the overflow list
;;;606    					also empty? */
;;;607    					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
;;;608    				}
;;;609    
;;;610    				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
;;;611    
;;;612    				if( xTaskResumeAll() == pdFALSE )
;;;613    				{
;;;614    					/* Yield to wait for either a command to arrive, or the
;;;615    					block time to expire.  If a command arrived between the
;;;616    					critical section being exited and this yield then the yield
;;;617    					will not cause the task to block. */
;;;618    					portYIELD_WITHIN_API();
;;;619    				}
;;;620    				else
;;;621    				{
;;;622    					mtCOVERAGE_TEST_MARKER();
;;;623    				}
;;;624    			}
;;;625    		}
;;;626    		else
;;;627    		{
;;;628    			( void ) xTaskResumeAll();
000016  f7fffffe          BL       xTaskResumeAll
                  |L6.26|
;;;629    		}
;;;630    	}
;;;631    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L6.28|
00001c  4811              LDR      r0,|L6.100|
00001e  b1ad              CBZ      r5,|L6.76|
000020  6901              LDR      r1,[r0,#0x10]         ;607  ; pxOverflowTimerList
000022  6809              LDR      r1,[r1,#0]            ;607
000024  b1d9              CBZ      r1,|L6.94|
000026  2500              MOVS     r5,#0                 ;607
                  |L6.40|
000028  1b31              SUBS     r1,r6,r4              ;610
00002a  462a              MOV      r2,r5                 ;610
00002c  6800              LDR      r0,[r0,#0]            ;610  ; xTimerQueue
00002e  f7fffffe          BL       vQueueWaitForMessageRestricted
000032  f7fffffe          BL       xTaskResumeAll
000036  2800              CMP      r0,#0                 ;612
000038  d1ef              BNE      |L6.26|
00003a  490b              LDR      r1,|L6.104|
00003c  f04f5080          MOV      r0,#0x10000000        ;618
000040  6008              STR      r0,[r1,#0]            ;618
000042  f3bf8f4f          DSB                            ;618
000046  f3bf8f6f          ISB                            ;618
00004a  bdf8              POP      {r3-r7,pc}
                  |L6.76|
00004c  42a6              CMP      r6,r4                 ;590
00004e  d8eb              BHI      |L6.40|
000050  f7fffffe          BL       xTaskResumeAll
000054  4621              MOV      r1,r4                 ;593
000056  4630              MOV      r0,r6                 ;593
000058  f7fffffe          BL       prvProcessExpiredTimer
00005c  bdf8              POP      {r3-r7,pc}
                  |L6.94|
00005e  2501              MOVS     r5,#1                 ;607
000060  e7e2              B        |L6.40|
;;;632    /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
                          DCD      ||.data||
                  |L6.104|
                          DCD      0xe000ed04

                          AREA ||i.prvSampleTimeNow||, CODE, READONLY, ALIGN=2

                  prvSampleTimeNow PROC
;;;659    
;;;660    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
000000  b570              PUSH     {r4-r6,lr}
;;;661    {
000002  4605              MOV      r5,r0
;;;662    TickType_t xTimeNow;
;;;663    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;664    
;;;665    	xTimeNow = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
;;;666    
;;;667    	if( xTimeNow < xLastTime )
000008  4e06              LDR      r6,|L7.36|
00000a  4604              MOV      r4,r0                 ;665
00000c  68b0              LDR      r0,[r6,#8]  ; xLastTime
00000e  4284              CMP      r4,r0
000010  d203              BCS      |L7.26|
;;;668    	{
;;;669    		prvSwitchTimerLists();
000012  f7fffffe          BL       prvSwitchTimerLists
;;;670    		*pxTimerListsWereSwitched = pdTRUE;
000016  2001              MOVS     r0,#1
000018  e000              B        |L7.28|
                  |L7.26|
;;;671    	}
;;;672    	else
;;;673    	{
;;;674    		*pxTimerListsWereSwitched = pdFALSE;
00001a  2000              MOVS     r0,#0
                  |L7.28|
;;;675    	}
;;;676    
;;;677    	xLastTime = xTimeNow;
00001c  6028              STR      r0,[r5,#0]
;;;678    
;;;679    	return xTimeNow;
00001e  4620              MOV      r0,r4
000020  60b4              STR      r4,[r6,#8]  ; xLastTime
;;;680    }
000022  bd70              POP      {r4-r6,pc}
;;;681    /*-----------------------------------------------------------*/
                          ENDP

                  |L7.36|
                          DCD      ||.data||

                          AREA ||i.prvSwitchTimerLists||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  prvSwitchTimerLists PROC
;;;870    
;;;871    static void prvSwitchTimerLists( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;872    {
;;;873    TickType_t xNextExpireTime, xReloadTime;
;;;874    List_t *pxTemp;
;;;875    Timer_t *pxTimer;
;;;876    BaseType_t xResult;
;;;877    
;;;878    	/* The tick count has overflowed.  The timer lists must be switched.
;;;879    	If there are any timers still referenced from the current timer list
;;;880    	then they must have expired and should be processed before the lists
;;;881    	are switched. */
;;;882    	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
;;;883    	{
;;;884    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
000002  4e18              LDR      r6,|L8.100|
000004  e026              B        |L8.84|
                  |L8.6|
000006  68c0              LDR      r0,[r0,#0xc]
;;;885    
;;;886    		/* Remove the timer from the list. */
;;;887    		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
;;;888    		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
000008  68c4              LDR      r4,[r0,#0xc]
00000a  6805              LDR      r5,[r0,#0]
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       uxListRemove
;;;889    		traceTIMER_EXPIRED( pxTimer );
;;;890    
;;;891    		/* Execute its callback, then send a command to restart the timer if
;;;892    		it is an auto-reload timer.  It cannot be restarted here as the lists
;;;893    		have not yet been switched. */
;;;894    		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000012  6a61              LDR      r1,[r4,#0x24]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;895    
;;;896    		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
000018  69e0              LDR      r0,[r4,#0x1c]
00001a  2801              CMP      r0,#1
00001c  d11a              BNE      |L8.84|
;;;897    		{
;;;898    			/* Calculate the reload value, and if the reload value results in
;;;899    			the timer going into the same timer list then it has already expired
;;;900    			and the timer should be re-inserted into the current list so it is
;;;901    			processed again within this loop.  Otherwise a command should be sent
;;;902    			to restart the timer to ensure it is only inserted into a list after
;;;903    			the lists have been swapped. */
;;;904    			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
00001e  69a0              LDR      r0,[r4,#0x18]
000020  4428              ADD      r0,r0,r5
;;;905    			if( xReloadTime > xNextExpireTime )
000022  42a8              CMP      r0,r5
000024  d906              BLS      |L8.52|
;;;906    			{
;;;907    				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
;;;908    				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000026  6124              STR      r4,[r4,#0x10]
000028  6060              STR      r0,[r4,#4]
;;;909    				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
00002a  1d21              ADDS     r1,r4,#4
00002c  68f0              LDR      r0,[r6,#0xc]  ; pxCurrentTimerList
00002e  f7fffffe          BL       vListInsert
000032  e00f              B        |L8.84|
                  |L8.52|
;;;910    			}
;;;911    			else
;;;912    			{
;;;913    				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
000034  2000              MOVS     r0,#0
000036  4603              MOV      r3,r0
000038  4601              MOV      r1,r0
00003a  9000              STR      r0,[sp,#0]
00003c  462a              MOV      r2,r5
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       xTimerGenericCommand
;;;914    				configASSERT( xResult );
000044  b930              CBNZ     r0,|L8.84|
000046  4908              LDR      r1,|L8.104|
000048  f2403292          MOV      r2,#0x392
00004c  f1010018          ADD      r0,r1,#0x18
000050  f7fffffe          BL       __2printf
                  |L8.84|
000054  68f0              LDR      r0,[r6,#0xc]          ;882  ; pxCurrentTimerList
000056  6801              LDR      r1,[r0,#0]            ;882
000058  2900              CMP      r1,#0                 ;882
00005a  d1d4              BNE      |L8.6|
;;;915    				( void ) xResult;
;;;916    			}
;;;917    		}
;;;918    		else
;;;919    		{
;;;920    			mtCOVERAGE_TEST_MARKER();
;;;921    		}
;;;922    	}
;;;923    
;;;924    	pxTemp = pxCurrentTimerList;
;;;925    	pxCurrentTimerList = pxOverflowTimerList;
00005c  6931              LDR      r1,[r6,#0x10]  ; pxOverflowTimerList
00005e  e9c61003          STRD     r1,r0,[r6,#0xc]
;;;926    	pxOverflowTimerList = pxTemp;
;;;927    }
000062  bdf8              POP      {r3-r7,pc}
;;;928    /*-----------------------------------------------------------*/
                          ENDP

                  |L8.100|
                          DCD      ||.data||
                  |L8.104|
                          DCD      ||i.xTimerCreate||+0x4c

                          AREA ||i.prvTimerTask||, CODE, READONLY, ALIGN=2

                  prvTimerTask PROC
;;;537    
;;;538    static void prvTimerTask( void *pvParameters )
000000  4c08              LDR      r4,|L9.36|
                  |L9.2|
000002  68e0              LDR      r0,[r4,#0xc]  ; pxCurrentTimerList
000004  6801              LDR      r1,[r0,#0]
000006  b139              CBZ      r1,|L9.24|
000008  2100              MOVS     r1,#0
                  |L9.10|
00000a  b139              CBZ      r1,|L9.28|
00000c  2000              MOVS     r0,#0
                  |L9.14|
;;;539    {
;;;540    TickType_t xNextExpireTime;
;;;541    BaseType_t xListWasEmpty;
;;;542    
;;;543    	/* Just to avoid compiler warnings. */
;;;544    	( void ) pvParameters;
;;;545    
;;;546    	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
;;;547    	{
;;;548    		extern void vApplicationDaemonTaskStartupHook( void );
;;;549    
;;;550    		/* Allow the application writer to execute some code in the context of
;;;551    		this task at the point the task starts executing.  This is useful if the
;;;552    		application includes initialisation code that would benefit from
;;;553    		executing after the scheduler has been started. */
;;;554    		vApplicationDaemonTaskStartupHook();
;;;555    	}
;;;556    	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
;;;557    
;;;558    	for( ;; )
;;;559    	{
;;;560    		/* Query the timers list to see if it contains any timers, and if so,
;;;561    		obtain the time at which the next timer will expire. */
;;;562    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
;;;563    
;;;564    		/* If a timer has expired, process it.  Otherwise, block this task
;;;565    		until either a timer does expire, or a command is received. */
;;;566    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
00000e  f7fffffe          BL       prvProcessTimerOrBlockTask
;;;567    
;;;568    		/* Empty the command queue. */
;;;569    		prvProcessReceivedCommands();
000012  f7fffffe          BL       prvProcessReceivedCommands
000016  e7f4              B        |L9.2|
                  |L9.24|
000018  2101              MOVS     r1,#1
00001a  e7f6              B        |L9.10|
                  |L9.28|
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  6800              LDR      r0,[r0,#0]
000020  e7f5              B        |L9.14|
;;;570    	}
;;;571    }
;;;572    /*-----------------------------------------------------------*/
                          ENDP

000022  0000              DCW      0x0000
                  |L9.36|
                          DCD      ||.data||

                          AREA ||i.pvTimerGetTimerID||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  pvTimerGetTimerID PROC
;;;1001   
;;;1002   void *pvTimerGetTimerID( const TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;1003   {
;;;1004   Timer_t * const pxTimer = ( Timer_t * ) xTimer;
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L10.18|
;;;1005   void *pvReturn;
;;;1006   
;;;1007   	configASSERT( xTimer );
000006  f24032ef          MOV      r2,#0x3ef
00000a  a105              ADR      r1,|L10.32|
00000c  a00a              ADR      r0,|L10.56|
00000e  f7fffffe          BL       __2printf
                  |L10.18|
;;;1008   
;;;1009   	taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;1010   	{
;;;1011   		pvReturn = pxTimer->pvTimerID;
000016  6a24              LDR      r4,[r4,#0x20]
;;;1012   	}
;;;1013   	taskEXIT_CRITICAL();
000018  f7fffffe          BL       vPortExitCritical
;;;1014   
;;;1015   	return pvReturn;
00001c  4620              MOV      r0,r4
;;;1016   }
00001e  bd10              POP      {r4,pc}
;;;1017   /*-----------------------------------------------------------*/
                          ENDP

                  |L10.32|
000020  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000024  72656552
000028  544f535c
00002c  74696d65
000030  72732e63
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
                  |L10.56|
000038  4572726f          DCB      "Error:%s,%d\r\n",0
00003c  723a2573
000040  2c25640d
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.vTimerSetTimerID||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTimerSetTimerID PROC
;;;1018   
;;;1019   void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
000000  b570              PUSH     {r4-r6,lr}
;;;1020   {
000002  460d              MOV      r5,r1
;;;1021   Timer_t * const pxTimer = ( Timer_t * ) xTimer;
000004  0004              MOVS     r4,r0
000006  d105              BNE      |L11.20|
;;;1022   
;;;1023   	configASSERT( xTimer );
000008  f24032ff          MOV      r2,#0x3ff
00000c  a105              ADR      r1,|L11.36|
00000e  a00b              ADR      r0,|L11.60|
000010  f7fffffe          BL       __2printf
                  |L11.20|
;;;1024   
;;;1025   	taskENTER_CRITICAL();
000014  f7fffffe          BL       vPortEnterCritical
;;;1026   	{
;;;1027   		pxTimer->pvTimerID = pvNewID;
;;;1028   	}
;;;1029   	taskEXIT_CRITICAL();
000018  6225              STR      r5,[r4,#0x20]
00001a  e8bd4070          POP      {r4-r6,lr}
00001e  f7ffbffe          B.W      vPortExitCritical
;;;1030   }
;;;1031   /*-----------------------------------------------------------*/
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
000024  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000028  72656552
00002c  544f535c
000030  74696d65
000034  72732e63
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L11.60|
00003c  4572726f          DCB      "Error:%s,%d\r\n",0
000040  723a2573
000044  2c25640d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.xTimerCreate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerCreate PROC
;;;313    
;;;314    	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;315    								const TickType_t xTimerPeriodInTicks,
;;;316    								const UBaseType_t uxAutoReload,
;;;317    								void * const pvTimerID,
;;;318    								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;319    	{
000004  4607              MOV      r7,r0
000006  4699              MOV      r9,r3
000008  4616              MOV      r6,r2
00000a  460d              MOV      r5,r1
;;;320    	Timer_t *pxNewTimer;
;;;321    
;;;322    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
00000c  202c              MOVS     r0,#0x2c
00000e  f8dda020          LDR      r10,[sp,#0x20]
000012  f7fffffe          BL       pvPortMalloc
000016  0004              MOVS     r4,r0
;;;323    
;;;324    		if( pxNewTimer != NULL )
000018  d014              BEQ      |L12.68|
;;;325    		{
;;;326    			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
00001a  46b8              MOV      r8,r7
00001c  464f              MOV      r7,r9
00001e  46d1              MOV      r9,r10
000020  b92d              CBNZ     r5,|L12.46|
000022  f44f72c6          MOV      r2,#0x18c
000026  a109              ADR      r1,|L12.76|
000028  a00e              ADR      r0,|L12.100|
00002a  f7fffffe          BL       __2printf
                  |L12.46|
00002e  f7fffffe          BL       prvCheckForValidListAndQueue
000032  f1040118          ADD      r1,r4,#0x18
000036  f8c48000          STR      r8,[r4,#0]
00003a  e88102e0          STM      r1,{r5-r7,r9}
00003e  1d20              ADDS     r0,r4,#4
000040  f7fffffe          BL       vListInitialiseItem
                  |L12.68|
;;;327    
;;;328    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;329    			{
;;;330    				/* Timers can be created statically or dynamically, so note this
;;;331    				timer was created dynamically in case the timer is later
;;;332    				deleted. */
;;;333    				pxNewTimer->ucStaticallyAllocated = pdFALSE;
;;;334    			}
;;;335    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;336    		}
;;;337    
;;;338    		return pxNewTimer;
000044  4620              MOV      r0,r4
;;;339    	}
000046  e8bd87f0          POP      {r4-r10,pc}
;;;340    
                          ENDP

00004a  0000              DCW      0x0000
                  |L12.76|
00004c  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000050  72656552
000054  544f535c
000058  74696d65
00005c  72732e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L12.100|
000064  4572726f          DCB      "Error:%s,%d\r\n",0
000068  723a2573
00006c  2c25640d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.xTimerCreateTimerTask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerCreateTimerTask PROC
;;;258    
;;;259    BaseType_t xTimerCreateTimerTask( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;260    {
;;;261    BaseType_t xReturn = pdFAIL;
000002  2400              MOVS     r4,#0
;;;262    
;;;263    	/* This function is called when the scheduler is started if
;;;264    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;265    	timer service task has been created/initialised.  If timers have already
;;;266    	been created then the initialisation will already have been performed. */
;;;267    	prvCheckForValidListAndQueue();
000004  f7fffffe          BL       prvCheckForValidListAndQueue
;;;268    
;;;269    	if( xTimerQueue != NULL )
000008  480c              LDR      r0,|L13.60|
00000a  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00000c  b168              CBZ      r0,|L13.42|
;;;270    	{
;;;271    		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;272    		{
;;;273    			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
;;;274    			StackType_t *pxTimerTaskStackBuffer = NULL;
;;;275    			uint32_t ulTimerTaskStackSize;
;;;276    
;;;277    			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
;;;278    			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
;;;279    													"Tmr Svc",
;;;280    													ulTimerTaskStackSize,
;;;281    													NULL,
;;;282    													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;283    													pxTimerTaskStackBuffer,
;;;284    													pxTimerTaskTCBBuffer );
;;;285    
;;;286    			if( xTimerTaskHandle != NULL )
;;;287    			{
;;;288    				xReturn = pdPASS;
;;;289    			}
;;;290    		}
;;;291    		#else
;;;292    		{
;;;293    			xReturn = xTaskCreate(	prvTimerTask,
00000e  490b              LDR      r1,|L13.60|
000010  201f              MOVS     r0,#0x1f
000012  1d09              ADDS     r1,r1,#4
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  2300              MOVS     r3,#0
00001a  f44f7282          MOV      r2,#0x104
00001e  a108              ADR      r1,|L13.64|
000020  4809              LDR      r0,|L13.72|
000022  f7fffffe          BL       xTaskCreate
000026  0004              MOVS     r4,r0
000028  d105              BNE      |L13.54|
                  |L13.42|
;;;294    									"Tmr Svc",
;;;295    									configTIMER_TASK_STACK_DEPTH,
;;;296    									NULL,
;;;297    									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;298    									&xTimerTaskHandle );
;;;299    		}
;;;300    		#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;301    	}
;;;302    	else
;;;303    	{
;;;304    		mtCOVERAGE_TEST_MARKER();
;;;305    	}
;;;306    
;;;307    	configASSERT( xReturn );
00002a  f2401233          MOV      r2,#0x133
00002e  a107              ADR      r1,|L13.76|
000030  a00c              ADR      r0,|L13.100|
000032  f7fffffe          BL       __2printf
                  |L13.54|
;;;308    	return xReturn;
000036  4620              MOV      r0,r4
;;;309    }
000038  bd1c              POP      {r2-r4,pc}
;;;310    /*-----------------------------------------------------------*/
                          ENDP

00003a  0000              DCW      0x0000
                  |L13.60|
                          DCD      ||.data||
                  |L13.64|
000040  546d7220          DCB      "Tmr Svc",0
000044  53766300
                  |L13.72|
                          DCD      prvTimerTask
                  |L13.76|
00004c  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000050  72656552
000054  544f535c
000058  74696d65
00005c  72732e63
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L13.100|
000064  4572726f          DCB      "Error:%s,%d\r\n",0
000068  723a2573
00006c  2c25640d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.xTimerGenericCommand||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerGenericCommand PROC
;;;416    
;;;417    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;418    {
000004  f8dda030          LDR      r10,[sp,#0x30]
000008  4699              MOV      r9,r3
00000a  4690              MOV      r8,r2
00000c  460d              MOV      r5,r1
00000e  0006              MOVS     r6,r0
;;;419    BaseType_t xReturn = pdFAIL;
000010  f04f0700          MOV      r7,#0
000014  d105              BNE      |L14.34|
;;;420    DaemonTaskMessage_t xMessage;
;;;421    
;;;422    	configASSERT( xTimer );
000016  f44f72d3          MOV      r2,#0x1a6
00001a  a112              ADR      r1,|L14.100|
00001c  a017              ADR      r0,|L14.124|
00001e  f7fffffe          BL       __2printf
                  |L14.34|
;;;423    
;;;424    	/* Send a message to the timer service task to perform a particular action
;;;425    	on a particular timer definition. */
;;;426    	if( xTimerQueue != NULL )
000022  4c1a              LDR      r4,|L14.140|
000024  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000026  b180              CBZ      r0,|L14.74|
;;;427    	{
;;;428    		/* Send a command to the timer service task to start the xTimer timer. */
;;;429    		xMessage.xMessageID = xCommandID;
;;;430    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
;;;431    		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
000028  e9cd5800          STRD     r5,r8,[sp,#0]
00002c  9602              STR      r6,[sp,#8]
;;;432    
;;;433    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
00002e  2d06              CMP      r5,#6
000030  da11              BGE      |L14.86|
;;;434    		{
;;;435    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
000032  f7fffffe          BL       xTaskGetSchedulerState
000036  2802              CMP      r0,#2
;;;436    			{
;;;437    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
;;;438    			}
;;;439    			else
;;;440    			{
;;;441    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
000038  f04f0300          MOV      r3,#0
00003c  d009              BEQ      |L14.82|
00003e  2200              MOVS     r2,#0
                  |L14.64|
000040  4669              MOV      r1,sp                 ;437
000042  6820              LDR      r0,[r4,#0]            ;437  ; xTimerQueue
000044  f7fffffe          BL       xQueueGenericSend
                  |L14.72|
;;;442    			}
;;;443    		}
;;;444    		else
;;;445    		{
;;;446    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
000048  4607              MOV      r7,r0
                  |L14.74|
;;;447    		}
;;;448    
;;;449    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;450    	}
;;;451    	else
;;;452    	{
;;;453    		mtCOVERAGE_TEST_MARKER();
;;;454    	}
;;;455    
;;;456    	return xReturn;
;;;457    }
00004a  b004              ADD      sp,sp,#0x10
00004c  4638              MOV      r0,r7                 ;456
00004e  e8bd87f0          POP      {r4-r10,pc}
                  |L14.82|
000052  4652              MOV      r2,r10                ;437
000054  e7f4              B        |L14.64|
                  |L14.86|
000056  2300              MOVS     r3,#0                 ;446
000058  464a              MOV      r2,r9                 ;446
00005a  4669              MOV      r1,sp                 ;446
00005c  f7fffffe          BL       xQueueGenericSendFromISR
000060  e7f2              B        |L14.72|
;;;458    /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L14.100|
000064  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000068  72656552
00006c  544f535c
000070  74696d65
000074  72732e63
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L14.124|
00007c  4572726f          DCB      "Error:%s,%d\r\n",0
000080  723a2573
000084  2c25640d
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L14.140|
                          DCD      ||.data||

                          AREA ||i.xTimerGetExpiryTime||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerGetExpiryTime PROC
;;;477    
;;;478    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;479    {
;;;480    Timer_t * pxTimer = ( Timer_t * ) xTimer;
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L15.18|
;;;481    TickType_t xReturn;
;;;482    
;;;483    	configASSERT( xTimer );
000006  f24012e3          MOV      r2,#0x1e3
00000a  a103              ADR      r1,|L15.24|
00000c  a008              ADR      r0,|L15.48|
00000e  f7fffffe          BL       __2printf
                  |L15.18|
;;;484    	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
000012  6860              LDR      r0,[r4,#4]
;;;485    	return xReturn;
;;;486    }
000014  bd10              POP      {r4,pc}
;;;487    /*-----------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
000018  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
00001c  72656552
000020  544f535c
000024  74696d65
000028  72732e63
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L15.48|
000030  4572726f          DCB      "Error:%s,%d\r\n",0
000034  723a2573
000038  2c25640d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.xTimerGetPeriod||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerGetPeriod PROC
;;;468    
;;;469    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;470    {
;;;471    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L16.18|
;;;472    
;;;473    	configASSERT( xTimer );
000006  f24012d9          MOV      r2,#0x1d9
00000a  a103              ADR      r1,|L16.24|
00000c  a008              ADR      r0,|L16.48|
00000e  f7fffffe          BL       __2printf
                  |L16.18|
;;;474    	return pxTimer->xTimerPeriodInTicks;
000012  69a0              LDR      r0,[r4,#0x18]
;;;475    }
000014  bd10              POP      {r4,pc}
;;;476    /*-----------------------------------------------------------*/
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
000018  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
00001c  72656552
000020  544f535c
000024  74696d65
000028  72732e63
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L16.48|
000030  4572726f          DCB      "Error:%s,%d\r\n",0
000034  723a2573
000038  2c25640d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.xTimerGetTimerDaemonTaskHandle||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerGetTimerDaemonTaskHandle PROC
;;;459    
;;;460    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
000000  b510              PUSH     {r4,lr}
;;;461    {
;;;462    	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
;;;463    	started, then xTimerTaskHandle will be NULL. */
;;;464    	configASSERT( ( xTimerTaskHandle != NULL ) );
000002  4c05              LDR      r4,|L17.24|
000004  6860              LDR      r0,[r4,#4]            ;461  ; xTimerTaskHandle
000006  b928              CBNZ     r0,|L17.20|
000008  f44f72e8          MOV      r2,#0x1d0
00000c  a103              ADR      r1,|L17.28|
00000e  a009              ADR      r0,|L17.52|
000010  f7fffffe          BL       __2printf
                  |L17.20|
;;;465    	return xTimerTaskHandle;
000014  6860              LDR      r0,[r4,#4]  ; xTimerTaskHandle
;;;466    }
000016  bd10              POP      {r4,pc}
;;;467    /*-----------------------------------------------------------*/
                          ENDP

                  |L17.24|
                          DCD      ||.data||
                  |L17.28|
00001c  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000020  72656552
000024  544f535c
000028  74696d65
00002c  72732e63
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L17.52|
000034  4572726f          DCB      "Error:%s,%d\r\n",0
000038  723a2573
00003c  2c25640d
000040  0a00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.xTimerIsTimerActive||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerIsTimerActive PROC
;;;980    
;;;981    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;982    {
;;;983    BaseType_t xTimerIsInActiveList;
;;;984    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L18.18|
;;;985    
;;;986    	configASSERT( xTimer );
000006  f24032da          MOV      r2,#0x3da
00000a  a107              ADR      r1,|L18.40|
00000c  a00c              ADR      r0,|L18.64|
00000e  f7fffffe          BL       __2printf
                  |L18.18|
;;;987    
;;;988    	/* Is the timer in the list of active timers? */
;;;989    	taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;990    	{
;;;991    		/* Checking to see if it is in the NULL list in effect checks to see if
;;;992    		it is referenced from either the current or the overflow timer lists in
;;;993    		one go, but the logic has to be reversed, hence the '!'. */
;;;994    		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
000016  6960              LDR      r0,[r4,#0x14]
000018  b108              CBZ      r0,|L18.30|
00001a  2401              MOVS     r4,#1
00001c  e000              B        |L18.32|
                  |L18.30|
00001e  2400              MOVS     r4,#0
                  |L18.32|
;;;995    	}
;;;996    	taskEXIT_CRITICAL();
000020  f7fffffe          BL       vPortExitCritical
;;;997    
;;;998    	return xTimerIsInActiveList;
000024  4620              MOV      r0,r4
;;;999    } /*lint !e818 Can't be pointer to const due to the typedef. */
000026  bd10              POP      {r4,pc}
;;;1000   /*-----------------------------------------------------------*/
                          ENDP

                  |L18.40|
000028  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
00002c  72656552
000030  544f535c
000034  74696d65
000038  72732e63
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L18.64|
000040  4572726f          DCB      "Error:%s,%d\r\n",0
000044  723a2573
000048  2c25640d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.xTimerPendFunctionCall||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTimerPendFunctionCall PROC
;;;1058   
;;;1059   	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;1060   	{
;;;1061   	DaemonTaskMessage_t xMessage;
;;;1062   	BaseType_t xReturn;
;;;1063   
;;;1064   		/* This function can only be called after a timer has been created or
;;;1065   		after the scheduler has been started because, until then, the timer
;;;1066   		queue does not exist. */
;;;1067   		configASSERT( xTimerQueue );
000004  4c0d              LDR      r4,|L19.60|
000006  4607              MOV      r7,r0                 ;1060
000008  4698              MOV      r8,r3                 ;1060
00000a  6820              LDR      r0,[r4,#0]            ;1060  ; xTimerQueue
00000c  4615              MOV      r5,r2                 ;1060
00000e  460e              MOV      r6,r1                 ;1060
000010  b928              CBNZ     r0,|L19.30|
000012  f240422b          MOV      r2,#0x42b
000016  a10a              ADR      r1,|L19.64|
000018  a00f              ADR      r0,|L19.88|
00001a  f7fffffe          BL       __2printf
                  |L19.30|
;;;1068   
;;;1069   		/* Complete the message with the function parameters and post it to the
;;;1070   		daemon task. */
;;;1071   		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
00001e  f04f30ff          MOV      r0,#0xffffffff
;;;1072   		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
;;;1073   		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
;;;1074   		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
;;;1075   
;;;1076   		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
000022  e9cd0700          STRD     r0,r7,[sp,#0]
000026  e9cd6502          STRD     r6,r5,[sp,#8]
00002a  2300              MOVS     r3,#0
00002c  4642              MOV      r2,r8
00002e  4669              MOV      r1,sp
000030  6820              LDR      r0,[r4,#0]  ; xTimerQueue
000032  f7fffffe          BL       xQueueGenericSend
;;;1077   
;;;1078   		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
;;;1079   
;;;1080   		return xReturn;
;;;1081   	}
000036  b004              ADD      sp,sp,#0x10
000038  e8bd81f0          POP      {r4-r8,pc}
;;;1082   
                          ENDP

                  |L19.60|
                          DCD      ||.data||
                  |L19.64|
000040  2e2e5c46          DCB      "..\\FreeRTOS\\timers.c",0
000044  72656552
000048  544f535c
00004c  74696d65
000050  72732e63
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L19.88|
000058  4572726f          DCB      "Error:%s,%d\r\n",0
00005c  723a2573
000060  2c25640d
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.xTimerPendFunctionCallFromISR||, CODE, READONLY, ALIGN=2

                  xTimerPendFunctionCallFromISR PROC
;;;1034   
;;;1035   	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
000000  b57f              PUSH     {r0-r6,lr}
;;;1036   	{
;;;1037   	DaemonTaskMessage_t xMessage;
;;;1038   	BaseType_t xReturn;
;;;1039   
;;;1040   		/* Complete the message with the function parameters and post it to the
;;;1041   		daemon task. */
;;;1042   		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
000002  f06f0401          MVN      r4,#1
;;;1043   		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
;;;1044   		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
;;;1045   		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
;;;1046   
;;;1047   		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
000006  ae01              ADD      r6,sp,#4
000008  9400              STR      r4,[sp,#0]
00000a  e8860007          STM      r6,{r0-r2}
00000e  4805              LDR      r0,|L20.36|
000010  461d              MOV      r5,r3                 ;1036
000012  2300              MOVS     r3,#0
000014  462a              MOV      r2,r5
000016  4669              MOV      r1,sp
000018  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00001a  f7fffffe          BL       xQueueGenericSendFromISR
;;;1048   
;;;1049   		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
;;;1050   
;;;1051   		return xReturn;
;;;1052   	}
00001e  b004              ADD      sp,sp,#0x10
000020  bd70              POP      {r4-r6,pc}
;;;1053   
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  xTimerQueue
                          DCD      0x00000000
                  xTimerTaskHandle
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000
