; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\tasks.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\tasks.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I"E:\STM32F103战舰V3资料\STM32F103 FreeRTOS例程\FreeRTOS实验17-1 FreeRTOS内存管理实验\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\tasks.crf ..\FreeRTOS\tasks.c]
                          THUMB

                          AREA ||i.eTaskGetState||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  eTaskGetState PROC
;;;1268   
;;;1269   	eTaskState eTaskGetState( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1270   	{
000002  0005              MOVS     r5,r0
000004  d105              BNE      |L1.18|
;;;1271   	eTaskState eReturn;
;;;1272   	List_t *pxStateList;
;;;1273   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
;;;1274   
;;;1275   		configASSERT( pxTCB );
000006  f24042fb          MOV      r2,#0x4fb
00000a  a114              ADR      r1,|L1.92|
00000c  a018              ADR      r0,|L1.112|
00000e  f7fffffe          BL       __2printf
                  |L1.18|
;;;1276   
;;;1277   		if( pxTCB == pxCurrentTCB )
000012  4e1b              LDR      r6,|L1.128|
000014  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000016  4285              CMP      r5,r0
000018  d101              BNE      |L1.30|
;;;1278   		{
;;;1279   			/* The task calling this function is querying its own state. */
;;;1280   			eReturn = eRunning;
00001a  2000              MOVS     r0,#0
;;;1281   		}
;;;1282   		else
;;;1283   		{
;;;1284   			taskENTER_CRITICAL();
;;;1285   			{
;;;1286   				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
;;;1287   			}
;;;1288   			taskEXIT_CRITICAL();
;;;1289   
;;;1290   			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
;;;1291   			{
;;;1292   				/* The task being queried is referenced from one of the Blocked
;;;1293   				lists. */
;;;1294   				eReturn = eBlocked;
;;;1295   			}
;;;1296   
;;;1297   			#if ( INCLUDE_vTaskSuspend == 1 )
;;;1298   				else if( pxStateList == &xSuspendedTaskList )
;;;1299   				{
;;;1300   					/* The task being queried is referenced from the suspended
;;;1301   					list.  Is it genuinely suspended or is it block
;;;1302   					indefinitely? */
;;;1303   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
;;;1304   					{
;;;1305   						eReturn = eSuspended;
;;;1306   					}
;;;1307   					else
;;;1308   					{
;;;1309   						eReturn = eBlocked;
;;;1310   					}
;;;1311   				}
;;;1312   			#endif
;;;1313   
;;;1314   			#if ( INCLUDE_vTaskDelete == 1 )
;;;1315   				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
;;;1316   				{
;;;1317   					/* The task being queried is referenced from the deleted
;;;1318   					tasks list, or it is not referenced from any lists at
;;;1319   					all. */
;;;1320   					eReturn = eDeleted;
;;;1321   				}
;;;1322   			#endif
;;;1323   
;;;1324   			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
;;;1325   			{
;;;1326   				/* If the task is not in any other state, it must be in the
;;;1327   				Ready (including pending ready) state. */
;;;1328   				eReturn = eReady;
;;;1329   			}
;;;1330   		}
;;;1331   
;;;1332   		return eReturn;
;;;1333   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00001c  bd70              POP      {r4-r6,pc}
                  |L1.30|
00001e  f7fffffe          BL       vPortEnterCritical
000022  696c              LDR      r4,[r5,#0x14]         ;1288
000024  f7fffffe          BL       vPortExitCritical
000028  6bf0              LDR      r0,[r6,#0x3c]         ;1290  ; pxDelayedTaskList
00002a  4284              CMP      r4,r0                 ;1290
00002c  d002              BEQ      |L1.52|
00002e  6c30              LDR      r0,[r6,#0x40]         ;1290  ; pxOverflowDelayedTaskList
000030  4284              CMP      r4,r0                 ;1290
000032  d101              BNE      |L1.56|
                  |L1.52|
000034  2002              MOVS     r0,#2                 ;1294
000036  bd70              POP      {r4-r6,pc}
                  |L1.56|
000038  4812              LDR      r0,|L1.132|
00003a  4284              CMP      r4,r0                 ;1298
00003c  d104              BNE      |L1.72|
00003e  6aa8              LDR      r0,[r5,#0x28]         ;1303
000040  2800              CMP      r0,#0                 ;1303
000042  d1f7              BNE      |L1.52|
000044  2003              MOVS     r0,#3                 ;1305
000046  bd70              POP      {r4-r6,pc}
                  |L1.72|
000048  480e              LDR      r0,|L1.132|
00004a  3814              SUBS     r0,r0,#0x14           ;1315
00004c  4284              CMP      r4,r0                 ;1315
00004e  d002              BEQ      |L1.86|
000050  b10c              CBZ      r4,|L1.86|
000052  2001              MOVS     r0,#1                 ;1328
000054  bd70              POP      {r4-r6,pc}
                  |L1.86|
000056  2004              MOVS     r0,#4                 ;1320
000058  bd70              POP      {r4-r6,pc}
;;;1334   
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
00005c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000060  72656552
000064  544f535c
000068  7461736b
00006c  732e6300
                  |L1.112|
000070  4572726f          DCB      "Error:%s,%d\r\n",0
000074  723a2573
000078  2c25640d
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L1.128|
                          DCD      ||.data||
                  |L1.132|
                          DCD      ||.bss||+0x2d0

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  pcTaskGetName PROC
;;;2180   
;;;2181   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  b510              PUSH     {r4,lr}
;;;2182   {
000002  b110              CBZ      r0,|L2.10|
;;;2183   TCB_t *pxTCB;
;;;2184   
;;;2185   	/* If null is passed in here then the name of the calling task is being
;;;2186   	queried. */
;;;2187   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000004  4604              MOV      r4,r0
                  |L2.6|
;;;2188   	configASSERT( pxTCB );
000006  b11c              CBZ      r4,|L2.16|
000008  e008              B        |L2.28|
                  |L2.10|
00000a  4806              LDR      r0,|L2.36|
00000c  6804              LDR      r4,[r0,#0]            ;2187  ; pxCurrentTCB
00000e  e7fa              B        |L2.6|
                  |L2.16|
000010  f640028c          MOV      r2,#0x88c
000014  a104              ADR      r1,|L2.40|
000016  a009              ADR      r0,|L2.60|
000018  f7fffffe          BL       __2printf
                  |L2.28|
;;;2189   	return &( pxTCB->pcTaskName[ 0 ] );
00001c  f1040034          ADD      r0,r4,#0x34
;;;2190   }
000020  bd10              POP      {r4,pc}
;;;2191   /*-----------------------------------------------------------*/
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.data||
                  |L2.40|
000028  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
00002c  72656552
000030  544f535c
000034  7461736b
000038  732e6300
                  |L2.60|
00003c  4572726f          DCB      "Error:%s,%d\r\n",0
000040  723a2573
000044  2c25640d
000048  0a00    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;4691   
;;;4692   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4693   {
;;;4694   TickType_t xTimeToWake;
;;;4695   const TickType_t xConstTickCount = xTickCount;
000004  4e18              LDR      r6,|L3.104|
000006  460f              MOV      r7,r1                 ;4693
000008  4604              MOV      r4,r0                 ;4693
00000a  68f5              LDR      r5,[r6,#0xc]  ; xTickCount
;;;4696   
;;;4697   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;4698   	{
;;;4699   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;4700   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;4701   		when the task leaves the Blocked state. */
;;;4702   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;4703   	}
;;;4704   	#endif
;;;4705   
;;;4706   	/* Remove the task from the ready list before adding it to the blocked list
;;;4707   	as the same list item is used for both lists. */
;;;4708   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000c  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00000e  1d00              ADDS     r0,r0,#4
000010  f7fffffe          BL       uxListRemove
000014  b938              CBNZ     r0,|L3.38|
;;;4709   	{
;;;4710   		/* The current task must be in a ready list, so there is no need to
;;;4711   		check, and the port reset macro can be called directly. */
;;;4712   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000016  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000018  f890102c          LDRB     r1,[r0,#0x2c]
00001c  2001              MOVS     r0,#1
00001e  4088              LSLS     r0,r0,r1
000020  6931              LDR      r1,[r6,#0x10]  ; uxTopReadyPriority
000022  4381              BICS     r1,r1,r0
000024  6131              STR      r1,[r6,#0x10]  ; uxTopReadyPriority
                  |L3.38|
;;;4713   	}
;;;4714   	else
;;;4715   	{
;;;4716   		mtCOVERAGE_TEST_MARKER();
;;;4717   	}
;;;4718   
;;;4719   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;4720   	{
;;;4721   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
000026  1c60              ADDS     r0,r4,#1
000028  d107              BNE      |L3.58|
00002a  b137              CBZ      r7,|L3.58|
;;;4722   		{
;;;4723   			/* Add the task to the suspended task list instead of a delayed task
;;;4724   			list to ensure it is not woken by a timing event.  It will block
;;;4725   			indefinitely. */
;;;4726   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
00002c  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
00002e  e8bd41f0          POP      {r4-r8,lr}
000032  480e              LDR      r0,|L3.108|
000034  1d09              ADDS     r1,r1,#4
000036  f7ffbffe          B.W      vListInsertEnd
                  |L3.58|
;;;4727   		}
;;;4728   		else
;;;4729   		{
;;;4730   			/* Calculate the time at which the task should be woken if the event
;;;4731   			does not occur.  This may overflow but this doesn't matter, the
;;;4732   			kernel will manage it correctly. */
;;;4733   			xTimeToWake = xConstTickCount + xTicksToWait;
;;;4734   
;;;4735   			/* The list item will be inserted in wake time order. */
;;;4736   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
00003a  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00003c  442c              ADD      r4,r4,r5              ;4733
;;;4737   
;;;4738   			if( xTimeToWake < xConstTickCount )
00003e  42ac              CMP      r4,r5
000040  6044              STR      r4,[r0,#4]
;;;4739   			{
;;;4740   				/* Wake time has overflowed.  Place this item in the overflow
;;;4741   				list. */
;;;4742   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4743   			}
;;;4744   			else
;;;4745   			{
;;;4746   				/* The wake time has not overflowed, so the current block list
;;;4747   				is used. */
;;;4748   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
000042  6831              LDR      r1,[r6,#0]  ; pxCurrentTCB
000044  d205              BCS      |L3.82|
000046  6c30              LDR      r0,[r6,#0x40]         ;4742  ; pxOverflowDelayedTaskList
000048  e8bd41f0          POP      {r4-r8,lr}            ;4742
00004c  1d09              ADDS     r1,r1,#4              ;4742
00004e  f7ffbffe          B.W      vListInsert
                  |L3.82|
000052  6bf0              LDR      r0,[r6,#0x3c]  ; pxDelayedTaskList
000054  1d09              ADDS     r1,r1,#4
000056  f7fffffe          BL       vListInsert
;;;4749   
;;;4750   				/* If the task entering the blocked state was placed at the
;;;4751   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;4752   				needs to be updated too. */
;;;4753   				if( xTimeToWake < xNextTaskUnblockTime )
00005a  6ab0              LDR      r0,[r6,#0x28]  ; xNextTaskUnblockTime
00005c  4284              CMP      r4,r0
00005e  d200              BCS      |L3.98|
;;;4754   				{
;;;4755   					xNextTaskUnblockTime = xTimeToWake;
000060  62b4              STR      r4,[r6,#0x28]  ; xNextTaskUnblockTime
                  |L3.98|
;;;4756   				}
;;;4757   				else
;;;4758   				{
;;;4759   					mtCOVERAGE_TEST_MARKER();
;;;4760   				}
;;;4761   			}
;;;4762   		}
;;;4763   	}
;;;4764   	#else /* INCLUDE_vTaskSuspend */
;;;4765   	{
;;;4766   		/* Calculate the time at which the task should be woken if the event
;;;4767   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;4768   		will manage it correctly. */
;;;4769   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;4770   
;;;4771   		/* The list item will be inserted in wake time order. */
;;;4772   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;4773   
;;;4774   		if( xTimeToWake < xConstTickCount )
;;;4775   		{
;;;4776   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;4777   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4778   		}
;;;4779   		else
;;;4780   		{
;;;4781   			/* The wake time has not overflowed, so the current block list is used. */
;;;4782   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4783   
;;;4784   			/* If the task entering the blocked state was placed at the head of the
;;;4785   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;4786   			too. */
;;;4787   			if( xTimeToWake < xNextTaskUnblockTime )
;;;4788   			{
;;;4789   				xNextTaskUnblockTime = xTimeToWake;
;;;4790   			}
;;;4791   			else
;;;4792   			{
;;;4793   				mtCOVERAGE_TEST_MARKER();
;;;4794   			}
;;;4795   		}
;;;4796   
;;;4797   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;4798   		( void ) xCanBlockIndefinitely;
;;;4799   	}
;;;4800   	#endif /* INCLUDE_vTaskSuspend */
;;;4801   }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;4802   
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      ||.data||
                  |L3.108|
                          DCD      ||.bss||+0x2d0

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;962    
;;;963    static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;964    {
000004  4605              MOV      r5,r0
;;;965    	/* Ensure interrupts don't access the task lists while the lists are being
;;;966    	updated. */
;;;967    	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;968    	{
;;;969    		uxCurrentNumberOfTasks++;
00000a  4e2d              LDR      r6,|L4.192|
00000c  68b0              LDR      r0,[r6,#8]  ; uxCurrentNumberOfTasks
00000e  1c40              ADDS     r0,r0,#1
000010  60b0              STR      r0,[r6,#8]  ; uxCurrentNumberOfTasks
;;;970    		if( pxCurrentTCB == NULL )
000012  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
000014  4f2b              LDR      r7,|L4.196|
000016  b110              CBZ      r0,|L4.30|
;;;971    		{
;;;972    			/* There are no other tasks, or all the other tasks are in
;;;973    			the suspended state - make this the current task. */
;;;974    			pxCurrentTCB = pxNewTCB;
;;;975    
;;;976    			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
;;;977    			{
;;;978    				/* This is the first task to be created so do the preliminary
;;;979    				initialisation required.  We will not recover if this call
;;;980    				fails, but we will report the failure. */
;;;981    				prvInitialiseTaskLists();
;;;982    			}
;;;983    			else
;;;984    			{
;;;985    				mtCOVERAGE_TEST_MARKER();
;;;986    			}
;;;987    		}
;;;988    		else
;;;989    		{
;;;990    			/* If the scheduler is not already running, make this task the
;;;991    			current task if it is the highest priority task to be created
;;;992    			so far. */
;;;993    			if( xSchedulerRunning == pdFALSE )
000018  6970              LDR      r0,[r6,#0x14]  ; xSchedulerRunning
00001a  b330              CBZ      r0,|L4.106|
00001c  e02b              B        |L4.118|
                  |L4.30|
00001e  6035              STR      r5,[r6,#0]            ;974  ; pxCurrentTCB
000020  68b0              LDR      r0,[r6,#8]            ;976  ; uxCurrentNumberOfTasks
000022  2801              CMP      r0,#1                 ;976
000024  d127              BNE      |L4.118|
000026  2400              MOVS     r4,#0                 ;976
                  |L4.40|
000028  eb040084          ADD      r0,r4,r4,LSL #2       ;976
00002c  eb070080          ADD      r0,r7,r0,LSL #2       ;976
000030  f7fffffe          BL       vListInitialise
000034  1c64              ADDS     r4,r4,#1              ;976
000036  2c20              CMP      r4,#0x20              ;976
000038  d3f6              BCC      |L4.40|
00003a  4823              LDR      r0,|L4.200|
00003c  f7fffffe          BL       vListInitialise
000040  4821              LDR      r0,|L4.200|
000042  3014              ADDS     r0,r0,#0x14           ;976
000044  f7fffffe          BL       vListInitialise
000048  481f              LDR      r0,|L4.200|
00004a  3028              ADDS     r0,r0,#0x28           ;976
00004c  f7fffffe          BL       vListInitialise
000050  481d              LDR      r0,|L4.200|
000052  303c              ADDS     r0,r0,#0x3c           ;976
000054  f7fffffe          BL       vListInitialise
000058  481b              LDR      r0,|L4.200|
00005a  3050              ADDS     r0,r0,#0x50           ;976
00005c  f7fffffe          BL       vListInitialise
000060  4819              LDR      r0,|L4.200|
000062  63f0              STR      r0,[r6,#0x3c]         ;976  ; pxDelayedTaskList
000064  3014              ADDS     r0,r0,#0x14           ;976
000066  6430              STR      r0,[r6,#0x40]         ;976  ; pxOverflowDelayedTaskList
000068  e005              B        |L4.118|
                  |L4.106|
;;;994    			{
;;;995    				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
00006a  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
00006c  6ae9              LDR      r1,[r5,#0x2c]
00006e  6ac0              LDR      r0,[r0,#0x2c]
000070  4288              CMP      r0,r1
000072  d800              BHI      |L4.118|
;;;996    				{
;;;997    					pxCurrentTCB = pxNewTCB;
000074  6035              STR      r5,[r6,#0]  ; pxCurrentTCB
                  |L4.118|
;;;998    				}
;;;999    				else
;;;1000   				{
;;;1001   					mtCOVERAGE_TEST_MARKER();
;;;1002   				}
;;;1003   			}
;;;1004   			else
;;;1005   			{
;;;1006   				mtCOVERAGE_TEST_MARKER();
;;;1007   			}
;;;1008   		}
;;;1009   
;;;1010   		uxTaskNumber++;
000076  6a70              LDR      r0,[r6,#0x24]  ; uxTaskNumber
;;;1011   
;;;1012   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1013   		{
;;;1014   			/* Add a counter into the TCB for tracing only. */
;;;1015   			pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;1016   		}
;;;1017   		#endif /* configUSE_TRACE_FACILITY */
;;;1018   		traceTASK_CREATE( pxNewTCB );
;;;1019   
;;;1020   		prvAddTaskToReadyList( pxNewTCB );
000078  2101              MOVS     r1,#1
00007a  1c40              ADDS     r0,r0,#1              ;1010
00007c  6270              STR      r0,[r6,#0x24]         ;1015  ; uxTaskNumber
00007e  64a8              STR      r0,[r5,#0x48]
000080  6ae8              LDR      r0,[r5,#0x2c]
000082  6932              LDR      r2,[r6,#0x10]  ; uxTopReadyPriority
000084  4081              LSLS     r1,r1,r0
000086  4311              ORRS     r1,r1,r2
000088  6131              STR      r1,[r6,#0x10]  ; uxTopReadyPriority
00008a  eb000080          ADD      r0,r0,r0,LSL #2
00008e  eb070080          ADD      r0,r7,r0,LSL #2
000092  1d29              ADDS     r1,r5,#4
000094  f7fffffe          BL       vListInsertEnd
;;;1021   
;;;1022   		portSETUP_TCB( pxNewTCB );
;;;1023   	}
;;;1024   	taskEXIT_CRITICAL();
000098  f7fffffe          BL       vPortExitCritical
;;;1025   
;;;1026   	if( xSchedulerRunning != pdFALSE )
00009c  6970              LDR      r0,[r6,#0x14]  ; xSchedulerRunning
00009e  2800              CMP      r0,#0
0000a0  d00c              BEQ      |L4.188|
;;;1027   	{
;;;1028   		/* If the created task is of a higher priority than the current task
;;;1029   		then it should run now. */
;;;1030   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
0000a2  6830              LDR      r0,[r6,#0]  ; pxCurrentTCB
0000a4  6ae9              LDR      r1,[r5,#0x2c]
0000a6  6ac0              LDR      r0,[r0,#0x2c]
0000a8  4288              CMP      r0,r1
0000aa  d207              BCS      |L4.188|
;;;1031   		{
;;;1032   			taskYIELD_IF_USING_PREEMPTION();
0000ac  4907              LDR      r1,|L4.204|
0000ae  f04f5080          MOV      r0,#0x10000000
0000b2  6008              STR      r0,[r1,#0]
0000b4  f3bf8f4f          DSB      
0000b8  f3bf8f6f          ISB      
                  |L4.188|
;;;1033   		}
;;;1034   		else
;;;1035   		{
;;;1036   			mtCOVERAGE_TEST_MARKER();
;;;1037   		}
;;;1038   	}
;;;1039   	else
;;;1040   	{
;;;1041   		mtCOVERAGE_TEST_MARKER();
;;;1042   	}
;;;1043   }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;1044   /*-----------------------------------------------------------*/
                          ENDP

                  |L4.192|
                          DCD      ||.data||
                  |L4.196|
                          DCD      ||.bss||
                  |L4.200|
                          DCD      ||.bss||+0x280
                  |L4.204|
                          DCD      0xe000ed04

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3364   
;;;3365   static void prvCheckTasksWaitingTermination( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3366   {
;;;3367   
;;;3368   	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
;;;3369   
;;;3370   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3371   	{
;;;3372   		BaseType_t xListIsEmpty;
;;;3373   
;;;3374   		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
;;;3375   		too often in the idle task. */
;;;3376   		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
;;;3377   		{
;;;3378   			vTaskSuspendAll();
;;;3379   			{
;;;3380   				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
000002  4e12              LDR      r6,|L5.76|
;;;3381   			}
;;;3382   			( void ) xTaskResumeAll();
;;;3383   
;;;3384   			if( xListIsEmpty == pdFALSE )
;;;3385   			{
;;;3386   				TCB_t *pxTCB;
;;;3387   
;;;3388   				taskENTER_CRITICAL();
;;;3389   				{
;;;3390   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
;;;3391   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;3392   					--uxCurrentNumberOfTasks;
000004  4d12              LDR      r5,|L5.80|
000006  e01c              B        |L5.66|
                  |L5.8|
000008  f7fffffe          BL       vTaskSuspendAll
00000c  6830              LDR      r0,[r6,#0]            ;3380  ; xTasksWaitingTermination
00000e  b120              CBZ      r0,|L5.26|
000010  2400              MOVS     r4,#0                 ;3380
                  |L5.18|
000012  f7fffffe          BL       xTaskResumeAll
000016  b9a4              CBNZ     r4,|L5.66|
000018  e001              B        |L5.30|
                  |L5.26|
00001a  2401              MOVS     r4,#1                 ;3380
00001c  e7f9              B        |L5.18|
                  |L5.30|
00001e  f7fffffe          BL       vPortEnterCritical
000022  68f0              LDR      r0,[r6,#0xc]          ;3390  ; xTasksWaitingTermination
000024  68c4              LDR      r4,[r0,#0xc]          ;3391
000026  1d20              ADDS     r0,r4,#4              ;3391
000028  f7fffffe          BL       uxListRemove
00002c  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
00002e  1e40              SUBS     r0,r0,#1
000030  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;3393   					--uxDeletedTasksWaitingCleanUp;
000032  6868              LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000034  1e40              SUBS     r0,r0,#1
000036  6068              STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
;;;3394   				}
;;;3395   				taskEXIT_CRITICAL();
000038  f7fffffe          BL       vPortExitCritical
;;;3396   
;;;3397   				prvDeleteTCB( pxTCB );
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       prvDeleteTCB
                  |L5.66|
000042  6868              LDR      r0,[r5,#4]            ;3376  ; uxDeletedTasksWaitingCleanUp
000044  2800              CMP      r0,#0                 ;3376
000046  d1df              BNE      |L5.8|
;;;3398   			}
;;;3399   			else
;;;3400   			{
;;;3401   				mtCOVERAGE_TEST_MARKER();
;;;3402   			}
;;;3403   		}
;;;3404   	}
;;;3405   	#endif /* INCLUDE_vTaskDelete */
;;;3406   }
000048  bd70              POP      {r4-r6,pc}
;;;3407   /*-----------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      ||.bss||+0x2bc
                  |L5.80|
                          DCD      ||.data||

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3580   
;;;3581   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3582   	{
000002  4604              MOV      r4,r0
;;;3583   		/* This call is required specifically for the TriCore port.  It must be
;;;3584   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3585   		want to allocate and clean RAM statically. */
;;;3586   		portCLEAN_UP_TCB( pxTCB );
;;;3587   
;;;3588   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3589   		to the task to free any memory allocated at the application level. */
;;;3590   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3591   		{
;;;3592   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3593   		}
;;;3594   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3595   
;;;3596   		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
;;;3597   		{
;;;3598   			/* The task can only have been allocated dynamically - free both
;;;3599   			the stack and TCB. */
;;;3600   			vPortFree( pxTCB->pxStack );
000004  6b00              LDR      r0,[r0,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3601   			vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      vPortFree
;;;3602   		}
;;;3603   		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
;;;3604   		{
;;;3605   			/* The task could have been allocated statically or dynamically, so
;;;3606   			check what was statically allocated before trying to free the
;;;3607   			memory. */
;;;3608   			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
;;;3609   			{
;;;3610   				/* Both the stack and TCB were allocated dynamically, so both
;;;3611   				must be freed. */
;;;3612   				vPortFree( pxTCB->pxStack );
;;;3613   				vPortFree( pxTCB );
;;;3614   			}
;;;3615   			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
;;;3616   			{
;;;3617   				/* Only the stack was statically allocated, so the TCB is the
;;;3618   				only memory that must be freed. */
;;;3619   				vPortFree( pxTCB );
;;;3620   			}
;;;3621   			else
;;;3622   			{
;;;3623   				/* Neither the stack nor the TCB were allocated dynamically, so
;;;3624   				nothing needs to be freed. */
;;;3625   				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
;;;3626   				mtCOVERAGE_TEST_MARKER();
;;;3627   			}
;;;3628   		}
;;;3629   		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;3630   	}
;;;3631   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3130    */
;;;3131   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  4e07              LDR      r6,|L7.32|
;;;3132   {
;;;3133   	/* Stop warnings. */
;;;3134   	( void ) pvParameters;
;;;3135   
;;;3136   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3137   	SCHEDULER IS STARTED. **/
;;;3138   
;;;3139   	for( ;; )
;;;3140   	{
;;;3141   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3142   		is responsible for freeing the deleted task's TCB and stack. */
;;;3143   		prvCheckTasksWaitingTermination();
;;;3144   
;;;3145   		#if ( configUSE_PREEMPTION == 0 )
;;;3146   		{
;;;3147   			/* If we are not using preemption we keep forcing a task switch to
;;;3148   			see if any other task has become available.  If we are using
;;;3149   			preemption we don't need to do this as any task becoming available
;;;3150   			will automatically get the processor anyway. */
;;;3151   			taskYIELD();
;;;3152   		}
;;;3153   		#endif /* configUSE_PREEMPTION */
;;;3154   
;;;3155   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3156   		{
;;;3157   			/* When using preemption tasks of equal priority will be
;;;3158   			timesliced.  If a task that is sharing the idle priority is ready
;;;3159   			to run then the idle task should yield before the end of the
;;;3160   			timeslice.
;;;3161   
;;;3162   			A critical region is not required here as we are just reading from
;;;3163   			the list, and an occasional incorrect value will not matter.  If
;;;3164   			the ready list at the idle priority contains more than one task
;;;3165   			then a task other than the idle task is ready to execute. */
;;;3166   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
;;;3167   			{
;;;3168   				taskYIELD();
000002  f04f5480          MOV      r4,#0x10000000
000006  4d07              LDR      r5,|L7.36|
                  |L7.8|
000008  f7fffffe          BL       prvCheckTasksWaitingTermination
00000c  6830              LDR      r0,[r6,#0]            ;3166  ; pxReadyTasksLists
00000e  2801              CMP      r0,#1                 ;3166
000010  d9fa              BLS      |L7.8|
000012  602c              STR      r4,[r5,#0]
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  e7f4              B        |L7.8|
;;;3169   			}
;;;3170   			else
;;;3171   			{
;;;3172   				mtCOVERAGE_TEST_MARKER();
;;;3173   			}
;;;3174   		}
;;;3175   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3176   
;;;3177   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3178   		{
;;;3179   			extern void vApplicationIdleHook( void );
;;;3180   
;;;3181   			/* Call the user defined function from within the idle task.  This
;;;3182   			allows the application designer to add background functionality
;;;3183   			without the overhead of a separate task.
;;;3184   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3185   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3186   			vApplicationIdleHook();
;;;3187   		}
;;;3188   		#endif /* configUSE_IDLE_HOOK */
;;;3189   
;;;3190   		/* This conditional compilation should use inequality to 0, not equality
;;;3191   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3192   		user defined low power mode	implementations require
;;;3193   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3194   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3195   		{
;;;3196   		TickType_t xExpectedIdleTime;
;;;3197   
;;;3198   			/* It is not desirable to suspend then resume the scheduler on
;;;3199   			each iteration of the idle task.  Therefore, a preliminary
;;;3200   			test of the expected idle time is performed without the
;;;3201   			scheduler suspended.  The result here is not necessarily
;;;3202   			valid. */
;;;3203   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3204   
;;;3205   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3206   			{
;;;3207   				vTaskSuspendAll();
;;;3208   				{
;;;3209   					/* Now the scheduler is suspended, the expected idle
;;;3210   					time can be sampled again, and this time its value can
;;;3211   					be used. */
;;;3212   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3213   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3214   
;;;3215   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3216   					{
;;;3217   						traceLOW_POWER_IDLE_BEGIN();
;;;3218   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3219   						traceLOW_POWER_IDLE_END();
;;;3220   					}
;;;3221   					else
;;;3222   					{
;;;3223   						mtCOVERAGE_TEST_MARKER();
;;;3224   					}
;;;3225   				}
;;;3226   				( void ) xTaskResumeAll();
;;;3227   			}
;;;3228   			else
;;;3229   			{
;;;3230   				mtCOVERAGE_TEST_MARKER();
;;;3231   			}
;;;3232   		}
;;;3233   		#endif /* configUSE_TICKLESS_IDLE */
;;;3234   	}
;;;3235   }
;;;3236   /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      ||.bss||
                  |L7.36|
                          DCD      0xe000ed04

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  prvInitialiseNewTask PROC
;;;766    
;;;767    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;768    									const char * const pcName,
;;;769    									const uint32_t ulStackDepth,
;;;770    									void * const pvParameters,
;;;771    									UBaseType_t uxPriority,
;;;772    									TaskHandle_t * const pxCreatedTask,
;;;773    									TCB_t *pxNewTCB,
;;;774    									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;775    {
000004  e9dd8409          LDRD     r8,r4,[sp,#0x24]
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4682              MOV      r10,r0
;;;776    StackType_t *pxTopOfStack;
;;;777    UBaseType_t x;
;;;778    
;;;779    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;780    		/* Should the task be created in privileged mode? */
;;;781    		BaseType_t xRunPrivileged;
;;;782    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;783    		{
;;;784    			xRunPrivileged = pdTRUE;
;;;785    		}
;;;786    		else
;;;787    		{
;;;788    			xRunPrivileged = pdFALSE;
;;;789    		}
;;;790    		uxPriority &= ~portPRIVILEGE_BIT;
;;;791    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;792    
;;;793    	/* Avoid dependency on memset() if it is not required. */
;;;794    	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
;;;795    	{
;;;796    		/* Fill the stack with a known value to assist debugging. */
;;;797    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
00000e  0091              LSLS     r1,r2,#2
000010  4699              MOV      r9,r3                 ;775
000012  9d08              LDR      r5,[sp,#0x20]
000014  22a5              MOVS     r2,#0xa5
000016  6b20              LDR      r0,[r4,#0x30]
000018  f7fffffe          BL       __aeabi_memset
;;;798    	}
;;;799    	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
;;;800    
;;;801    	/* Calculate the top of stack address.  This depends on whether the stack
;;;802    	grows from high memory to low (as per the 80x86) or vice versa.
;;;803    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;804    	by the port. */
;;;805    	#if( portSTACK_GROWTH < 0 )
;;;806    	{
;;;807    		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
00001c  f06f0103          MVN      r1,#3
000020  6b20              LDR      r0,[r4,#0x30]
000022  eb010187          ADD      r1,r1,r7,LSL #2
000026  4408              ADD      r0,r0,r1
;;;808    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
000028  f0200707          BIC      r7,r0,#7
;;;809    
;;;810    		/* Check the alignment of the calculated top of stack is correct. */
;;;811    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
00002c  0778              LSLS     r0,r7,#29
00002e  d005              BEQ      |L8.60|
000030  f240322b          MOV      r2,#0x32b
000034  a119              ADR      r1,|L8.156|
000036  a01e              ADR      r0,|L8.176|
000038  f7fffffe          BL       __2printf
                  |L8.60|
;;;812    	}
;;;813    	#else /* portSTACK_GROWTH */
;;;814    	{
;;;815    		pxTopOfStack = pxNewTCB->pxStack;
;;;816    
;;;817    		/* Check the alignment of the stack buffer is correct. */
;;;818    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;819    
;;;820    		/* The other extreme of the stack space is required if stack checking is
;;;821    		performed. */
;;;822    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;823    	}
;;;824    	#endif /* portSTACK_GROWTH */
;;;825    
;;;826    	/* Store the task name in the TCB. */
;;;827    	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
00003c  2000              MOVS     r0,#0
                  |L8.62|
;;;828    	{
;;;829    		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
00003e  1822              ADDS     r2,r4,r0
000040  5c31              LDRB     r1,[r6,r0]
000042  f8821034          STRB     r1,[r2,#0x34]
;;;830    
;;;831    		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;832    		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;833    		string is not accessible (extremely unlikely). */
;;;834    		if( pcName[ x ] == 0x00 )
000046  5c31              LDRB     r1,[r6,r0]
000048  b111              CBZ      r1,|L8.80|
00004a  1c40              ADDS     r0,r0,#1
00004c  2814              CMP      r0,#0x14              ;827
00004e  d3f6              BCC      |L8.62|
                  |L8.80|
;;;835    		{
;;;836    			break;
;;;837    		}
;;;838    		else
;;;839    		{
;;;840    			mtCOVERAGE_TEST_MARKER();
;;;841    		}
;;;842    	}
;;;843    
;;;844    	/* Ensure the name string is terminated in the case that the string length
;;;845    	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;846    	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
000050  2600              MOVS     r6,#0
000052  f8846047          STRB     r6,[r4,#0x47]
;;;847    
;;;848    	/* This is used as an array index so must ensure it's not too large.  First
;;;849    	remove the privilege bit if one is present. */
;;;850    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000056  2d20              CMP      r5,#0x20
000058  d300              BCC      |L8.92|
;;;851    	{
;;;852    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00005a  251f              MOVS     r5,#0x1f
                  |L8.92|
;;;853    	}
;;;854    	else
;;;855    	{
;;;856    		mtCOVERAGE_TEST_MARKER();
;;;857    	}
;;;858    
;;;859    	pxNewTCB->uxPriority = uxPriority;
;;;860    	#if ( configUSE_MUTEXES == 1 )
;;;861    	{
;;;862    		pxNewTCB->uxBasePriority = uxPriority;
;;;863    		pxNewTCB->uxMutexesHeld = 0;
;;;864    	}
;;;865    	#endif /* configUSE_MUTEXES */
;;;866    
;;;867    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
00005c  62e5              STR      r5,[r4,#0x2c]
00005e  e9c45614          STRD     r5,r6,[r4,#0x50]
000062  1d20              ADDS     r0,r4,#4
000064  f7fffffe          BL       vListInitialiseItem
;;;868    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
000068  f1040018          ADD      r0,r4,#0x18
00006c  f7fffffe          BL       vListInitialiseItem
;;;869    
;;;870    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;871    	back to	the containing TCB from a generic item in a list. */
;;;872    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
000070  6124              STR      r4,[r4,#0x10]
;;;873    
;;;874    	/* Event lists are always in priority order. */
;;;875    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000072  f1c50020          RSB      r0,r5,#0x20
;;;876    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
000076  6264              STR      r4,[r4,#0x24]
000078  61a0              STR      r0,[r4,#0x18]
;;;877    
;;;878    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;879    	{
;;;880    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;881    	}
;;;882    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;883    
;;;884    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;885    	{
;;;886    		pxNewTCB->pxTaskTag = NULL;
;;;887    	}
;;;888    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;889    
;;;890    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;891    	{
;;;892    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;893    	}
;;;894    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;895    
;;;896    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;897    	{
;;;898    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;899    	}
;;;900    	#else
;;;901    	{
;;;902    		/* Avoid compiler warning about unreferenced parameter. */
;;;903    		( void ) xRegions;
;;;904    	}
;;;905    	#endif
;;;906    
;;;907    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;908    	{
;;;909    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;910    		{
;;;911    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;912    		}
;;;913    	}
;;;914    	#endif
;;;915    
;;;916    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;917    	{
;;;918    		pxNewTCB->ulNotifiedValue = 0;
00007a  65a6              STR      r6,[r4,#0x58]
00007c  65e6              STR      r6,[r4,#0x5c]
;;;919    		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00007e  f8846060          STRB     r6,[r4,#0x60]
;;;920    	}
;;;921    	#endif
;;;922    
;;;923    	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;924    	{
;;;925    		/* Initialise this task's Newlib reent structure. */
;;;926    		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;927    	}
;;;928    	#endif
;;;929    
;;;930    	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;931    	{
;;;932    		pxNewTCB->ucDelayAborted = pdFALSE;
;;;933    	}
;;;934    	#endif
;;;935    
;;;936    	/* Initialize the TCB stack to look as if the task was already running,
;;;937    	but had been interrupted by the scheduler.  The return address is set
;;;938    	to the start of the task function. Once the stack has been initialised
;;;939    	the	top of stack variable is updated. */
;;;940    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;941    	{
;;;942    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;943    	}
;;;944    	#else /* portUSING_MPU_WRAPPERS */
;;;945    	{
;;;946    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
000082  464a              MOV      r2,r9
000084  4651              MOV      r1,r10
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       pxPortInitialiseStack
;;;947    	}
;;;948    	#endif /* portUSING_MPU_WRAPPERS */
;;;949    
;;;950    	if( ( void * ) pxCreatedTask != NULL )
00008c  6020              STR      r0,[r4,#0]
00008e  f1b80f00          CMP      r8,#0
000092  d001              BEQ      |L8.152|
;;;951    	{
;;;952    		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;953    		change the created task's priority, delete the created task, etc.*/
;;;954    		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
000094  f8c84000          STR      r4,[r8,#0]
                  |L8.152|
;;;955    	}
;;;956    	else
;;;957    	{
;;;958    		mtCOVERAGE_TEST_MARKER();
;;;959    	}
;;;960    }
000098  e8bd87f0          POP      {r4-r10,pc}
;;;961    /*-----------------------------------------------------------*/
                          ENDP

                  |L8.156|
00009c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000a0  72656552
0000a4  544f535c
0000a8  7461736b
0000ac  732e6300
                  |L8.176|
0000b0  4572726f          DCB      "Error:%s,%d\r\n",0
0000b4  723a2573
0000b8  2c25640d
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.prvListTasksWithinSingleList||, CODE, READONLY, ALIGN=1

                  prvListTasksWithinSingleList PROC
;;;3499   
;;;3500   	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3501   	{
000004  4681              MOV      r9,r0
000006  6808              LDR      r0,[r1,#0]
000008  4692              MOV      r10,r2
00000a  460c              MOV      r4,r1
;;;3502   	volatile TCB_t *pxNextTCB, *pxFirstTCB;
;;;3503   	UBaseType_t uxTask = 0;
00000c  2500              MOVS     r5,#0
00000e  b1f8              CBZ      r0,|L9.80|
;;;3504   
;;;3505   		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
;;;3506   		{
;;;3507   			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
000010  6848              LDR      r0,[r1,#4]
000012  f1010608          ADD      r6,r1,#8
000016  6840              LDR      r0,[r0,#4]
000018  6048              STR      r0,[r1,#4]
00001a  42b0              CMP      r0,r6
00001c  d101              BNE      |L9.34|
00001e  6840              LDR      r0,[r0,#4]
000020  6048              STR      r0,[r1,#4]
                  |L9.34|
000022  f8d0800c          LDR      r8,[r0,#0xc]
                  |L9.38|
;;;3508   
;;;3509   			/* Populate an TaskStatus_t structure within the
;;;3510   			pxTaskStatusArray array for each task that is referenced from
;;;3511   			pxList.  See the definition of TaskStatus_t in task.h for the
;;;3512   			meaning of each TaskStatus_t structure member. */
;;;3513   			do
;;;3514   			{
;;;3515   				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
000026  6860              LDR      r0,[r4,#4]
000028  6842              LDR      r2,[r0,#4]
00002a  6062              STR      r2,[r4,#4]
00002c  42b2              CMP      r2,r6
00002e  d101              BNE      |L9.52|
000030  6851              LDR      r1,[r2,#4]
000032  6061              STR      r1,[r4,#4]
                  |L9.52|
000034  6860              LDR      r0,[r4,#4]
;;;3516   				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
000036  eb0501c5          ADD      r1,r5,r5,LSL #3
00003a  eb090181          ADD      r1,r9,r1,LSL #2
00003e  68c7              LDR      r7,[r0,#0xc]
000040  4653              MOV      r3,r10
000042  2201              MOVS     r2,#1
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       vTaskGetInfo
00004a  1c6d              ADDS     r5,r5,#1
;;;3517   				uxTask++;
;;;3518   			} while( pxNextTCB != pxFirstTCB );
00004c  4547              CMP      r7,r8
00004e  d1ea              BNE      |L9.38|
                  |L9.80|
;;;3519   		}
;;;3520   		else
;;;3521   		{
;;;3522   			mtCOVERAGE_TEST_MARKER();
;;;3523   		}
;;;3524   
;;;3525   		return uxTask;
000050  4628              MOV      r0,r5
;;;3526   	}
000052  e8bd87f0          POP      {r4-r10,pc}
;;;3527   
                          ENDP


                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3634   
;;;3635   static void prvResetNextTaskUnblockTime( void )
000000  4806              LDR      r0,|L10.28|
;;;3636   {
;;;3637   TCB_t *pxTCB;
;;;3638   
;;;3639   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6bc1              LDR      r1,[r0,#0x3c]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b129              CBZ      r1,|L10.20|
;;;3640   	{
;;;3641   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3642   		the maximum possible value so it is	extremely unlikely that the
;;;3643   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3644   		there is an item in the delayed list. */
;;;3645   		xNextTaskUnblockTime = portMAX_DELAY;
;;;3646   	}
;;;3647   	else
;;;3648   	{
;;;3649   		/* The new current delayed list is not empty, get the value of
;;;3650   		the item at the head of the delayed list.  This is the time at
;;;3651   		which the task at the head of the delayed list should be removed
;;;3652   		from the Blocked state. */
;;;3653   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
000008  6bc1              LDR      r1,[r0,#0x3c]  ; pxDelayedTaskList
00000a  68c9              LDR      r1,[r1,#0xc]
00000c  68c9              LDR      r1,[r1,#0xc]
;;;3654   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
00000e  6849              LDR      r1,[r1,#4]
                  |L10.16|
000010  6281              STR      r1,[r0,#0x28]         ;3645  ; xNextTaskUnblockTime
;;;3655   	}
;;;3656   }
000012  4770              BX       lr
                  |L10.20|
000014  f04f31ff          MOV      r1,#0xffffffff        ;3645
000018  e7fa              B        |L10.16|
;;;3657   /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      ||.data||

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  prvTaskIsTaskSuspended PROC
;;;1655   
;;;1656   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1657   	{
;;;1658   	BaseType_t xReturn = pdFALSE;
000002  2500              MOVS     r5,#0
;;;1659   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
000004  0004              MOVS     r4,r0
000006  d105              BNE      |L11.20|
;;;1660   
;;;1661   		/* Accesses xPendingReadyList so must be called from a critical
;;;1662   		section. */
;;;1663   
;;;1664   		/* It does not make sense to check if the calling task is suspended. */
;;;1665   		configASSERT( xTask );
000008  f2406281          MOV      r2,#0x681
00000c  a107              ADR      r1,|L11.44|
00000e  a00c              ADR      r0,|L11.64|
000010  f7fffffe          BL       __2printf
                  |L11.20|
;;;1666   
;;;1667   		/* Is the task being resumed actually in the suspended list? */
;;;1668   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000014  490e              LDR      r1,|L11.80|
000016  6960              LDR      r0,[r4,#0x14]
000018  4288              CMP      r0,r1
00001a  d105              BNE      |L11.40|
;;;1669   		{
;;;1670   			/* Has the task already been resumed from within an ISR? */
;;;1671   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
00001c  6aa0              LDR      r0,[r4,#0x28]
00001e  3928              SUBS     r1,r1,#0x28
000020  4288              CMP      r0,r1
000022  d001              BEQ      |L11.40|
;;;1672   			{
;;;1673   				/* Is it in the suspended list because it is in the	Suspended
;;;1674   				state, or because is is blocked with no timeout? */
;;;1675   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
000024  b900              CBNZ     r0,|L11.40|
;;;1676   				{
;;;1677   					xReturn = pdTRUE;
000026  2501              MOVS     r5,#1
                  |L11.40|
;;;1678   				}
;;;1679   				else
;;;1680   				{
;;;1681   					mtCOVERAGE_TEST_MARKER();
;;;1682   				}
;;;1683   			}
;;;1684   			else
;;;1685   			{
;;;1686   				mtCOVERAGE_TEST_MARKER();
;;;1687   			}
;;;1688   		}
;;;1689   		else
;;;1690   		{
;;;1691   			mtCOVERAGE_TEST_MARKER();
;;;1692   		}
;;;1693   
;;;1694   		return xReturn;
000028  4628              MOV      r0,r5
;;;1695   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00002a  bd70              POP      {r4-r6,pc}
;;;1696   
                          ENDP

                  |L11.44|
00002c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000030  72656552
000034  544f535c
000038  7461736b
00003c  732e6300
                  |L11.64|
000040  4572726f          DCB      "Error:%s,%d\r\n",0
000044  723a2573
000048  2c25640d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L11.80|
                          DCD      ||.bss||+0x2d0

                          AREA ||i.prvWriteNameToBuffer||, CODE, READONLY, ALIGN=1

                  prvWriteNameToBuffer PROC
;;;3915   
;;;3916   	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
000000  b510              PUSH     {r4,lr}
;;;3917   	{
000002  4604              MOV      r4,r0
;;;3918   	size_t x;
;;;3919   
;;;3920   		/* Start by copying the entire string. */
;;;3921   		strcpy( pcBuffer, pcTaskName );
000004  f7fffffe          BL       strcpy
;;;3922   
;;;3923   		/* Pad the end of the string with spaces to ensure columns line up when
;;;3924   		printed out. */
;;;3925   		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       strlen
;;;3926   		{
;;;3927   			pcBuffer[ x ] = ' ';
00000e  2120              MOVS     r1,#0x20
000010  e001              B        |L12.22|
                  |L12.18|
000012  5421              STRB     r1,[r4,r0]
000014  1c40              ADDS     r0,r0,#1
                  |L12.22|
000016  2813              CMP      r0,#0x13              ;3925
000018  d3fb              BCC      |L12.18|
;;;3928   		}
;;;3929   
;;;3930   		/* Terminate. */
;;;3931   		pcBuffer[ x ] = 0x00;
00001a  2100              MOVS     r1,#0
00001c  5421              STRB     r1,[r4,r0]
;;;3932   
;;;3933   		/* Return the new end of string. */
;;;3934   		return &( pcBuffer[ x ] );
00001e  4420              ADD      r0,r0,r4
;;;3935   	}
000020  bd10              POP      {r4,pc}
;;;3936   
                          ENDP


                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4177   
;;;4178   	void *pvTaskIncrementMutexHeldCount( void )
000000  4904              LDR      r1,|L13.20|
;;;4179   	{
;;;4180   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4181   		then pxCurrentTCB will be NULL. */
;;;4182   		if( pxCurrentTCB != NULL )
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000004  b118              CBZ      r0,|L13.14|
;;;4183   		{
;;;4184   			( pxCurrentTCB->uxMutexesHeld )++;
000006  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
000008  6d42              LDR      r2,[r0,#0x54]
00000a  1c52              ADDS     r2,r2,#1
00000c  6542              STR      r2,[r0,#0x54]
                  |L13.14|
;;;4185   		}
;;;4186   
;;;4187   		return pxCurrentTCB;
00000e  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;4188   	}
000010  4770              BX       lr
;;;4189   
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      ||.data||

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4194   
;;;4195   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;4196   	{
000002  460c              MOV      r4,r1
000004  4606              MOV      r6,r0
;;;4197   	uint32_t ulReturn;
;;;4198   
;;;4199   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4200   		{
;;;4201   			/* Only block if the notification count is not already non-zero. */
;;;4202   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000a  4d15              LDR      r5,|L14.96|
00000c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000e  6dc0              LDR      r0,[r0,#0x5c]
000010  b980              CBNZ     r0,|L14.52|
;;;4203   			{
;;;4204   				/* Mark this task as waiting for a notification. */
;;;4205   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000012  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000014  2001              MOVS     r0,#1
000016  f8810060          STRB     r0,[r1,#0x60]
;;;4206   
;;;4207   				if( xTicksToWait > ( TickType_t ) 0 )
00001a  b15c              CBZ      r4,|L14.52|
;;;4208   				{
;;;4209   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4210   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4211   
;;;4212   					/* All ports are written to allow a yield in a critical
;;;4213   					section (some will yield immediately, others wait until the
;;;4214   					critical section exits) - but it is not something that
;;;4215   					application code should ever do. */
;;;4216   					portYIELD_WITHIN_API();
000024  490f              LDR      r1,|L14.100|
000026  f04f5080          MOV      r0,#0x10000000
00002a  6008              STR      r0,[r1,#0]
00002c  f3bf8f4f          DSB      
000030  f3bf8f6f          ISB      
                  |L14.52|
;;;4217   				}
;;;4218   				else
;;;4219   				{
;;;4220   					mtCOVERAGE_TEST_MARKER();
;;;4221   				}
;;;4222   			}
;;;4223   			else
;;;4224   			{
;;;4225   				mtCOVERAGE_TEST_MARKER();
;;;4226   			}
;;;4227   		}
;;;4228   		taskEXIT_CRITICAL();
000034  f7fffffe          BL       vPortExitCritical
;;;4229   
;;;4230   		taskENTER_CRITICAL();
000038  f7fffffe          BL       vPortEnterCritical
;;;4231   		{
;;;4232   			traceTASK_NOTIFY_TAKE();
;;;4233   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00003c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00003e  6dc4              LDR      r4,[r0,#0x5c]
000040  2000              MOVS     r0,#0
;;;4234   
;;;4235   			if( ulReturn != 0UL )
000042  b134              CBZ      r4,|L14.82|
;;;4236   			{
;;;4237   				if( xClearCountOnExit != pdFALSE )
000044  b116              CBZ      r6,|L14.76|
;;;4238   				{
;;;4239   					pxCurrentTCB->ulNotifiedValue = 0UL;
000046  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000048  65c8              STR      r0,[r1,#0x5c]
00004a  e002              B        |L14.82|
                  |L14.76|
;;;4240   				}
;;;4241   				else
;;;4242   				{
;;;4243   					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
00004c  682a              LDR      r2,[r5,#0]  ; pxCurrentTCB
00004e  1e61              SUBS     r1,r4,#1
000050  65d1              STR      r1,[r2,#0x5c]
                  |L14.82|
;;;4244   				}
;;;4245   			}
;;;4246   			else
;;;4247   			{
;;;4248   				mtCOVERAGE_TEST_MARKER();
;;;4249   			}
;;;4250   
;;;4251   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000052  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000054  f8810060          STRB     r0,[r1,#0x60]
;;;4252   		}
;;;4253   		taskEXIT_CRITICAL();
000058  f7fffffe          BL       vPortExitCritical
;;;4254   
;;;4255   		return ulReturn;
00005c  4620              MOV      r0,r4
;;;4256   	}
00005e  bd70              POP      {r4-r6,pc}
;;;4257   
                          ENDP

                  |L14.96|
                          DCD      ||.data||
                  |L14.100|
                          DCD      0xe000ed04

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2172   
;;;2173   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L15.8|
;;;2174   {
;;;2175   	/* A critical section is not required because the variables are of type
;;;2176   	BaseType_t. */
;;;2177   	return uxCurrentNumberOfTasks;
000002  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
;;;2178   }
000004  4770              BX       lr
;;;2179   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      ||.data||

                          AREA ||i.uxTaskGetSystemState||, CODE, READONLY, ALIGN=2

                  uxTaskGetSystemState PROC
;;;2320   
;;;2321   	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2322   	{
000004  4617              MOV      r7,r2
000006  460a              MOV      r2,r1
000008  4606              MOV      r6,r0
;;;2323   	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
00000a  2400              MOVS     r4,#0
00000c  2520              MOVS     r5,#0x20
;;;2324   
;;;2325   		vTaskSuspendAll();
00000e  f7fffffe          BL       vTaskSuspendAll
;;;2326   		{
;;;2327   			/* Is there a space in the array for each task in the system? */
;;;2328   			if( uxArraySize >= uxCurrentNumberOfTasks )
000012  f8df8090          LDR      r8,|L16.164|
000016  f8d80008          LDR      r0,[r8,#8]  ; uxCurrentNumberOfTasks
00001a  4282              CMP      r2,r0
00001c  d33c              BCC      |L16.152|
;;;2329   			{
;;;2330   				/* Fill in an TaskStatus_t structure with information on each
;;;2331   				task in the Ready state. */
;;;2332   				do
;;;2333   				{
;;;2334   					uxQueue--;
;;;2335   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
00001e  f8df9088          LDR      r9,|L16.168|
                  |L16.34|
000022  1e6d              SUBS     r5,r5,#1
000024  eb050185          ADD      r1,r5,r5,LSL #2
000028  eb0400c4          ADD      r0,r4,r4,LSL #3
00002c  eb090181          ADD      r1,r9,r1,LSL #2
000030  eb060080          ADD      r0,r6,r0,LSL #2
000034  2201              MOVS     r2,#1
000036  f7fffffe          BL       prvListTasksWithinSingleList
00003a  4404              ADD      r4,r4,r0
;;;2336   
;;;2337   				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00003c  2d00              CMP      r5,#0
00003e  d1f0              BNE      |L16.34|
;;;2338   
;;;2339   				/* Fill in an TaskStatus_t structure with information on each
;;;2340   				task in the Blocked state. */
;;;2341   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
000040  eb0400c4          ADD      r0,r4,r4,LSL #3
000044  eb060080          ADD      r0,r6,r0,LSL #2
000048  2202              MOVS     r2,#2
00004a  4645              MOV      r5,r8
00004c  f8d8103c          LDR      r1,[r8,#0x3c]  ; pxDelayedTaskList
000050  f7fffffe          BL       prvListTasksWithinSingleList
000054  4404              ADD      r4,r4,r0
;;;2342   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
000056  eb0400c4          ADD      r0,r4,r4,LSL #3
00005a  eb060080          ADD      r0,r6,r0,LSL #2
00005e  2202              MOVS     r2,#2
000060  6c29              LDR      r1,[r5,#0x40]  ; pxOverflowDelayedTaskList
000062  f7fffffe          BL       prvListTasksWithinSingleList
000066  4404              ADD      r4,r4,r0
;;;2343   
;;;2344   				#if( INCLUDE_vTaskDelete == 1 )
;;;2345   				{
;;;2346   					/* Fill in an TaskStatus_t structure with information on
;;;2347   					each task that has been deleted but not yet cleaned up. */
;;;2348   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
000068  eb0400c4          ADD      r0,r4,r4,LSL #3
00006c  eb060080          ADD      r0,r6,r0,LSL #2
000070  2204              MOVS     r2,#4
000072  490e              LDR      r1,|L16.172|
000074  f7fffffe          BL       prvListTasksWithinSingleList
000078  4404              ADD      r4,r4,r0
;;;2349   				}
;;;2350   				#endif
;;;2351   
;;;2352   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;2353   				{
;;;2354   					/* Fill in an TaskStatus_t structure with information on
;;;2355   					each task in the Suspended state. */
;;;2356   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
00007a  490c              LDR      r1,|L16.172|
00007c  eb0400c4          ADD      r0,r4,r4,LSL #3
000080  eb060080          ADD      r0,r6,r0,LSL #2
000084  2203              MOVS     r2,#3
000086  3114              ADDS     r1,r1,#0x14
000088  f7fffffe          BL       prvListTasksWithinSingleList
00008c  4404              ADD      r4,r4,r0
;;;2357   				}
;;;2358   				#endif
;;;2359   
;;;2360   				#if ( configGENERATE_RUN_TIME_STATS == 1)
;;;2361   				{
;;;2362   					if( pulTotalRunTime != NULL )
00008e  b11f              CBZ      r7,|L16.152|
;;;2363   					{
;;;2364   						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2365   							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
;;;2366   						#else
;;;2367   							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
000090  4807              LDR      r0,|L16.176|
000092  6801              LDR      r1,[r0,#0]  ; FreeRTOSRunTimeTicks
000094  6840              LDR      r0,[r0,#4]  ; FreeRTOSRunTimeTicks
000096  6039              STR      r1,[r7,#0]
                  |L16.152|
;;;2368   						#endif
;;;2369   					}
;;;2370   				}
;;;2371   				#else
;;;2372   				{
;;;2373   					if( pulTotalRunTime != NULL )
;;;2374   					{
;;;2375   						*pulTotalRunTime = 0;
;;;2376   					}
;;;2377   				}
;;;2378   				#endif
;;;2379   			}
;;;2380   			else
;;;2381   			{
;;;2382   				mtCOVERAGE_TEST_MARKER();
;;;2383   			}
;;;2384   		}
;;;2385   		( void ) xTaskResumeAll();
000098  f7fffffe          BL       xTaskResumeAll
;;;2386   
;;;2387   		return uxTask;
00009c  4620              MOV      r0,r4
;;;2388   	}
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;2389   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L16.164|
                          DCD      ||.data||
                  |L16.168|
                          DCD      ||.bss||
                  |L16.172|
                          DCD      ||.bss||+0x2bc
                  |L16.176|
                          DCD      FreeRTOSRunTimeTicks

                          AREA ||i.uxTaskGetTaskNumber||, CODE, READONLY, ALIGN=1

                  uxTaskGetTaskNumber PROC
;;;3083   
;;;3084   	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
000000  2800              CMP      r0,#0
;;;3085   	{
000002  d000              BEQ      |L17.6|
;;;3086   	UBaseType_t uxReturn;
;;;3087   	TCB_t *pxTCB;
;;;3088   
;;;3089   		if( xTask != NULL )
;;;3090   		{
;;;3091   			pxTCB = ( TCB_t * ) xTask;
;;;3092   			uxReturn = pxTCB->uxTaskNumber;
000004  6cc0              LDR      r0,[r0,#0x4c]
                  |L17.6|
;;;3093   		}
;;;3094   		else
;;;3095   		{
;;;3096   			uxReturn = 0U;
;;;3097   		}
;;;3098   
;;;3099   		return uxReturn;
;;;3100   	}
000006  4770              BX       lr
;;;3101   
                          ENDP


                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1339   
;;;1340   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1341   	{
000002  4604              MOV      r4,r0
;;;1342   	TCB_t *pxTCB;
;;;1343   	UBaseType_t uxReturn;
;;;1344   
;;;1345   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1346   		{
;;;1347   			/* If null is passed in here then it is the priority of the that
;;;1348   			called uxTaskPriorityGet() that is being queried. */
;;;1349   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b90c              CBNZ     r4,|L18.14|
00000a  4803              LDR      r0,|L18.24|
00000c  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L18.14|
;;;1350   			uxReturn = pxTCB->uxPriority;
00000e  6ae4              LDR      r4,[r4,#0x2c]
;;;1351   		}
;;;1352   		taskEXIT_CRITICAL();
000010  f7fffffe          BL       vPortExitCritical
;;;1353   
;;;1354   		return uxReturn;
000014  4620              MOV      r0,r4
;;;1355   	}
000016  bd10              POP      {r4,pc}
;;;1356   
                          ENDP

                  |L18.24|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1361   
;;;1362   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1363   	{
000002  4604              MOV      r4,r0
;;;1364   	TCB_t *pxTCB;
;;;1365   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1366   
;;;1367   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1368   		maximum	system call (or maximum API call) interrupt priority.
;;;1369   		Interrupts that are	above the maximum system call priority are keep
;;;1370   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1371   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1372   		is defined in FreeRTOSConfig.h then
;;;1373   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1374   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1375   		been assigned a priority above the configured maximum system call
;;;1376   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1377   		from interrupts	that have been assigned a priority at or (logically)
;;;1378   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1379   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1380   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1381   		provided on the following link:
;;;1382   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1383   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000004  f7fffffe          BL       vPortValidateInterruptPriority
000008  2050              MOVS     r0,#0x50
00000a  f3ef8111          MRS      r1,BASEPRI
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
;;;1384   
;;;1385   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1386   		{
;;;1387   			/* If null is passed in here then it is the priority of the calling
;;;1388   			task that is being queried. */
;;;1389   			pxTCB = prvGetTCBFromHandle( xTask );
00001a  b90c              CBNZ     r4,|L19.32|
00001c  4802              LDR      r0,|L19.40|
00001e  6804              LDR      r4,[r0,#0]  ; pxCurrentTCB
                  |L19.32|
000020  6ae0              LDR      r0,[r4,#0x2c]
000022  f3818811          MSR      BASEPRI,r1
;;;1390   			uxReturn = pxTCB->uxPriority;
;;;1391   		}
;;;1392   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
;;;1393   
;;;1394   		return uxReturn;
;;;1395   	}
000026  bd10              POP      {r4,pc}
;;;1396   
                          ENDP

                  |L19.40|
                          DCD      ||.data||

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4161   
;;;4162   TickType_t uxTaskResetEventItemValue( void )
000000  4904              LDR      r1,|L20.20|
;;;4163   {
;;;4164   TickType_t uxReturn;
;;;4165   
;;;4166   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;4167   
;;;4168   	/* Reset the event list item to its normal value - so it can be used with
;;;4169   	queues and semaphores. */
;;;4170   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000004  680a              LDR      r2,[r1,#0]  ; pxCurrentTCB
000006  6980              LDR      r0,[r0,#0x18]         ;4166
000008  6ad2              LDR      r2,[r2,#0x2c]
00000a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000c  f1c20220          RSB      r2,r2,#0x20
000010  618a              STR      r2,[r1,#0x18]
;;;4171   
;;;4172   	return uxReturn;
;;;4173   }
000012  4770              BX       lr
;;;4174   /*-----------------------------------------------------------*/
                          ENDP

                  |L20.20|
                          DCD      ||.data||

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskDelay PROC
;;;1223   
;;;1224   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b510              PUSH     {r4,lr}
;;;1225   	{
000002  0004              MOVS     r4,r0
000004  d012              BEQ      |L21.44|
;;;1226   	BaseType_t xAlreadyYielded = pdFALSE;
;;;1227   
;;;1228   		/* A delay time of zero just forces a reschedule. */
;;;1229   		if( xTicksToDelay > ( TickType_t ) 0U )
;;;1230   		{
;;;1231   			configASSERT( uxSchedulerSuspended == 0 );
000006  490e              LDR      r1,|L21.64|
000008  6b09              LDR      r1,[r1,#0x30]  ; uxSchedulerSuspended
00000a  b129              CBZ      r1,|L21.24|
00000c  f24042cf          MOV      r2,#0x4cf
000010  a10c              ADR      r1,|L21.68|
000012  a011              ADR      r0,|L21.88|
000014  f7fffffe          BL       __2printf
                  |L21.24|
;;;1232   			vTaskSuspendAll();
000018  f7fffffe          BL       vTaskSuspendAll
;;;1233   			{
;;;1234   				traceTASK_DELAY();
;;;1235   
;;;1236   				/* A task that is removed from the event list while the
;;;1237   				scheduler is suspended will not get placed in the ready
;;;1238   				list or removed from the blocked list until the scheduler
;;;1239   				is resumed.
;;;1240   
;;;1241   				This task cannot be in an event list as it is the currently
;;;1242   				executing task. */
;;;1243   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
00001c  2100              MOVS     r1,#0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;1244   			}
;;;1245   			xAlreadyYielded = xTaskResumeAll();
000024  f7fffffe          BL       xTaskResumeAll
000028  2800              CMP      r0,#0
00002a  d107              BNE      |L21.60|
                  |L21.44|
;;;1246   		}
;;;1247   		else
;;;1248   		{
;;;1249   			mtCOVERAGE_TEST_MARKER();
;;;1250   		}
;;;1251   
;;;1252   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1253   		have put ourselves to sleep. */
;;;1254   		if( xAlreadyYielded == pdFALSE )
;;;1255   		{
;;;1256   			portYIELD_WITHIN_API();
00002c  490e              LDR      r1,|L21.104|
00002e  f04f5080          MOV      r0,#0x10000000
000032  6008              STR      r0,[r1,#0]
000034  f3bf8f4f          DSB      
000038  f3bf8f6f          ISB      
                  |L21.60|
;;;1257   		}
;;;1258   		else
;;;1259   		{
;;;1260   			mtCOVERAGE_TEST_MARKER();
;;;1261   		}
;;;1262   	}
00003c  bd10              POP      {r4,pc}
;;;1263   
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      ||.data||
                  |L21.68|
000044  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000048  72656552
00004c  544f535c
000050  7461736b
000054  732e6300
                  |L21.88|
000058  4572726f          DCB      "Error:%s,%d\r\n",0
00005c  723a2573
000060  2c25640d
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0
                  |L21.104|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  vTaskDelayUntil PROC
;;;1139   
;;;1140   	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1141   	{
000004  460e              MOV      r6,r1
000006  0005              MOVS     r5,r0
;;;1142   	TickType_t xTimeToWake;
;;;1143   	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0400          MOV      r4,#0
00000c  d105              BNE      |L22.26|
;;;1144   
;;;1145   		configASSERT( pxPreviousWakeTime );
00000e  f2404279          MOV      r2,#0x479
000012  a11b              ADR      r1,|L22.128|
000014  a01f              ADR      r0,|L22.148|
000016  f7fffffe          BL       __2printf
                  |L22.26|
;;;1146   		configASSERT( ( xTimeIncrement > 0U ) );
00001a  b92e              CBNZ     r6,|L22.40|
00001c  f240427a          MOV      r2,#0x47a
000020  a117              ADR      r1,|L22.128|
000022  a01c              ADR      r0,|L22.148|
000024  f7fffffe          BL       __2printf
                  |L22.40|
;;;1147   		configASSERT( uxSchedulerSuspended == 0 );
000028  4f1e              LDR      r7,|L22.164|
00002a  6b38              LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
00002c  b128              CBZ      r0,|L22.58|
00002e  f240427b          MOV      r2,#0x47b
000032  a113              ADR      r1,|L22.128|
000034  a017              ADR      r0,|L22.148|
000036  f7fffffe          BL       __2printf
                  |L22.58|
;;;1148   
;;;1149   		vTaskSuspendAll();
00003a  f7fffffe          BL       vTaskSuspendAll
;;;1150   		{
;;;1151   			/* Minor optimisation.  The tick count cannot change in this
;;;1152   			block. */
;;;1153   			const TickType_t xConstTickCount = xTickCount;
00003e  68fa              LDR      r2,[r7,#0xc]  ; xTickCount
;;;1154   
;;;1155   			/* Generate the tick time at which the task wants to wake. */
;;;1156   			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000040  6828              LDR      r0,[r5,#0]
000042  1981              ADDS     r1,r0,r6
;;;1157   
;;;1158   			if( xConstTickCount < *pxPreviousWakeTime )
000044  4290              CMP      r0,r2
000046  d902              BLS      |L22.78|
;;;1159   			{
;;;1160   				/* The tick count has overflowed since this function was
;;;1161   				lasted called.  In this case the only time we should ever
;;;1162   				actually delay is if the wake time has also	overflowed,
;;;1163   				and the wake time is greater than the tick time.  When this
;;;1164   				is the case it is as if neither time had overflowed. */
;;;1165   				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
000048  4288              CMP      r0,r1
00004a  d802              BHI      |L22.82|
00004c  e004              B        |L22.88|
                  |L22.78|
;;;1166   				{
;;;1167   					xShouldDelay = pdTRUE;
;;;1168   				}
;;;1169   				else
;;;1170   				{
;;;1171   					mtCOVERAGE_TEST_MARKER();
;;;1172   				}
;;;1173   			}
;;;1174   			else
;;;1175   			{
;;;1176   				/* The tick time has not overflowed.  In this case we will
;;;1177   				delay if either the wake time has overflowed, and/or the
;;;1178   				tick time is less than the wake time. */
;;;1179   				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
00004e  4288              CMP      r0,r1
000050  d801              BHI      |L22.86|
                  |L22.82|
000052  4291              CMP      r1,r2
000054  d900              BLS      |L22.88|
                  |L22.86|
;;;1180   				{
;;;1181   					xShouldDelay = pdTRUE;
000056  2401              MOVS     r4,#1
                  |L22.88|
;;;1182   				}
;;;1183   				else
;;;1184   				{
;;;1185   					mtCOVERAGE_TEST_MARKER();
;;;1186   				}
;;;1187   			}
;;;1188   
;;;1189   			/* Update the wake time ready for the next call. */
;;;1190   			*pxPreviousWakeTime = xTimeToWake;
;;;1191   
;;;1192   			if( xShouldDelay != pdFALSE )
000058  6029              STR      r1,[r5,#0]
00005a  b11c              CBZ      r4,|L22.100|
;;;1193   			{
;;;1194   				traceTASK_DELAY_UNTIL( xTimeToWake );
;;;1195   
;;;1196   				/* prvAddCurrentTaskToDelayedList() needs the block time, not
;;;1197   				the time to wake, so subtract the current tick count. */
;;;1198   				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
00005c  1a88              SUBS     r0,r1,r2
00005e  2100              MOVS     r1,#0
000060  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L22.100|
;;;1199   			}
;;;1200   			else
;;;1201   			{
;;;1202   				mtCOVERAGE_TEST_MARKER();
;;;1203   			}
;;;1204   		}
;;;1205   		xAlreadyYielded = xTaskResumeAll();
000064  f7fffffe          BL       xTaskResumeAll
;;;1206   
;;;1207   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1208   		have put ourselves to sleep. */
;;;1209   		if( xAlreadyYielded == pdFALSE )
000068  2800              CMP      r0,#0
00006a  d107              BNE      |L22.124|
;;;1210   		{
;;;1211   			portYIELD_WITHIN_API();
00006c  490e              LDR      r1,|L22.168|
00006e  f04f5080          MOV      r0,#0x10000000
000072  6008              STR      r0,[r1,#0]
000074  f3bf8f4f          DSB      
000078  f3bf8f6f          ISB      
                  |L22.124|
;;;1212   		}
;;;1213   		else
;;;1214   		{
;;;1215   			mtCOVERAGE_TEST_MARKER();
;;;1216   		}
;;;1217   	}
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;1218   
                          ENDP

                  |L22.128|
000080  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000084  72656552
000088  544f535c
00008c  7461736b
000090  732e6300
                  |L22.148|
000094  4572726f          DCB      "Error:%s,%d\r\n",0
000098  723a2573
00009c  2c25640d
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L22.164|
                          DCD      ||.data||
                  |L22.168|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskDelete PROC
;;;1047   
;;;1048   	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;1049   	{
000002  4604              MOV      r4,r0
;;;1050   	TCB_t *pxTCB;
;;;1051   
;;;1052   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1053   		{
;;;1054   			/* If null is passed in here then it is the calling task that is
;;;1055   			being deleted. */
;;;1056   			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  4d23              LDR      r5,|L23.152|
00000a  b904              CBNZ     r4,|L23.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L23.14|
;;;1057   
;;;1058   			/* Remove task from the ready list. */
;;;1059   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L23.46|
;;;1060   			{
;;;1061   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a20              LDR      r2,|L23.156|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L23.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L23.46|
;;;1062   			}
;;;1063   			else
;;;1064   			{
;;;1065   				mtCOVERAGE_TEST_MARKER();
;;;1066   			}
;;;1067   
;;;1068   			/* Is the task waiting on an event also? */
;;;1069   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L23.58|
;;;1070   			{
;;;1071   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L23.58|
;;;1072   			}
;;;1073   			else
;;;1074   			{
;;;1075   				mtCOVERAGE_TEST_MARKER();
;;;1076   			}
;;;1077   
;;;1078   			/* Increment the uxTaskNumber also so kernel aware debuggers can
;;;1079   			detect that the task lists need re-generating.  This is done before
;;;1080   			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
;;;1081   			not return. */
;;;1082   			uxTaskNumber++;
00003a  6a68              LDR      r0,[r5,#0x24]  ; uxTaskNumber
00003c  1c40              ADDS     r0,r0,#1
;;;1083   
;;;1084   			if( pxTCB == pxCurrentTCB )
00003e  6268              STR      r0,[r5,#0x24]  ; uxTaskNumber
000040  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000042  4284              CMP      r4,r0
000044  d107              BNE      |L23.86|
;;;1085   			{
;;;1086   				/* A task is deleting itself.  This cannot complete within the
;;;1087   				task itself, as a context switch to another task is required.
;;;1088   				Place the task in the termination list.  The idle task will
;;;1089   				check the termination list and free up any memory allocated by
;;;1090   				the scheduler for the TCB and stack of the deleted task. */
;;;1091   				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
000046  1d21              ADDS     r1,r4,#4
000048  4815              LDR      r0,|L23.160|
00004a  f7fffffe          BL       vListInsertEnd
;;;1092   
;;;1093   				/* Increment the ucTasksDeleted variable so the idle task knows
;;;1094   				there is a task that has been deleted and that it should therefore
;;;1095   				check the xTasksWaitingTermination list. */
;;;1096   				++uxDeletedTasksWaitingCleanUp;
00004e  6868              LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000050  1c40              ADDS     r0,r0,#1
000052  6068              STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000054  e007              B        |L23.102|
                  |L23.86|
;;;1097   
;;;1098   				/* The pre-delete hook is primarily for the Windows simulator,
;;;1099   				in which Windows specific clean up operations are performed,
;;;1100   				after which it is not possible to yield away from this task -
;;;1101   				hence xYieldPending is used to latch that a context switch is
;;;1102   				required. */
;;;1103   				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;1104   			}
;;;1105   			else
;;;1106   			{
;;;1107   				--uxCurrentNumberOfTasks;
000056  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000058  1e40              SUBS     r0,r0,#1
00005a  60a8              STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;1108   				prvDeleteTCB( pxTCB );
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       prvDeleteTCB
;;;1109   
;;;1110   				/* Reset the next expected unblock time in case it referred to
;;;1111   				the task that has just been deleted. */
;;;1112   				prvResetNextTaskUnblockTime();
000062  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L23.102|
;;;1113   			}
;;;1114   
;;;1115   			traceTASK_DELETE( pxTCB );
;;;1116   		}
;;;1117   		taskEXIT_CRITICAL();
000066  f7fffffe          BL       vPortExitCritical
;;;1118   
;;;1119   		/* Force a reschedule if it is the currently running task that has just
;;;1120   		been deleted. */
;;;1121   		if( xSchedulerRunning != pdFALSE )
00006a  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00006c  2800              CMP      r0,#0
00006e  d012              BEQ      |L23.150|
;;;1122   		{
;;;1123   			if( pxTCB == pxCurrentTCB )
000070  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000072  4284              CMP      r4,r0
000074  d10f              BNE      |L23.150|
;;;1124   			{
;;;1125   				configASSERT( uxSchedulerSuspended == 0 );
000076  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000078  b128              CBZ      r0,|L23.134|
00007a  f2404265          MOV      r2,#0x465
00007e  a109              ADR      r1,|L23.164|
000080  a00d              ADR      r0,|L23.184|
000082  f7fffffe          BL       __2printf
                  |L23.134|
;;;1126   				portYIELD_WITHIN_API();
000086  4910              LDR      r1,|L23.200|
000088  f04f5080          MOV      r0,#0x10000000
00008c  6008              STR      r0,[r1,#0]
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
                  |L23.150|
;;;1127   			}
;;;1128   			else
;;;1129   			{
;;;1130   				mtCOVERAGE_TEST_MARKER();
;;;1131   			}
;;;1132   		}
;;;1133   	}
000096  bd70              POP      {r4-r6,pc}
;;;1134   
                          ENDP

                  |L23.152|
                          DCD      ||.data||
                  |L23.156|
                          DCD      ||.bss||
                  |L23.160|
                          DCD      ||.bss||+0x2bc
                  |L23.164|
0000a4  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000a8  72656552
0000ac  544f535c
0000b0  7461736b
0000b4  732e6300
                  |L23.184|
0000b8  4572726f          DCB      "Error:%s,%d\r\n",0
0000bc  723a2573
0000c0  2c25640d
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L23.200|
                          DCD      0xe000ed04

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1932   
;;;1933   void vTaskEndScheduler( void )
000000  2050              MOVS     r0,#0x50
000002  f3808811          MSR      BASEPRI,r0
000006  f3bf8f4f          DSB      
00000a  f3bf8f6f          ISB      
;;;1934   {
;;;1935   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1936   	routine so the original ISRs can be restored if necessary.  The port
;;;1937   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1938   	portDISABLE_INTERRUPTS();
;;;1939   	xSchedulerRunning = pdFALSE;
00000e  4902              LDR      r1,|L24.24|
000010  2000              MOVS     r0,#0
000012  6148              STR      r0,[r1,#0x14]  ; xSchedulerRunning
;;;1940   	vPortEndScheduler();
000014  f7ffbffe          B.W      vPortEndScheduler
;;;1941   }
;;;1942   /*----------------------------------------------------------*/
                          ENDP

                  |L24.24|
                          DCD      ||.data||

                          AREA ||i.vTaskGetInfo||, CODE, READONLY, ALIGN=2

                  vTaskGetInfo PROC
;;;3410   
;;;3411   	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3412   	{
000004  461e              MOV      r6,r3
000006  4690              MOV      r8,r2
000008  460c              MOV      r4,r1
00000a  0007              MOVS     r7,r0
00000c  d00e              BEQ      |L25.44|
;;;3413   	TCB_t *pxTCB;
;;;3414   
;;;3415   		/* xTask is NULL then get the state of the calling task. */
;;;3416   		pxTCB = prvGetTCBFromHandle( xTask );
00000e  4605              MOV      r5,r0
                  |L25.16|
;;;3417   
;;;3418   		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
;;;3419   		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
000010  f1050034          ADD      r0,r5,#0x34
000014  e9c45000          STRD     r5,r0,[r4,#0]
;;;3420   		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
000018  6ae8              LDR      r0,[r5,#0x2c]
;;;3421   		pxTaskStatus->pxStackBase = pxTCB->pxStack;
00001a  6120              STR      r0,[r4,#0x10]
00001c  6b28              LDR      r0,[r5,#0x30]
;;;3422   		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
00001e  61e0              STR      r0,[r4,#0x1c]
000020  6ca8              LDR      r0,[r5,#0x48]
;;;3423   
;;;3424   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3425   		{
;;;3426   			/* If the task is in the suspended list then there is a chance it is
;;;3427   			actually just blocked indefinitely - so really it should be reported as
;;;3428   			being in the Blocked state. */
;;;3429   			if( pxTaskStatus->eCurrentState == eSuspended )
000022  60a0              STR      r0,[r4,#8]
000024  7b20              LDRB     r0,[r4,#0xc]
000026  2803              CMP      r0,#3
000028  d003              BEQ      |L25.50|
00002a  e00a              B        |L25.66|
                  |L25.44|
00002c  4813              LDR      r0,|L25.124|
00002e  6805              LDR      r5,[r0,#0]            ;3416  ; pxCurrentTCB
000030  e7ee              B        |L25.16|
                  |L25.50|
;;;3430   			{
;;;3431   				vTaskSuspendAll();
000032  f7fffffe          BL       vTaskSuspendAll
;;;3432   				{
;;;3433   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000036  6aa8              LDR      r0,[r5,#0x28]
000038  b108              CBZ      r0,|L25.62|
;;;3434   					{
;;;3435   						pxTaskStatus->eCurrentState = eBlocked;
00003a  2002              MOVS     r0,#2
00003c  7320              STRB     r0,[r4,#0xc]
                  |L25.62|
;;;3436   					}
;;;3437   				}
;;;3438   				xTaskResumeAll();
00003e  f7fffffe          BL       xTaskResumeAll
                  |L25.66|
;;;3439   			}
;;;3440   		}
;;;3441   		#endif /* INCLUDE_vTaskSuspend */
;;;3442   
;;;3443   		#if ( configUSE_MUTEXES == 1 )
;;;3444   		{
;;;3445   			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
000042  6d28              LDR      r0,[r5,#0x50]
;;;3446   		}
;;;3447   		#else
;;;3448   		{
;;;3449   			pxTaskStatus->uxBasePriority = 0;
;;;3450   		}
;;;3451   		#endif
;;;3452   
;;;3453   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;3454   		{
;;;3455   			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
000044  6160              STR      r0,[r4,#0x14]
000046  6da8              LDR      r0,[r5,#0x58]
;;;3456   		}
;;;3457   		#else
;;;3458   		{
;;;3459   			pxTaskStatus->ulRunTimeCounter = 0;
;;;3460   		}
;;;3461   		#endif
;;;3462   
;;;3463   		/* Obtaining the task state is a little fiddly, so is only done if the value
;;;3464   		of eState passed into this function is eInvalid - otherwise the state is
;;;3465   		just set to whatever is passed in. */
;;;3466   		if( eState != eInvalid )
000048  61a0              STR      r0,[r4,#0x18]
00004a  2e05              CMP      r6,#5
00004c  d001              BEQ      |L25.82|
;;;3467   		{
;;;3468   			pxTaskStatus->eCurrentState = eState;
00004e  7326              STRB     r6,[r4,#0xc]
000050  e003              B        |L25.90|
                  |L25.82|
;;;3469   		}
;;;3470   		else
;;;3471   		{
;;;3472   			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       eTaskGetState
000058  7320              STRB     r0,[r4,#0xc]
                  |L25.90|
;;;3473   		}
;;;3474   
;;;3475   		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
;;;3476   		parameter is provided to allow it to be skipped. */
;;;3477   		if( xGetFreeStackSpace != pdFALSE )
00005a  f1b80f00          CMP      r8,#0
00005e  d00b              BEQ      |L25.120|
000060  2100              MOVS     r1,#0
;;;3478   		{
;;;3479   			#if ( portSTACK_GROWTH > 0 )
;;;3480   			{
;;;3481   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
;;;3482   			}
;;;3483   			#else
;;;3484   			{
;;;3485   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
000062  6b28              LDR      r0,[r5,#0x30]
000064  e001              B        |L25.106|
                  |L25.102|
000066  1c40              ADDS     r0,r0,#1
000068  1c49              ADDS     r1,r1,#1
                  |L25.106|
00006a  7802              LDRB     r2,[r0,#0]
00006c  2aa5              CMP      r2,#0xa5
00006e  d0fa              BEQ      |L25.102|
000070  0888              LSRS     r0,r1,#2
                  |L25.114|
000072  8420              STRH     r0,[r4,#0x20]
;;;3486   			}
;;;3487   			#endif
;;;3488   		}
;;;3489   		else
;;;3490   		{
;;;3491   			pxTaskStatus->usStackHighWaterMark = 0;
;;;3492   		}
;;;3493   	}
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L25.120|
000078  2000              MOVS     r0,#0                 ;3491
00007a  e7fa              B        |L25.114|
;;;3494   
                          ENDP

                  |L25.124|
                          DCD      ||.data||

                          AREA ||i.vTaskGetRunTimeStats||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  vTaskGetRunTimeStats PROC
;;;4036   
;;;4037   	void vTaskGetRunTimeStats( char *pcWriteBuffer )
000000  b5fe              PUSH     {r1-r7,lr}
;;;4038   	{
;;;4039   	TaskStatus_t *pxTaskStatusArray;
;;;4040   	volatile UBaseType_t uxArraySize, x;
;;;4041   	uint32_t ulTotalTime, ulStatsAsPercentage;
;;;4042   
;;;4043   		#if( configUSE_TRACE_FACILITY != 1 )
;;;4044   		{
;;;4045   			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTimeStats().
;;;4046   		}
;;;4047   		#endif
;;;4048   
;;;4049   		/*
;;;4050   		 * PLEASE NOTE:
;;;4051   		 *
;;;4052   		 * This function is provided for convenience only, and is used by many
;;;4053   		 * of the demo applications.  Do not consider it to be part of the
;;;4054   		 * scheduler.
;;;4055   		 *
;;;4056   		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
;;;4057   		 * of the uxTaskGetSystemState() output into a human readable table that
;;;4058   		 * displays the amount of time each task has spent in the Running state
;;;4059   		 * in both absolute and percentage terms.
;;;4060   		 *
;;;4061   		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
;;;4062   		 * function that might bloat the code size, use a lot of stack, and
;;;4063   		 * provide different results on different platforms.  An alternative,
;;;4064   		 * tiny, third party, and limited functionality implementation of
;;;4065   		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
;;;4066   		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
;;;4067   		 * a full snprintf() implementation!).
;;;4068   		 *
;;;4069   		 * It is recommended that production systems call uxTaskGetSystemState()
;;;4070   		 * directly to get access to raw stats data, rather than indirectly
;;;4071   		 * through a call to vTaskGetRunTimeStats().
;;;4072   		 */
;;;4073   
;;;4074   		/* Make sure the write buffer does not contain a string. */
;;;4075   		*pcWriteBuffer = 0x00;
000002  2500              MOVS     r5,#0
000004  4606              MOV      r6,r0                 ;4038
000006  7005              STRB     r5,[r0,#0]
;;;4076   
;;;4077   		/* Take a snapshot of the number of tasks in case it changes while this
;;;4078   		function is executing. */
;;;4079   		uxArraySize = uxCurrentNumberOfTasks;
000008  4822              LDR      r0,|L26.148|
00000a  6881              LDR      r1,[r0,#8]  ; uxCurrentNumberOfTasks
;;;4080   
;;;4081   		/* Allocate an array index for each task.  NOTE!  If
;;;4082   		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
;;;4083   		equate to NULL. */
;;;4084   		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
00000c  9101              STR      r1,[sp,#4]
00000e  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
000010  eb0000c0          ADD      r0,r0,r0,LSL #3
000014  0080              LSLS     r0,r0,#2
000016  f7fffffe          BL       pvPortMalloc
00001a  0004              MOVS     r4,r0
;;;4085   
;;;4086   		if( pxTaskStatusArray != NULL )
00001c  d038              BEQ      |L26.144|
;;;4087   		{
;;;4088   			/* Generate the (binary) data. */
;;;4089   			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
00001e  aa02              ADD      r2,sp,#8
000020  9901              LDR      r1,[sp,#4]
000022  f7fffffe          BL       uxTaskGetSystemState
;;;4090   
;;;4091   			/* For percentage calculations. */
;;;4092   			ulTotalTime /= 100UL;
000026  9001              STR      r0,[sp,#4]
000028  9802              LDR      r0,[sp,#8]
00002a  2164              MOVS     r1,#0x64
00002c  fbb0f0f1          UDIV     r0,r0,r1
;;;4093   
;;;4094   			/* Avoid divide by zero errors. */
;;;4095   			if( ulTotalTime > 0 )
000030  9002              STR      r0,[sp,#8]
000032  b350              CBZ      r0,|L26.138|
;;;4096   			{
;;;4097   				/* Create a human readable table from the binary data. */
;;;4098   				for( x = 0; x < uxArraySize; x++ )
000034  4628              MOV      r0,r5
000036  9500              STR      r5,[sp,#0]
000038  e024              B        |L26.132|
                  |L26.58|
;;;4099   				{
;;;4100   					/* What percentage of the total run time has the task used?
;;;4101   					This will always be rounded down to the nearest integer.
;;;4102   					ulTotalRunTimeDiv100 has already been divided by 100. */
;;;4103   					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
00003a  eb0000c0          ADD      r0,r0,r0,LSL #3
00003e  eb040080          ADD      r0,r4,r0,LSL #2
000042  9a02              LDR      r2,[sp,#8]
000044  6981              LDR      r1,[r0,#0x18]
000046  fbb1f5f2          UDIV     r5,r1,r2
;;;4104   
;;;4105   					/* Write the task name to the string, padding with
;;;4106   					spaces so it can be printed in tabular form more
;;;4107   					easily. */
;;;4108   					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
00004a  6841              LDR      r1,[r0,#4]
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       prvWriteNameToBuffer
000052  4606              MOV      r6,r0
;;;4109   
;;;4110   					if( ulStatsAsPercentage > 0UL )
;;;4111   					{
;;;4112   						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
;;;4113   						{
;;;4114   							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
;;;4115   						}
;;;4116   						#else
;;;4117   						{
;;;4118   							/* sizeof( int ) == sizeof( long ) so a smaller
;;;4119   							printf() library can be used. */
;;;4120   							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
;;;4121   						}
;;;4122   						#endif
;;;4123   					}
;;;4124   					else
;;;4125   					{
;;;4126   						/* If the percentage is zero here then the task has
;;;4127   						consumed less than 1% of the total run time. */
;;;4128   						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
;;;4129   						{
;;;4130   							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
;;;4131   						}
;;;4132   						#else
;;;4133   						{
;;;4134   							/* sizeof( int ) == sizeof( long ) so a smaller
;;;4135   							printf() library can be used. */
;;;4136   							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
000054  9800              LDR      r0,[sp,#0]
000056  eb0000c0          ADD      r0,r0,r0,LSL #3
00005a  eb040080          ADD      r0,r4,r0,LSL #2
00005e  6982              LDR      r2,[r0,#0x18]         ;4110
000060  b12d              CBZ      r5,|L26.110|
000062  462b              MOV      r3,r5                 ;4120
000064  a10c              ADR      r1,|L26.152|
000066  4630              MOV      r0,r6                 ;4120
000068  f7fffffe          BL       __2sprintf
00006c  e003              B        |L26.118|
                  |L26.110|
00006e  a10d              ADR      r1,|L26.164|
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       __2sprintf
                  |L26.118|
;;;4137   						}
;;;4138   						#endif
;;;4139   					}
;;;4140   
;;;4141   					pcWriteBuffer += strlen( pcWriteBuffer );
000076  4630              MOV      r0,r6
000078  f7fffffe          BL       strlen
00007c  4406              ADD      r6,r6,r0
00007e  9800              LDR      r0,[sp,#0]            ;4098
000080  1c40              ADDS     r0,r0,#1              ;4098
000082  9000              STR      r0,[sp,#0]            ;4098
                  |L26.132|
000084  9901              LDR      r1,[sp,#4]            ;4098
000086  4288              CMP      r0,r1                 ;4098
000088  d3d7              BCC      |L26.58|
                  |L26.138|
;;;4142   				}
;;;4143   			}
;;;4144   			else
;;;4145   			{
;;;4146   				mtCOVERAGE_TEST_MARKER();
;;;4147   			}
;;;4148   
;;;4149   			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
;;;4150   			is 0 then vPortFree() will be #defined to nothing. */
;;;4151   			vPortFree( pxTaskStatusArray );
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       vPortFree
                  |L26.144|
;;;4152   		}
;;;4153   		else
;;;4154   		{
;;;4155   			mtCOVERAGE_TEST_MARKER();
;;;4156   		}
;;;4157   	}
000090  bdfe              POP      {r1-r7,pc}
;;;4158   
                          ENDP

000092  0000              DCW      0x0000
                  |L26.148|
                          DCD      ||.data||
                  |L26.152|
000098  09257509          DCB      "\t%u\t\t%u%%\r\n",0
00009c  09257525
0000a0  250d0a00
                  |L26.164|
0000a4  09257509          DCB      "\t%u\t\t<1%%\r\n",0
0000a8  093c3125
0000ac  250d0a00

                          AREA ||i.vTaskList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_c
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskList PROC
;;;3941   
;;;3942   	void vTaskList( char * pcWriteBuffer )
000000  b57f              PUSH     {r0-r6,lr}
;;;3943   	{
;;;3944   	TaskStatus_t *pxTaskStatusArray;
;;;3945   	volatile UBaseType_t uxArraySize, x;
;;;3946   	char cStatus;
;;;3947   
;;;3948   		/*
;;;3949   		 * PLEASE NOTE:
;;;3950   		 *
;;;3951   		 * This function is provided for convenience only, and is used by many
;;;3952   		 * of the demo applications.  Do not consider it to be part of the
;;;3953   		 * scheduler.
;;;3954   		 *
;;;3955   		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
;;;3956   		 * uxTaskGetSystemState() output into a human readable table that
;;;3957   		 * displays task names, states and stack usage.
;;;3958   		 *
;;;3959   		 * vTaskList() has a dependency on the sprintf() C library function that
;;;3960   		 * might bloat the code size, use a lot of stack, and provide different
;;;3961   		 * results on different platforms.  An alternative, tiny, third party,
;;;3962   		 * and limited functionality implementation of sprintf() is provided in
;;;3963   		 * many of the FreeRTOS/Demo sub-directories in a file called
;;;3964   		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
;;;3965   		 * snprintf() implementation!).
;;;3966   		 *
;;;3967   		 * It is recommended that production systems call uxTaskGetSystemState()
;;;3968   		 * directly to get access to raw stats data, rather than indirectly
;;;3969   		 * through a call to vTaskList().
;;;3970   		 */
;;;3971   
;;;3972   
;;;3973   		/* Make sure the write buffer does not contain a string. */
;;;3974   		*pcWriteBuffer = 0x00;
000002  2400              MOVS     r4,#0
000004  4606              MOV      r6,r0                 ;3943
000006  7004              STRB     r4,[r0,#0]
;;;3975   
;;;3976   		/* Take a snapshot of the number of tasks in case it changes while this
;;;3977   		function is executing. */
;;;3978   		uxArraySize = uxCurrentNumberOfTasks;
000008  4826              LDR      r0,|L27.164|
00000a  6881              LDR      r1,[r0,#8]  ; uxCurrentNumberOfTasks
;;;3979   
;;;3980   		/* Allocate an array index for each task.  NOTE!  if
;;;3981   		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
;;;3982   		equate to NULL. */
;;;3983   		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
00000c  9102              STR      r1,[sp,#8]
00000e  6880              LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
000010  eb0000c0          ADD      r0,r0,r0,LSL #3
000014  0080              LSLS     r0,r0,#2
000016  f7fffffe          BL       pvPortMalloc
00001a  0005              MOVS     r5,r0
;;;3984   
;;;3985   		if( pxTaskStatusArray != NULL )
00001c  d041              BEQ      |L27.162|
;;;3986   		{
;;;3987   			/* Generate the (binary) data. */
;;;3988   			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
00001e  2200              MOVS     r2,#0
000020  9902              LDR      r1,[sp,#8]
000022  f7fffffe          BL       uxTaskGetSystemState
000026  e9cd0402          STRD     r0,r4,[sp,#8]
;;;3989   
;;;3990   			/* Create a human readable table from the binary data. */
;;;3991   			for( x = 0; x < uxArraySize; x++ )
00002a  4620              MOV      r0,r4
00002c  e028              B        |L27.128|
                  |L27.46|
;;;3992   			{
;;;3993   				switch( pxTaskStatusArray[ x ].eCurrentState )
00002e  eb0000c0          ADD      r0,r0,r0,LSL #3
000032  eb050080          ADD      r0,r5,r0,LSL #2
000036  7b01              LDRB     r1,[r0,#0xc]
000038  2901              CMP      r1,#1
00003a  d02a              BEQ      |L27.146|
00003c  2902              CMP      r1,#2
00003e  d02a              BEQ      |L27.150|
000040  2903              CMP      r1,#3
000042  d02a              BEQ      |L27.154|
000044  2904              CMP      r1,#4
000046  d02a              BEQ      |L27.158|
;;;3994   				{
;;;3995   					case eReady:		cStatus = tskREADY_CHAR;
;;;3996   										break;
;;;3997   
;;;3998   					case eBlocked:		cStatus = tskBLOCKED_CHAR;
;;;3999   										break;
;;;4000   
;;;4001   					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
;;;4002   										break;
;;;4003   
;;;4004   					case eDeleted:		cStatus = tskDELETED_CHAR;
;;;4005   										break;
;;;4006   
;;;4007   					default:			/* Should not get here, but it is included
;;;4008   										to prevent static checking errors. */
;;;4009   										cStatus = 0x00;
000048  2400              MOVS     r4,#0
                  |L27.74|
;;;4010   										break;
;;;4011   				}
;;;4012   
;;;4013   				/* Write the task name to the string, padding with spaces so it
;;;4014   				can be printed in tabular form more easily. */
;;;4015   				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
00004a  6841              LDR      r1,[r0,#4]
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       prvWriteNameToBuffer
000052  4606              MOV      r6,r0
;;;4016   
;;;4017   				/* Write the rest of the string. */
;;;4018   				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
000054  9803              LDR      r0,[sp,#0xc]
000056  eb0000c0          ADD      r0,r0,r0,LSL #3
00005a  eb050080          ADD      r0,r5,r0,LSL #2
00005e  6882              LDR      r2,[r0,#8]
000060  8c01              LDRH     r1,[r0,#0x20]
000062  e9cd1200          STRD     r1,r2,[sp,#0]
000066  6903              LDR      r3,[r0,#0x10]
000068  4622              MOV      r2,r4
00006a  a10f              ADR      r1,|L27.168|
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       __2sprintf
;;;4019   				pcWriteBuffer += strlen( pcWriteBuffer );
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       strlen
000078  4406              ADD      r6,r6,r0
00007a  9803              LDR      r0,[sp,#0xc]          ;3991
00007c  1c40              ADDS     r0,r0,#1              ;3991
00007e  9003              STR      r0,[sp,#0xc]          ;3991
                  |L27.128|
000080  9902              LDR      r1,[sp,#8]            ;3991
000082  4288              CMP      r0,r1                 ;3991
000084  d3d3              BCC      |L27.46|
;;;4020   			}
;;;4021   
;;;4022   			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
;;;4023   			is 0 then vPortFree() will be #defined to nothing. */
;;;4024   			vPortFree( pxTaskStatusArray );
000086  b004              ADD      sp,sp,#0x10
000088  4628              MOV      r0,r5
00008a  e8bd4070          POP      {r4-r6,lr}
00008e  f7ffbffe          B.W      vPortFree
                  |L27.146|
000092  2452              MOVS     r4,#0x52              ;3995
000094  e7d9              B        |L27.74|
                  |L27.150|
000096  2442              MOVS     r4,#0x42              ;3998
000098  e7d7              B        |L27.74|
                  |L27.154|
00009a  2453              MOVS     r4,#0x53              ;4001
00009c  e7d5              B        |L27.74|
                  |L27.158|
00009e  2444              MOVS     r4,#0x44              ;4004
0000a0  e7d3              B        |L27.74|
                  |L27.162|
;;;4025   		}
;;;4026   		else
;;;4027   		{
;;;4028   			mtCOVERAGE_TEST_MARKER();
;;;4029   		}
;;;4030   	}
0000a2  bd7f              POP      {r0-r6,pc}
;;;4031   
                          ENDP

                  |L27.164|
                          DCD      ||.data||
                  |L27.168|
0000a8  09256309          DCB      "\t%c\t%u\t%u\t%u\r\n",0
0000ac  25750925
0000b0  75092575
0000b4  0d0a00  
0000b7  00                DCB      0

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3075   
;;;3076   void vTaskMissedYield( void )
000000  4901              LDR      r1,|L28.8|
;;;3077   {
;;;3078   	xYieldPending = pdTRUE;
000002  2001              MOVS     r0,#1
000004  61c8              STR      r0,[r1,#0x1c]  ; xYieldPending
;;;3079   }
000006  4770              BX       lr
;;;3080   /*-----------------------------------------------------------*/
                          ENDP

                  |L28.8|
                          DCD      ||.data||

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  vTaskNotifyGiveFromISR PROC
;;;4572   
;;;4573   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4574   	{
000004  4688              MOV      r8,r1
000006  0004              MOVS     r4,r0
000008  d105              BNE      |L29.22|
;;;4575   	TCB_t * pxTCB;
;;;4576   	uint8_t ucOriginalNotifyState;
;;;4577   	UBaseType_t uxSavedInterruptStatus;
;;;4578   
;;;4579   		configASSERT( xTaskToNotify );
00000a  f24112e3          MOV      r2,#0x11e3
00000e  a125              ADR      r1,|L29.164|
000010  a029              ADR      r0,|L29.184|
000012  f7fffffe          BL       __2printf
                  |L29.22|
;;;4580   
;;;4581   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4582   		maximum	system call (or maximum API call) interrupt priority.
;;;4583   		Interrupts that are	above the maximum system call priority are keep
;;;4584   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4585   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4586   		is defined in FreeRTOSConfig.h then
;;;4587   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4588   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4589   		been assigned a priority above the configured maximum system call
;;;4590   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4591   		from interrupts	that have been assigned a priority at or (logically)
;;;4592   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4593   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4594   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4595   		provided on the following link:
;;;4596   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4597   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000016  f7fffffe          BL       vPortValidateInterruptPriority
00001a  2050              MOVS     r0,#0x50
00001c  f3ef8711          MRS      r7,BASEPRI
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
;;;4598   
;;;4599   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4600   
;;;4601   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4602   		{
;;;4603   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00002c  f8940060          LDRB     r0,[r4,#0x60]
;;;4604   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000030  2102              MOVS     r1,#2
000032  f8841060          STRB     r1,[r4,#0x60]
;;;4605   
;;;4606   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4607   			semaphore. */
;;;4608   			( pxTCB->ulNotifiedValue )++;
000036  6de1              LDR      r1,[r4,#0x5c]
000038  1c49              ADDS     r1,r1,#1
00003a  65e1              STR      r1,[r4,#0x5c]
;;;4609   
;;;4610   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4611   
;;;4612   			/* If the task is in the blocked state specifically to wait for a
;;;4613   			notification then unblock it now. */
;;;4614   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
00003c  2801              CMP      r0,#1
00003e  d12c              BNE      |L29.154|
;;;4615   			{
;;;4616   				/* The task should not have been on an event list. */
;;;4617   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000040  6aa0              LDR      r0,[r4,#0x28]
000042  b128              CBZ      r0,|L29.80|
000044  f2412209          MOV      r2,#0x1209
000048  a116              ADR      r1,|L29.164|
00004a  a01b              ADR      r0,|L29.184|
00004c  f7fffffe          BL       __2printf
                  |L29.80|
;;;4618   
;;;4619   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000050  4d1d              LDR      r5,|L29.200|
000052  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000054  2601              MOVS     r6,#1                 ;4576
000056  b178              CBZ      r0,|L29.120|
;;;4620   				{
;;;4621   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4622   					prvAddTaskToReadyList( pxTCB );
;;;4623   				}
;;;4624   				else
;;;4625   				{
;;;4626   					/* The delayed and ready lists cannot be accessed, so hold
;;;4627   					this task pending until the scheduler is resumed. */
;;;4628   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000058  f1040118          ADD      r1,r4,#0x18
00005c  481b              LDR      r0,|L29.204|
                  |L29.94|
00005e  f7fffffe          BL       vListInsertEnd
;;;4629   				}
;;;4630   
;;;4631   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000062  6ae0              LDR      r0,[r4,#0x2c]
000064  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000066  6ac9              LDR      r1,[r1,#0x2c]
000068  4288              CMP      r0,r1
00006a  d916              BLS      |L29.154|
;;;4632   				{
;;;4633   					/* The notified task has a priority above the currently
;;;4634   					executing task so a yield is required. */
;;;4635   					if( pxHigherPriorityTaskWoken != NULL )
00006c  f1b80f00          CMP      r8,#0
000070  d012              BEQ      |L29.152|
;;;4636   					{
;;;4637   						*pxHigherPriorityTaskWoken = pdTRUE;
000072  f8c86000          STR      r6,[r8,#0]
000076  e010              B        |L29.154|
                  |L29.120|
000078  1d20              ADDS     r0,r4,#4              ;4621
00007a  f7fffffe          BL       uxListRemove
00007e  6ae0              LDR      r0,[r4,#0x2c]         ;4622
000080  692a              LDR      r2,[r5,#0x10]         ;4622  ; uxTopReadyPriority
000082  fa06f100          LSL      r1,r6,r0              ;4622
000086  4311              ORRS     r1,r1,r2              ;4622
000088  6129              STR      r1,[r5,#0x10]         ;4622  ; uxTopReadyPriority
00008a  4911              LDR      r1,|L29.208|
00008c  eb000080          ADD      r0,r0,r0,LSL #2       ;4622
000090  eb010080          ADD      r0,r1,r0,LSL #2       ;4622
000094  1d21              ADDS     r1,r4,#4              ;4622
000096  e7e2              B        |L29.94|
                  |L29.152|
;;;4638   					}
;;;4639   					else
;;;4640   					{
;;;4641   						/* Mark that a yield is pending in case the user is not
;;;4642   						using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;4643   						safe FreeRTOS function. */
;;;4644   						xYieldPending = pdTRUE;
000098  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L29.154|
00009a  f3878811          MSR      BASEPRI,r7
;;;4645   					}
;;;4646   				}
;;;4647   				else
;;;4648   				{
;;;4649   					mtCOVERAGE_TEST_MARKER();
;;;4650   				}
;;;4651   			}
;;;4652   		}
;;;4653   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4654   	}
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;4655   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L29.164|
0000a4  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000a8  72656552
0000ac  544f535c
0000b0  7461736b
0000b4  732e6300
                  |L29.184|
0000b8  4572726f          DCB      "Error:%s,%d\r\n",0
0000bc  723a2573
0000c0  2c25640d
0000c4  0a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L29.200|
                          DCD      ||.data||
                  |L29.204|
                          DCD      ||.bss||+0x2a8
                  |L29.208|
                          DCD      ||.bss||

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskPlaceOnEventList PROC
;;;2819   
;;;2820   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2821   {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d105              BNE      |L30.20|
;;;2822   	configASSERT( pxEventList );
000008  f6403206          MOV      r2,#0xb06
00000c  a107              ADR      r1,|L30.44|
00000e  a00c              ADR      r0,|L30.64|
000010  f7fffffe          BL       __2printf
                  |L30.20|
;;;2823   
;;;2824   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2825   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2826   
;;;2827   	/* Place the event list item of the TCB in the appropriate event list.
;;;2828   	This is placed in the list in priority order so the highest priority task
;;;2829   	is the first to be woken by the event.  The queue that contains the event
;;;2830   	list is locked, preventing simultaneous access from interrupts. */
;;;2831   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000014  480e              LDR      r0,|L30.80|
000016  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000018  4620              MOV      r0,r4
00001a  3118              ADDS     r1,r1,#0x18
00001c  f7fffffe          BL       vListInsert
;;;2832   
;;;2833   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000020  4628              MOV      r0,r5
000022  e8bd4070          POP      {r4-r6,lr}
000026  2101              MOVS     r1,#1
000028  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
;;;2834   }
;;;2835   /*-----------------------------------------------------------*/
                          ENDP

                  |L30.44|
00002c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000030  72656552
000034  544f535c
000038  7461736b
00003c  732e6300
                  |L30.64|
000040  4572726f          DCB      "Error:%s,%d\r\n",0
000044  723a2573
000048  2c25640d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L30.80|
                          DCD      ||.data||

                          AREA ||i.vTaskPlaceOnEventListRestricted||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskPlaceOnEventListRestricted PROC
;;;2862   
;;;2863   	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
000000  b570              PUSH     {r4-r6,lr}
;;;2864   	{
000002  4614              MOV      r4,r2
000004  460e              MOV      r6,r1
000006  0005              MOVS     r5,r0
000008  d105              BNE      |L31.22|
;;;2865   		configASSERT( pxEventList );
00000a  f6403231          MOV      r2,#0xb31
00000e  a109              ADR      r1,|L31.52|
000010  a00d              ADR      r0,|L31.72|
000012  f7fffffe          BL       __2printf
                  |L31.22|
;;;2866   
;;;2867   		/* This function should not be called by application code hence the
;;;2868   		'Restricted' in its name.  It is not part of the public API.  It is
;;;2869   		designed for use by kernel code, and has special calling requirements -
;;;2870   		it should be called with the scheduler suspended. */
;;;2871   
;;;2872   
;;;2873   		/* Place the event list item of the TCB in the appropriate event list.
;;;2874   		In this case it is assume that this is the only task that is going to
;;;2875   		be waiting on this event list, so the faster vListInsertEnd() function
;;;2876   		can be used in place of vListInsert. */
;;;2877   		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000016  4810              LDR      r0,|L31.88|
000018  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00001a  4628              MOV      r0,r5
00001c  3118              ADDS     r1,r1,#0x18
00001e  f7fffffe          BL       vListInsertEnd
;;;2878   
;;;2879   		/* If the task should block indefinitely then set the block time to a
;;;2880   		value that will be recognised as an indefinite delay inside the
;;;2881   		prvAddCurrentTaskToDelayedList() function. */
;;;2882   		if( xWaitIndefinitely != pdFALSE )
000022  b10c              CBZ      r4,|L31.40|
;;;2883   		{
;;;2884   			xTicksToWait = portMAX_DELAY;
000024  f04f36ff          MOV      r6,#0xffffffff
                  |L31.40|
;;;2885   		}
;;;2886   
;;;2887   		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
;;;2888   		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
000028  4621              MOV      r1,r4
00002a  4630              MOV      r0,r6
00002c  e8bd4070          POP      {r4-r6,lr}
000030  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
;;;2889   	}
;;;2890   
                          ENDP

                  |L31.52|
000034  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000038  72656552
00003c  544f535c
000040  7461736b
000044  732e6300
                  |L31.72|
000048  4572726f          DCB      "Error:%s,%d\r\n",0
00004c  723a2573
000050  2c25640d
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L31.88|
                          DCD      ||.data||

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  vTaskPlaceOnUnorderedEventList PROC
;;;2836   
;;;2837   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2838   {
000004  4617              MOV      r7,r2
000006  460e              MOV      r6,r1
000008  0005              MOVS     r5,r0
00000a  d105              BNE      |L32.24|
;;;2839   	configASSERT( pxEventList );
00000c  f6403217          MOV      r2,#0xb17
000010  a10d              ADR      r1,|L32.72|
000012  a012              ADR      r0,|L32.92|
000014  f7fffffe          BL       __2printf
                  |L32.24|
;;;2840   
;;;2841   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2842   	the event groups implementation. */
;;;2843   	configASSERT( uxSchedulerSuspended != 0 );
000018  4c14              LDR      r4,|L32.108|
00001a  6b20              LDR      r0,[r4,#0x30]  ; uxSchedulerSuspended
00001c  b928              CBNZ     r0,|L32.42|
00001e  f640321b          MOV      r2,#0xb1b
000022  a109              ADR      r1,|L32.72|
000024  a00d              ADR      r0,|L32.92|
000026  f7fffffe          BL       __2printf
                  |L32.42|
;;;2844   
;;;2845   	/* Store the item value in the event list item.  It is safe to access the
;;;2846   	event list item here as interrupts won't access the event list item of a
;;;2847   	task that is not in the Blocked state. */
;;;2848   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00002a  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
00002c  f0464000          ORR      r0,r6,#0x80000000
;;;2849   
;;;2850   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2851   	list.  It is safe to access the event list here because it is part of an
;;;2852   	event group implementation - and interrupts don't access event groups
;;;2853   	directly (instead they access them indirectly by pending function calls to
;;;2854   	the task level). */
;;;2855   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000030  6188              STR      r0,[r1,#0x18]
000032  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000034  4628              MOV      r0,r5
000036  3118              ADDS     r1,r1,#0x18
000038  f7fffffe          BL       vListInsertEnd
;;;2856   
;;;2857   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00003c  4638              MOV      r0,r7
00003e  e8bd41f0          POP      {r4-r8,lr}
000042  2101              MOVS     r1,#1
000044  f7ffbffe          B.W      prvAddCurrentTaskToDelayedList
;;;2858   }
;;;2859   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.72|
000048  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
00004c  72656552
000050  544f535c
000054  7461736b
000058  732e6300
                  |L32.92|
00005c  4572726f          DCB      "Error:%s,%d\r\n",0
000060  723a2573
000064  2c25640d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L32.108|
                          DCD      ||.data||

                          AREA ||i.vTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  vTaskPriorityInherit PROC
;;;3705   
;;;3706   	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3707   	{
;;;3708   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000002  0004              MOVS     r4,r0
000004  d039              BEQ      |L33.122|
;;;3709   
;;;3710   		/* If the mutex was given back by an interrupt while the queue was
;;;3711   		locked then the mutex holder might now be NULL. */
;;;3712   		if( pxMutexHolder != NULL )
;;;3713   		{
;;;3714   			/* If the holder of the mutex has a priority below the priority of
;;;3715   			the task attempting to obtain the mutex then it will temporarily
;;;3716   			inherit the priority of the task attempting to obtain the mutex. */
;;;3717   			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
000006  4d1d              LDR      r5,|L33.124|
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00000c  6ac9              LDR      r1,[r1,#0x2c]
00000e  4288              CMP      r0,r1
000010  d233              BCS      |L33.122|
;;;3718   			{
;;;3719   				/* Adjust the mutex holder state to account for its new
;;;3720   				priority.  Only reset the event list item value if the value is
;;;3721   				not	being used for anything else. */
;;;3722   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000012  69a0              LDR      r0,[r4,#0x18]
000014  2800              CMP      r0,#0
000016  db04              BLT      |L33.34|
;;;3723   				{
;;;3724   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000018  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00001a  6ac0              LDR      r0,[r0,#0x2c]
00001c  f1c00020          RSB      r0,r0,#0x20
000020  61a0              STR      r0,[r4,#0x18]
                  |L33.34|
;;;3725   				}
;;;3726   				else
;;;3727   				{
;;;3728   					mtCOVERAGE_TEST_MARKER();
;;;3729   				}
;;;3730   
;;;3731   				/* If the task being modified is in the ready state it will need
;;;3732   				to be moved into a new list. */
;;;3733   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
000022  6ae0              LDR      r0,[r4,#0x2c]
000024  4e16              LDR      r6,|L33.128|
000026  eb000080          ADD      r0,r0,r0,LSL #2
00002a  6961              LDR      r1,[r4,#0x14]
00002c  eb060080          ADD      r0,r6,r0,LSL #2
000030  4281              CMP      r1,r0
000032  d11f              BNE      |L33.116|
;;;3734   				{
;;;3735   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;3736   					{
;;;3737   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00003a  2101              MOVS     r1,#1
00003c  b950              CBNZ     r0,|L33.84|
00003e  6ae0              LDR      r0,[r4,#0x2c]
000040  eb000280          ADD      r2,r0,r0,LSL #2
000044  f8562022          LDR      r2,[r6,r2,LSL #2]
000048  b922              CBNZ     r2,|L33.84|
00004a  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00004c  fa01f000          LSL      r0,r1,r0
000050  4382              BICS     r2,r2,r0
000052  612a              STR      r2,[r5,#0x10]  ; uxTopReadyPriority
                  |L33.84|
;;;3738   					}
;;;3739   					else
;;;3740   					{
;;;3741   						mtCOVERAGE_TEST_MARKER();
;;;3742   					}
;;;3743   
;;;3744   					/* Inherit the priority before being moved into the new list. */
;;;3745   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000054  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000056  6ac0              LDR      r0,[r0,#0x2c]
;;;3746   					prvAddTaskToReadyList( pxTCB );
000058  62e0              STR      r0,[r4,#0x2c]
00005a  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00005c  4081              LSLS     r1,r1,r0
00005e  4311              ORRS     r1,r1,r2
000060  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000062  eb000080          ADD      r0,r0,r0,LSL #2
000066  eb060080          ADD      r0,r6,r0,LSL #2
00006a  1d21              ADDS     r1,r4,#4
00006c  e8bd4070          POP      {r4-r6,lr}
000070  f7ffbffe          B.W      vListInsertEnd
                  |L33.116|
;;;3747   				}
;;;3748   				else
;;;3749   				{
;;;3750   					/* Just inherit the priority. */
;;;3751   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
000074  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000076  6ac0              LDR      r0,[r0,#0x2c]
000078  62e0              STR      r0,[r4,#0x2c]
                  |L33.122|
;;;3752   				}
;;;3753   
;;;3754   				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
;;;3755   			}
;;;3756   			else
;;;3757   			{
;;;3758   				mtCOVERAGE_TEST_MARKER();
;;;3759   			}
;;;3760   		}
;;;3761   		else
;;;3762   		{
;;;3763   			mtCOVERAGE_TEST_MARKER();
;;;3764   		}
;;;3765   	}
00007a  bd70              POP      {r4-r6,pc}
;;;3766   
                          ENDP

                  |L33.124|
                          DCD      ||.data||
                  |L33.128|
                          DCD      ||.bss||

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskPrioritySet PROC
;;;1401   
;;;1402   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1403   	{
;;;1404   	TCB_t *pxTCB;
;;;1405   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1406   	BaseType_t xYieldRequired = pdFALSE;
000004  2600              MOVS     r6,#0
000006  460d              MOV      r5,r1                 ;1403
000008  4604              MOV      r4,r0                 ;1403
;;;1407   
;;;1408   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000a  2920              CMP      r1,#0x20
00000c  d306              BCC      |L34.28|
00000e  f44f62b0          MOV      r2,#0x580
000012  a128              ADR      r1,|L34.180|
000014  a02c              ADR      r0,|L34.200|
000016  f7fffffe          BL       __2printf
;;;1409   
;;;1410   		/* Ensure the new priority is valid. */
;;;1411   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
;;;1412   		{
;;;1413   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00001a  251f              MOVS     r5,#0x1f
                  |L34.28|
;;;1414   		}
;;;1415   		else
;;;1416   		{
;;;1417   			mtCOVERAGE_TEST_MARKER();
;;;1418   		}
;;;1419   
;;;1420   		taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;1421   		{
;;;1422   			/* If null is passed in here then it is the priority of the calling
;;;1423   			task that is being changed. */
;;;1424   			pxTCB = prvGetTCBFromHandle( xTask );
000020  4f2d              LDR      r7,|L34.216|
000022  b904              CBNZ     r4,|L34.38|
000024  683c              LDR      r4,[r7,#0]  ; pxCurrentTCB
                  |L34.38|
;;;1425   
;;;1426   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1427   
;;;1428   			#if ( configUSE_MUTEXES == 1 )
;;;1429   			{
;;;1430   				uxCurrentBasePriority = pxTCB->uxBasePriority;
;;;1431   			}
;;;1432   			#else
;;;1433   			{
;;;1434   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1435   			}
;;;1436   			#endif
;;;1437   
;;;1438   			if( uxCurrentBasePriority != uxNewPriority )
000026  6d20              LDR      r0,[r4,#0x50]
000028  42a8              CMP      r0,r5
00002a  d03f              BEQ      |L34.172|
;;;1439   			{
;;;1440   				/* The priority change may have readied a task of higher
;;;1441   				priority than the calling task. */
;;;1442   				if( uxNewPriority > uxCurrentBasePriority )
;;;1443   				{
;;;1444   					if( pxTCB != pxCurrentTCB )
;;;1445   					{
;;;1446   						/* The priority of a task other than the currently
;;;1447   						running task is being raised.  Is the priority being
;;;1448   						raised above that of the running task? */
;;;1449   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
;;;1450   						{
;;;1451   							xYieldRequired = pdTRUE;
;;;1452   						}
;;;1453   						else
;;;1454   						{
;;;1455   							mtCOVERAGE_TEST_MARKER();
;;;1456   						}
;;;1457   					}
;;;1458   					else
;;;1459   					{
;;;1460   						/* The priority of the running task is being raised,
;;;1461   						but the running task must already be the highest
;;;1462   						priority task able to run so no yield is required. */
;;;1463   					}
;;;1464   				}
;;;1465   				else if( pxTCB == pxCurrentTCB )
00002c  6839              LDR      r1,[r7,#0]  ; pxCurrentTCB
00002e  4285              CMP      r5,r0                 ;1442
000030  d906              BLS      |L34.64|
000032  428c              CMP      r4,r1                 ;1444
000034  d007              BEQ      |L34.70|
000036  6839              LDR      r1,[r7,#0]            ;1449  ; pxCurrentTCB
000038  6ac9              LDR      r1,[r1,#0x2c]         ;1449
00003a  42a9              CMP      r1,r5                 ;1449
00003c  d902              BLS      |L34.68|
00003e  e002              B        |L34.70|
                  |L34.64|
000040  428c              CMP      r4,r1
000042  d100              BNE      |L34.70|
                  |L34.68|
;;;1466   				{
;;;1467   					/* Setting the priority of the running task down means
;;;1468   					there may now be another task of higher priority that
;;;1469   					is ready to execute. */
;;;1470   					xYieldRequired = pdTRUE;
000044  2601              MOVS     r6,#1
                  |L34.70|
;;;1471   				}
;;;1472   				else
;;;1473   				{
;;;1474   					/* Setting the priority of any other task down does not
;;;1475   					require a yield as the running task must be above the
;;;1476   					new priority of the task being modified. */
;;;1477   				}
;;;1478   
;;;1479   				/* Remember the ready list the task might be referenced from
;;;1480   				before its uxPriority member is changed so the
;;;1481   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1482   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
000046  6ae1              LDR      r1,[r4,#0x2c]
000048  4688              MOV      r8,r1
;;;1483   
;;;1484   				#if ( configUSE_MUTEXES == 1 )
;;;1485   				{
;;;1486   					/* Only change the priority being used if the task is not
;;;1487   					currently using an inherited priority. */
;;;1488   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
00004a  4288              CMP      r0,r1
00004c  d100              BNE      |L34.80|
;;;1489   					{
;;;1490   						pxTCB->uxPriority = uxNewPriority;
00004e  62e5              STR      r5,[r4,#0x2c]
                  |L34.80|
;;;1491   					}
;;;1492   					else
;;;1493   					{
;;;1494   						mtCOVERAGE_TEST_MARKER();
;;;1495   					}
;;;1496   
;;;1497   					/* The base priority gets set whatever. */
;;;1498   					pxTCB->uxBasePriority = uxNewPriority;
;;;1499   				}
;;;1500   				#else
;;;1501   				{
;;;1502   					pxTCB->uxPriority = uxNewPriority;
;;;1503   				}
;;;1504   				#endif
;;;1505   
;;;1506   				/* Only reset the event list item value if the value is not
;;;1507   				being used for anything else. */
;;;1508   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000050  6525              STR      r5,[r4,#0x50]
000052  69a0              LDR      r0,[r4,#0x18]
000054  2800              CMP      r0,#0
000056  db02              BLT      |L34.94|
;;;1509   				{
;;;1510   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000058  f1c50020          RSB      r0,r5,#0x20
00005c  61a0              STR      r0,[r4,#0x18]
                  |L34.94|
;;;1511   				}
;;;1512   				else
;;;1513   				{
;;;1514   					mtCOVERAGE_TEST_MARKER();
;;;1515   				}
;;;1516   
;;;1517   				/* If the task is in the blocked or suspended list we need do
;;;1518   				nothing more than change it's priority variable. However, if
;;;1519   				the task is in a ready list it needs to be removed and placed
;;;1520   				in the list appropriate to its new priority. */
;;;1521   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
00005e  4d1f              LDR      r5,|L34.220|
000060  eb080088          ADD      r0,r8,r8,LSL #2
000064  6961              LDR      r1,[r4,#0x14]
000066  eb050080          ADD      r0,r5,r0,LSL #2
00006a  4281              CMP      r1,r0
00006c  d115              BNE      |L34.154|
;;;1522   				{
;;;1523   					/* The task is currently in its ready list - remove before adding
;;;1524   					it to it's new ready list.  As we are in a critical section we
;;;1525   					can do this even if the scheduler is suspended. */
;;;1526   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00006e  1d20              ADDS     r0,r4,#4
000070  f7fffffe          BL       uxListRemove
000074  2101              MOVS     r1,#1                 ;1451
000076  b920              CBNZ     r0,|L34.130|
;;;1527   					{
;;;1528   						/* It is known that the task is in its ready list so
;;;1529   						there is no need to check again and the port level
;;;1530   						reset macro can be called directly. */
;;;1531   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
000078  693a              LDR      r2,[r7,#0x10]  ; uxTopReadyPriority
00007a  fa01f008          LSL      r0,r1,r8
00007e  4382              BICS     r2,r2,r0
000080  613a              STR      r2,[r7,#0x10]  ; uxTopReadyPriority
                  |L34.130|
;;;1532   					}
;;;1533   					else
;;;1534   					{
;;;1535   						mtCOVERAGE_TEST_MARKER();
;;;1536   					}
;;;1537   					prvAddTaskToReadyList( pxTCB );
000082  6ae0              LDR      r0,[r4,#0x2c]
000084  693a              LDR      r2,[r7,#0x10]  ; uxTopReadyPriority
000086  4081              LSLS     r1,r1,r0
000088  4311              ORRS     r1,r1,r2
00008a  6139              STR      r1,[r7,#0x10]  ; uxTopReadyPriority
00008c  eb000080          ADD      r0,r0,r0,LSL #2
000090  eb050080          ADD      r0,r5,r0,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
                  |L34.154|
;;;1538   				}
;;;1539   				else
;;;1540   				{
;;;1541   					mtCOVERAGE_TEST_MARKER();
;;;1542   				}
;;;1543   
;;;1544   				if( xYieldRequired != pdFALSE )
00009a  b13e              CBZ      r6,|L34.172|
;;;1545   				{
;;;1546   					taskYIELD_IF_USING_PREEMPTION();
00009c  4910              LDR      r1,|L34.224|
00009e  f04f5080          MOV      r0,#0x10000000
0000a2  6008              STR      r0,[r1,#0]
0000a4  f3bf8f4f          DSB      
0000a8  f3bf8f6f          ISB      
                  |L34.172|
;;;1547   				}
;;;1548   				else
;;;1549   				{
;;;1550   					mtCOVERAGE_TEST_MARKER();
;;;1551   				}
;;;1552   
;;;1553   				/* Remove compiler warning about unused variables when the port
;;;1554   				optimised task selection is not being used. */
;;;1555   				( void ) uxPriorityUsedOnEntry;
;;;1556   			}
;;;1557   		}
;;;1558   		taskEXIT_CRITICAL();
0000ac  e8bd41f0          POP      {r4-r8,lr}
0000b0  f7ffbffe          B.W      vPortExitCritical
;;;1559   	}
;;;1560   
                          ENDP

                  |L34.180|
0000b4  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000b8  72656552
0000bc  544f535c
0000c0  7461736b
0000c4  732e6300
                  |L34.200|
0000c8  4572726f          DCB      "Error:%s,%d\r\n",0
0000cc  723a2573
0000d0  2c25640d
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L34.216|
                          DCD      ||.data||
                  |L34.220|
                          DCD      ||.bss||
                  |L34.224|
                          DCD      0xe000ed04

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskResume PROC
;;;1701   
;;;1702   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1703   	{
;;;1704   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000002  0004              MOVS     r4,r0
000004  d02b              BEQ      |L35.94|
;;;1705   
;;;1706   		/* It does not make sense to resume the calling task. */
;;;1707   		configASSERT( xTaskToResume );
;;;1708   
;;;1709   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1710   		currently executing task. */
;;;1711   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
000006  4d1a              LDR      r5,|L35.112|
000008  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000a  4284              CMP      r4,r0
00000c  d02f              BEQ      |L35.110|
;;;1712   		{
;;;1713   			taskENTER_CRITICAL();
00000e  f7fffffe          BL       vPortEnterCritical
;;;1714   			{
;;;1715   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       prvTaskIsTaskSuspended
000018  b1e8              CBZ      r0,|L35.86|
;;;1716   				{
;;;1717   					traceTASK_RESUME( pxTCB );
;;;1718   
;;;1719   					/* As we are in a critical section we can access the ready
;;;1720   					lists even if the scheduler is suspended. */
;;;1721   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
00001a  1d20              ADDS     r0,r4,#4
00001c  f7fffffe          BL       uxListRemove
;;;1722   					prvAddTaskToReadyList( pxTCB );
000020  6ae0              LDR      r0,[r4,#0x2c]
000022  2101              MOVS     r1,#1
000024  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000026  4081              LSLS     r1,r1,r0
000028  4311              ORRS     r1,r1,r2
00002a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00002c  4911              LDR      r1,|L35.116|
00002e  eb000080          ADD      r0,r0,r0,LSL #2
000032  eb010080          ADD      r0,r1,r0,LSL #2
000036  1d21              ADDS     r1,r4,#4
000038  f7fffffe          BL       vListInsertEnd
;;;1723   
;;;1724   					/* We may have just resumed a higher priority task. */
;;;1725   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00003c  6ae0              LDR      r0,[r4,#0x2c]
00003e  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000040  6ac9              LDR      r1,[r1,#0x2c]
000042  4288              CMP      r0,r1
000044  d307              BCC      |L35.86|
;;;1726   					{
;;;1727   						/* This yield may not cause the task just resumed to run,
;;;1728   						but will leave the lists in the correct state for the
;;;1729   						next yield. */
;;;1730   						taskYIELD_IF_USING_PREEMPTION();
000046  490c              LDR      r1,|L35.120|
000048  f04f5080          MOV      r0,#0x10000000
00004c  6008              STR      r0,[r1,#0]
00004e  f3bf8f4f          DSB      
000052  f3bf8f6f          ISB      
                  |L35.86|
;;;1731   					}
;;;1732   					else
;;;1733   					{
;;;1734   						mtCOVERAGE_TEST_MARKER();
;;;1735   					}
;;;1736   				}
;;;1737   				else
;;;1738   				{
;;;1739   					mtCOVERAGE_TEST_MARKER();
;;;1740   				}
;;;1741   			}
;;;1742   			taskEXIT_CRITICAL();
000056  e8bd4070          POP      {r4-r6,lr}
00005a  f7ffbffe          B.W      vPortExitCritical
                  |L35.94|
00005e  e8bd4070          POP      {r4-r6,lr}            ;1707
000062  f24062ab          MOV      r2,#0x6ab             ;1707
000066  a105              ADR      r1,|L35.124|
000068  a009              ADR      r0,|L35.144|
00006a  f7ffbffe          B.W      __2printf
                  |L35.110|
;;;1743   		}
;;;1744   		else
;;;1745   		{
;;;1746   			mtCOVERAGE_TEST_MARKER();
;;;1747   		}
;;;1748   	}
00006e  bd70              POP      {r4-r6,pc}
;;;1749   
                          ENDP

                  |L35.112|
                          DCD      ||.data||
                  |L35.116|
                          DCD      ||.bss||
                  |L35.120|
                          DCD      0xe000ed04
                  |L35.124|
00007c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000080  72656552
000084  544f535c
000088  7461736b
00008c  732e6300
                  |L35.144|
000090  4572726f          DCB      "Error:%s,%d\r\n",0
000094  723a2573
000098  2c25640d
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.vTaskSetTaskNumber||, CODE, READONLY, ALIGN=1

                  vTaskSetTaskNumber PROC
;;;3106   
;;;3107   	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
000000  2800              CMP      r0,#0
;;;3108   	{
000002  d000              BEQ      |L36.6|
;;;3109   	TCB_t *pxTCB;
;;;3110   
;;;3111   		if( xTask != NULL )
;;;3112   		{
;;;3113   			pxTCB = ( TCB_t * ) xTask;
;;;3114   			pxTCB->uxTaskNumber = uxHandle;
000004  64c1              STR      r1,[r0,#0x4c]
                  |L36.6|
;;;3115   		}
;;;3116   	}
000006  4770              BX       lr
;;;3117   
                          ENDP


                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskSetTimeOutState PROC
;;;3006   
;;;3007   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;3008   {
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L37.18|
;;;3009   	configASSERT( pxTimeOut );
000006  f64032c1          MOV      r2,#0xbc1
00000a  a105              ADR      r1,|L37.32|
00000c  a009              ADR      r0,|L37.52|
00000e  f7fffffe          BL       __2printf
                  |L37.18|
;;;3010   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000012  480c              LDR      r0,|L37.68|
000014  6a01              LDR      r1,[r0,#0x20]  ; xNumOfOverflows
;;;3011   	pxTimeOut->xTimeOnEntering = xTickCount;
000016  6021              STR      r1,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
00001a  6060              STR      r0,[r4,#4]
;;;3012   }
00001c  bd10              POP      {r4,pc}
;;;3013   /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L37.32|
000020  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000024  72656552
000028  544f535c
00002c  7461736b
000030  732e6300
                  |L37.52|
000034  4572726f          DCB      "Error:%s,%d\r\n",0
000038  723a2573
00003c  2c25640d
000040  0a00    
000042  00                DCB      0
000043  00                DCB      0
                  |L37.68|
                          DCD      ||.data||

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskStartScheduler PROC
;;;1825   
;;;1826   void vTaskStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;1827   {
;;;1828   BaseType_t xReturn;
;;;1829   
;;;1830   	/* Add the idle task at the lowest priority. */
;;;1831   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1832   	{
;;;1833   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1834   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1835   		uint32_t ulIdleTaskStackSize;
;;;1836   
;;;1837   		/* The Idle task is created using user provided RAM - obtain the
;;;1838   		address of the RAM then create the idle task. */
;;;1839   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1840   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1841   												"IDLE",
;;;1842   												ulIdleTaskStackSize,
;;;1843   												( void * ) NULL,
;;;1844   												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1845   												pxIdleTaskStackBuffer,
;;;1846   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1847   
;;;1848   		if( xIdleTaskHandle != NULL )
;;;1849   		{
;;;1850   			xReturn = pdPASS;
;;;1851   		}
;;;1852   		else
;;;1853   		{
;;;1854   			xReturn = pdFAIL;
;;;1855   		}
;;;1856   	}
;;;1857   	#else
;;;1858   	{
;;;1859   		/* The Idle task is being created using dynamically allocated RAM. */
;;;1860   		xReturn = xTaskCreate(	prvIdleTask,
000002  4818              LDR      r0,|L38.100|
000004  2400              MOVS     r4,#0
000006  e9cd4000          STRD     r4,r0,[sp,#0]
00000a  4623              MOV      r3,r4
00000c  2282              MOVS     r2,#0x82
00000e  a116              ADR      r1,|L38.104|
000010  4817              LDR      r0,|L38.112|
000012  f7fffffe          BL       xTaskCreate
;;;1861   								"IDLE", configMINIMAL_STACK_SIZE,
;;;1862   								( void * ) NULL,
;;;1863   								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1864   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1865   	}
;;;1866   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;1867   
;;;1868   	#if ( configUSE_TIMERS == 1 )
;;;1869   	{
;;;1870   		if( xReturn == pdPASS )
000016  2801              CMP      r0,#1
000018  d103              BNE      |L38.34|
;;;1871   		{
;;;1872   			xReturn = xTimerCreateTimerTask();
00001a  f7fffffe          BL       xTimerCreateTimerTask
;;;1873   		}
;;;1874   		else
;;;1875   		{
;;;1876   			mtCOVERAGE_TEST_MARKER();
;;;1877   		}
;;;1878   	}
;;;1879   	#endif /* configUSE_TIMERS */
;;;1880   
;;;1881   	if( xReturn == pdPASS )
00001e  2801              CMP      r0,#1
000020  d00a              BEQ      |L38.56|
                  |L38.34|
000022  1c40              ADDS     r0,r0,#1              ;1872
;;;1882   	{
;;;1883   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1884   		before or during the call to xPortStartScheduler().  The stacks of
;;;1885   		the created tasks contain a status word with interrupts switched on
;;;1886   		so interrupts will automatically get re-enabled when the first task
;;;1887   		starts to run. */
;;;1888   		portDISABLE_INTERRUPTS();
;;;1889   
;;;1890   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1891   		{
;;;1892   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1893   			structure specific to the task that will run first. */
;;;1894   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1895   		}
;;;1896   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1897   
;;;1898   		xNextTaskUnblockTime = portMAX_DELAY;
;;;1899   		xSchedulerRunning = pdTRUE;
;;;1900   		xTickCount = ( TickType_t ) 0U;
;;;1901   
;;;1902   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1903   		macro must be defined to configure the timer/counter used to generate
;;;1904   		the run time counter time base. */
;;;1905   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1906   
;;;1907   		/* Setting up the timer tick is hardware specific and thus in the
;;;1908   		portable interface. */
;;;1909   		if( xPortStartScheduler() != pdFALSE )
;;;1910   		{
;;;1911   			/* Should not reach here as if the scheduler is running the
;;;1912   			function will not return. */
;;;1913   		}
;;;1914   		else
;;;1915   		{
;;;1916   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1917   		}
;;;1918   	}
;;;1919   	else
;;;1920   	{
;;;1921   		/* This line will only be reached if the kernel could not be started,
;;;1922   		because there was not enough FreeRTOS heap to create the idle task
;;;1923   		or the timer task. */
;;;1924   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
000024  d11d              BNE      |L38.98|
000026  b002              ADD      sp,sp,#8
000028  f2407284          MOV      r2,#0x784
00002c  e8bd4010          POP      {r4,lr}
000030  a110              ADR      r1,|L38.116|
000032  a015              ADR      r0,|L38.136|
000034  f7ffbffe          B.W      __2printf
                  |L38.56|
000038  2050              MOVS     r0,#0x50
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  4807              LDR      r0,|L38.100|
000048  f04f31ff          MOV      r1,#0xffffffff        ;1898
00004c  382c              SUBS     r0,r0,#0x2c           ;1898
00004e  6281              STR      r1,[r0,#0x28]         ;1898  ; xNextTaskUnblockTime
000050  2101              MOVS     r1,#1                 ;1899
000052  6141              STR      r1,[r0,#0x14]         ;1899  ; xSchedulerRunning
000054  60c4              STR      r4,[r0,#0xc]          ;1900  ; xTickCount
000056  f7fffffe          BL       ConfigureTimeForRunTimeStats
00005a  e8bd401c          POP      {r2-r4,lr}            ;1909
00005e  f7ffbffe          B.W      xPortStartScheduler
                  |L38.98|
;;;1925   	}
;;;1926   
;;;1927   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;1928   	meaning xIdleTaskHandle is not used anywhere else. */
;;;1929   	( void ) xIdleTaskHandle;
;;;1930   }
000062  bd1c              POP      {r2-r4,pc}
;;;1931   /*-----------------------------------------------------------*/
                          ENDP

                  |L38.100|
                          DCD      ||.data||+0x2c
                  |L38.104|
000068  49444c45          DCB      "IDLE",0
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L38.112|
                          DCD      prvIdleTask
                  |L38.116|
000074  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000078  72656552
00007c  544f535c
000080  7461736b
000084  732e6300
                  |L38.136|
000088  4572726f          DCB      "Error:%s,%d\r\n",0
00008c  723a2573
000090  2c25640d
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskSuspend PROC
;;;1565   
;;;1566   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1567   	{
000002  4604              MOV      r4,r0
;;;1568   	TCB_t *pxTCB;
;;;1569   
;;;1570   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1571   		{
;;;1572   			/* If null is passed in here then it is the running task that is
;;;1573   			being suspended. */
;;;1574   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  4d24              LDR      r5,|L39.156|
00000a  b904              CBNZ     r4,|L39.14|
00000c  682c              LDR      r4,[r5,#0]  ; pxCurrentTCB
                  |L39.14|
;;;1575   
;;;1576   			traceTASK_SUSPEND( pxTCB );
;;;1577   
;;;1578   			/* Remove task from the ready/delayed list and place in the
;;;1579   			suspended list. */
;;;1580   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
000014  b958              CBNZ     r0,|L39.46|
;;;1581   			{
;;;1582   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4a21              LDR      r2,|L39.160|
00001a  eb000180          ADD      r1,r0,r0,LSL #2
00001e  f8521021          LDR      r1,[r2,r1,LSL #2]
000022  b921              CBNZ     r1,|L39.46|
000024  2101              MOVS     r1,#1
000026  4081              LSLS     r1,r1,r0
000028  6928              LDR      r0,[r5,#0x10]  ; uxTopReadyPriority
00002a  4388              BICS     r0,r0,r1
00002c  6128              STR      r0,[r5,#0x10]  ; uxTopReadyPriority
                  |L39.46|
;;;1583   			}
;;;1584   			else
;;;1585   			{
;;;1586   				mtCOVERAGE_TEST_MARKER();
;;;1587   			}
;;;1588   
;;;1589   			/* Is the task waiting on an event also? */
;;;1590   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  b118              CBZ      r0,|L39.58|
;;;1591   			{
;;;1592   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000032  f1040018          ADD      r0,r4,#0x18
000036  f7fffffe          BL       uxListRemove
                  |L39.58|
;;;1593   			}
;;;1594   			else
;;;1595   			{
;;;1596   				mtCOVERAGE_TEST_MARKER();
;;;1597   			}
;;;1598   
;;;1599   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
00003a  1d21              ADDS     r1,r4,#4
00003c  4819              LDR      r0,|L39.164|
00003e  f7fffffe          BL       vListInsertEnd
;;;1600   		}
;;;1601   		taskEXIT_CRITICAL();
000042  f7fffffe          BL       vPortExitCritical
;;;1602   
;;;1603   		if( xSchedulerRunning != pdFALSE )
000046  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000048  b128              CBZ      r0,|L39.86|
;;;1604   		{
;;;1605   			/* Reset the next expected unblock time in case it referred to the
;;;1606   			task that is now in the Suspended state. */
;;;1607   			taskENTER_CRITICAL();
00004a  f7fffffe          BL       vPortEnterCritical
;;;1608   			{
;;;1609   				prvResetNextTaskUnblockTime();
00004e  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1610   			}
;;;1611   			taskEXIT_CRITICAL();
000052  f7fffffe          BL       vPortExitCritical
                  |L39.86|
;;;1612   		}
;;;1613   		else
;;;1614   		{
;;;1615   			mtCOVERAGE_TEST_MARKER();
;;;1616   		}
;;;1617   
;;;1618   		if( pxTCB == pxCurrentTCB )
000056  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
000058  4284              CMP      r4,r0
00005a  d111              BNE      |L39.128|
;;;1619   		{
;;;1620   			if( xSchedulerRunning != pdFALSE )
00005c  6968              LDR      r0,[r5,#0x14]  ; xSchedulerRunning
00005e  b180              CBZ      r0,|L39.130|
;;;1621   			{
;;;1622   				/* The current task has just been suspended. */
;;;1623   				configASSERT( uxSchedulerSuspended == 0 );
000060  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000062  b128              CBZ      r0,|L39.112|
000064  f2406257          MOV      r2,#0x657
000068  a10f              ADR      r1,|L39.168|
00006a  a014              ADR      r0,|L39.188|
00006c  f7fffffe          BL       __2printf
                  |L39.112|
;;;1624   				portYIELD_WITHIN_API();
000070  4916              LDR      r1,|L39.204|
000072  f04f5080          MOV      r0,#0x10000000
000076  6008              STR      r0,[r1,#0]
000078  f3bf8f4f          DSB      
00007c  f3bf8f6f          ISB      
                  |L39.128|
;;;1625   			}
;;;1626   			else
;;;1627   			{
;;;1628   				/* The scheduler is not running, but the task that was pointed
;;;1629   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1630   				must be adjusted to point to a different task. */
;;;1631   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
;;;1632   				{
;;;1633   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1634   					NULL so when the next task is created pxCurrentTCB will
;;;1635   					be set to point to it no matter what its relative priority
;;;1636   					is. */
;;;1637   					pxCurrentTCB = NULL;
;;;1638   				}
;;;1639   				else
;;;1640   				{
;;;1641   					vTaskSwitchContext();
;;;1642   				}
;;;1643   			}
;;;1644   		}
;;;1645   		else
;;;1646   		{
;;;1647   			mtCOVERAGE_TEST_MARKER();
;;;1648   		}
;;;1649   	}
000080  bd70              POP      {r4-r6,pc}
                  |L39.130|
000082  4808              LDR      r0,|L39.164|
000084  68a9              LDR      r1,[r5,#8]            ;1631  ; uxCurrentNumberOfTasks
000086  6800              LDR      r0,[r0,#0]            ;1631  ; xSuspendedTaskList
000088  4288              CMP      r0,r1                 ;1631
00008a  d102              BNE      |L39.146|
00008c  2000              MOVS     r0,#0                 ;1637
00008e  6028              STR      r0,[r5,#0]            ;1637  ; pxCurrentTCB
000090  bd70              POP      {r4-r6,pc}
                  |L39.146|
000092  e8bd4070          POP      {r4-r6,lr}            ;1641
000096  f7ffbffe          B.W      vTaskSwitchContext
;;;1650   
                          ENDP

00009a  0000              DCW      0x0000
                  |L39.156|
                          DCD      ||.data||
                  |L39.160|
                          DCD      ||.bss||
                  |L39.164|
                          DCD      ||.bss||+0x2d0
                  |L39.168|
0000a8  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000ac  72656552
0000b0  544f535c
0000b4  7461736b
0000b8  732e6300
                  |L39.188|
0000bc  4572726f          DCB      "Error:%s,%d\r\n",0
0000c0  723a2573
0000c4  2c25640d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L39.204|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1943   
;;;1944   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L40.12|
;;;1945   {
;;;1946   	/* A critical section is not required as the variable is of type
;;;1947   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1948   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1949   	http://goo.gl/wu4acr */
;;;1950   	++uxSchedulerSuspended;
000002  6b01              LDR      r1,[r0,#0x30]  ; uxSchedulerSuspended
000004  1c49              ADDS     r1,r1,#1
000006  6301              STR      r1,[r0,#0x30]  ; uxSchedulerSuspended
;;;1951   }
000008  4770              BX       lr
;;;1952   /*----------------------------------------------------------*/
                          ENDP

00000a  0000              DCW      0x0000
                  |L40.12|
                          DCD      ||.data||

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskSwitchContext PROC
;;;2760   
;;;2761   void vTaskSwitchContext( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2762   {
;;;2763   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  4c1a              LDR      r4,|L41.108|
000004  6b20              LDR      r0,[r4,#0x30]  ; uxSchedulerSuspended
000006  b110              CBZ      r0,|L41.14|
;;;2764   	{
;;;2765   		/* The scheduler is currently suspended - do not allow a context
;;;2766   		switch. */
;;;2767   		xYieldPending = pdTRUE;
000008  2001              MOVS     r0,#1
00000a  61e0              STR      r0,[r4,#0x1c]  ; xYieldPending
;;;2768   	}
;;;2769   	else
;;;2770   	{
;;;2771   		xYieldPending = pdFALSE;
;;;2772   		traceTASK_SWITCHED_OUT();
;;;2773   
;;;2774   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2775   		{
;;;2776   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2777   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2778   				#else
;;;2779   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2780   				#endif
;;;2781   
;;;2782   				/* Add the amount of time the task has been running to the
;;;2783   				accumulated time so far.  The time the task started running was
;;;2784   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2785   				protection here so count values are only valid until the timer
;;;2786   				overflows.  The guard against negative values is to protect
;;;2787   				against suspect run time stat counter implementations - which
;;;2788   				are provided by the application, not the kernel. */
;;;2789   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2790   				{
;;;2791   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2792   				}
;;;2793   				else
;;;2794   				{
;;;2795   					mtCOVERAGE_TEST_MARKER();
;;;2796   				}
;;;2797   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2798   		}
;;;2799   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2800   
;;;2801   		/* Check for stack overflow, if configured. */
;;;2802   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2803   
;;;2804   		/* Select a new task to run using either the generic C or port
;;;2805   		optimised asm code. */
;;;2806   		taskSELECT_HIGHEST_PRIORITY_TASK();
;;;2807   		traceTASK_SWITCHED_IN();
;;;2808   
;;;2809   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2810   		{
;;;2811   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2812   			structure specific to this task. */
;;;2813   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2814   		}
;;;2815   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2816   	}
;;;2817   }
00000c  bd70              POP      {r4-r6,pc}
                  |L41.14|
00000e  2000              MOVS     r0,#0                 ;2771
000010  61e0              STR      r0,[r4,#0x1c]         ;2771  ; xYieldPending
000012  4917              LDR      r1,|L41.112|
000014  6808              LDR      r0,[r1,#0]            ;2779  ; FreeRTOSRunTimeTicks
000016  6849              LDR      r1,[r1,#4]            ;2779  ; FreeRTOSRunTimeTicks
000018  63a0              STR      r0,[r4,#0x38]         ;2789  ; ulTotalRunTime
00001a  6b62              LDR      r2,[r4,#0x34]         ;2789  ; ulTaskSwitchedInTime
00001c  4290              CMP      r0,r2                 ;2789
00001e  d904              BLS      |L41.42|
000020  6821              LDR      r1,[r4,#0]            ;2791  ; pxCurrentTCB
000022  1a82              SUBS     r2,r0,r2              ;2791
000024  6d8b              LDR      r3,[r1,#0x58]         ;2791
000026  441a              ADD      r2,r2,r3              ;2791
000028  658a              STR      r2,[r1,#0x58]         ;2791
                  |L41.42|
00002a  6360              STR      r0,[r4,#0x34]         ;2806  ; ulTaskSwitchedInTime
00002c  6920              LDR      r0,[r4,#0x10]         ;2806  ; uxTopReadyPriority
00002e  4e11              LDR      r6,|L41.116|
000030  fab0f080          CLZ      r0,r0                 ;2806
000034  f1c0001f          RSB      r0,r0,#0x1f           ;2806
000038  eb000580          ADD      r5,r0,r0,LSL #2       ;2806
00003c  f8560025          LDR      r0,[r6,r5,LSL #2]     ;2806
000040  b928              CBNZ     r0,|L41.78|
000042  f64022f6          MOV      r2,#0xaf6             ;2806
000046  a10c              ADR      r1,|L41.120|
000048  a010              ADR      r0,|L41.140|
00004a  f7fffffe          BL       __2printf
                  |L41.78|
00004e  eb060085          ADD      r0,r6,r5,LSL #2       ;2806
000052  f1000208          ADD      r2,r0,#8              ;2806
000056  6841              LDR      r1,[r0,#4]            ;2806
000058  6849              LDR      r1,[r1,#4]            ;2806
00005a  6041              STR      r1,[r0,#4]            ;2806
00005c  4291              CMP      r1,r2                 ;2806
00005e  d101              BNE      |L41.100|
000060  6849              LDR      r1,[r1,#4]            ;2806
000062  6041              STR      r1,[r0,#4]            ;2806
                  |L41.100|
000064  68c8              LDR      r0,[r1,#0xc]          ;2806
000066  6020              STR      r0,[r4,#0]            ;2806  ; pxCurrentTCB
000068  bd70              POP      {r4-r6,pc}
;;;2818   /*-----------------------------------------------------------*/
                          ENDP

00006a  0000              DCW      0x0000
                  |L41.108|
                          DCD      ||.data||
                  |L41.112|
                          DCD      FreeRTOSRunTimeTicks
                  |L41.116|
                          DCD      ||.bss||
                  |L41.120|
000078  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
00007c  72656552
000080  544f535c
000084  7461736b
000088  732e6300
                  |L41.140|
00008c  4572726f          DCB      "Error:%s,%d\r\n",0
000090  723a2573
000094  2c25640d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xTaskCheckForTimeOut PROC
;;;3014   
;;;3015   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3016   {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d105              BNE      |L42.20|
;;;3017   BaseType_t xReturn;
;;;3018   
;;;3019   	configASSERT( pxTimeOut );
000008  f64032cb          MOV      r2,#0xbcb
00000c  a114              ADR      r1,|L42.96|
00000e  a019              ADR      r0,|L42.116|
000010  f7fffffe          BL       __2printf
                  |L42.20|
;;;3020   	configASSERT( pxTicksToWait );
000014  b92d              CBNZ     r5,|L42.34|
000016  f64032cc          MOV      r2,#0xbcc
00001a  a111              ADR      r1,|L42.96|
00001c  a015              ADR      r0,|L42.116|
00001e  f7fffffe          BL       __2printf
                  |L42.34|
;;;3021   
;;;3022   	taskENTER_CRITICAL();
000022  f7fffffe          BL       vPortEnterCritical
;;;3023   	{
;;;3024   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3025   		const TickType_t xConstTickCount = xTickCount;
000026  4a17              LDR      r2,|L42.132|
000028  68d0              LDR      r0,[r2,#0xc]  ; xTickCount
;;;3026   
;;;3027   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3028   			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
;;;3029   			{
;;;3030   				/* The delay was aborted, which is not the same as a time out,
;;;3031   				but has the same result. */
;;;3032   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3033   				xReturn = pdTRUE;
;;;3034   			}
;;;3035   			else
;;;3036   		#endif
;;;3037   
;;;3038   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3039   			if( *pxTicksToWait == portMAX_DELAY )
00002a  6829              LDR      r1,[r5,#0]
00002c  1c4b              ADDS     r3,r1,#1
00002e  d00f              BEQ      |L42.80|
;;;3040   			{
;;;3041   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3042   				specified is the maximum block time then the task should block
;;;3043   				indefinitely, and therefore never time out. */
;;;3044   				xReturn = pdFALSE;
;;;3045   			}
;;;3046   			else
;;;3047   		#endif
;;;3048   
;;;3049   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
000030  6823              LDR      r3,[r4,#0]
000032  6a12              LDR      r2,[r2,#0x20]  ; xNumOfOverflows
000034  4293              CMP      r3,r2
000036  d002              BEQ      |L42.62|
000038  6862              LDR      r2,[r4,#4]
00003a  4282              CMP      r2,r0
00003c  d90a              BLS      |L42.84|
                  |L42.62|
;;;3050   		{
;;;3051   			/* The tick count is greater than the time at which
;;;3052   			vTaskSetTimeout() was called, but has also overflowed since
;;;3053   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3054   			around and gone past again. This passed since vTaskSetTimeout()
;;;3055   			was called. */
;;;3056   			xReturn = pdTRUE;
;;;3057   		}
;;;3058   		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
00003e  6862              LDR      r2,[r4,#4]
000040  1a80              SUBS     r0,r0,r2
000042  4288              CMP      r0,r1
000044  d206              BCS      |L42.84|
;;;3059   		{
;;;3060   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3061   			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
000046  1a08              SUBS     r0,r1,r0
;;;3062   			vTaskSetTimeOutState( pxTimeOut );
000048  6028              STR      r0,[r5,#0]
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       vTaskSetTimeOutState
                  |L42.80|
000050  2400              MOVS     r4,#0                 ;3044
000052  e000              B        |L42.86|
                  |L42.84|
;;;3063   			xReturn = pdFALSE;
;;;3064   		}
;;;3065   		else
;;;3066   		{
;;;3067   			xReturn = pdTRUE;
000054  2401              MOVS     r4,#1
                  |L42.86|
;;;3068   		}
;;;3069   	}
;;;3070   	taskEXIT_CRITICAL();
000056  f7fffffe          BL       vPortExitCritical
;;;3071   
;;;3072   	return xReturn;
00005a  4620              MOV      r0,r4
;;;3073   }
00005c  bd70              POP      {r4-r6,pc}
;;;3074   /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L42.96|
000060  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000064  72656552
000068  544f535c
00006c  7461736b
000070  732e6300
                  |L42.116|
000074  4572726f          DCB      "Error:%s,%d\r\n",0
000078  723a2573
00007c  2c25640d
000080  0a00    
000082  00                DCB      0
000083  00                DCB      0
                  |L42.132|
                          DCD      ||.data||

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=1

                  xTaskCreate PROC
;;;675    
;;;676    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;677    							const char * const pcName,
;;;678    							const uint16_t usStackDepth,
;;;679    							void * const pvParameters,
;;;680    							UBaseType_t uxPriority,
;;;681    							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;682    	{
000004  4683              MOV      r11,r0
000006  e9dd870e          LDRD     r8,r7,[sp,#0x38]
00000a  4699              MOV      r9,r3
00000c  4616              MOV      r6,r2
00000e  468a              MOV      r10,r1
;;;683    	TCB_t *pxNewTCB;
;;;684    	BaseType_t xReturn;
;;;685    
;;;686    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;687    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;688    		the TCB then the stack. */
;;;689    		#if( portSTACK_GROWTH > 0 )
;;;690    		{
;;;691    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;692    			the implementation of the port malloc function and whether or not static
;;;693    			allocation is being used. */
;;;694    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;695    
;;;696    			if( pxNewTCB != NULL )
;;;697    			{
;;;698    				/* Allocate space for the stack used by the task being created.
;;;699    				The base of the stack memory stored in the TCB so the task can
;;;700    				be deleted later if required. */
;;;701    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;702    
;;;703    				if( pxNewTCB->pxStack == NULL )
;;;704    				{
;;;705    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;706    					vPortFree( pxNewTCB );
;;;707    					pxNewTCB = NULL;
;;;708    				}
;;;709    			}
;;;710    		}
;;;711    		#else /* portSTACK_GROWTH */
;;;712    		{
;;;713    		StackType_t *pxStack;
;;;714    
;;;715    			/* Allocate space for the stack used by the task being created. */
;;;716    			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000010  0090              LSLS     r0,r2,#2
000012  f7fffffe          BL       pvPortMalloc
000016  0005              MOVS     r5,r0
;;;717    
;;;718    			if( pxStack != NULL )
000018  d01a              BEQ      |L43.80|
;;;719    			{
;;;720    				/* Allocate space for the TCB. */
;;;721    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
00001a  2064              MOVS     r0,#0x64
00001c  f7fffffe          BL       pvPortMalloc
000020  0004              MOVS     r4,r0
;;;722    
;;;723    				if( pxNewTCB != NULL )
000022  d012              BEQ      |L43.74|
;;;724    				{
;;;725    					/* Store the stack location in the TCB. */
;;;726    					pxNewTCB->pxStack = pxStack;
;;;727    				}
;;;728    				else
;;;729    				{
;;;730    					/* The stack cannot be used as the TCB was not created.  Free
;;;731    					it again. */
;;;732    					vPortFree( pxStack );
;;;733    				}
;;;734    			}
;;;735    			else
;;;736    			{
;;;737    				pxNewTCB = NULL;
;;;738    			}
;;;739    		}
;;;740    		#endif /* portSTACK_GROWTH */
;;;741    
;;;742    		if( pxNewTCB != NULL )
;;;743    		{
;;;744    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
;;;745    			{
;;;746    				/* Tasks can be created statically or dynamically, so note this
;;;747    				task was created dynamically in case it is later deleted. */
;;;748    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;749    			}
;;;750    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;751    
;;;752    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
000024  6325              STR      r5,[r4,#0x30]
000026  2100              MOVS     r1,#0
000028  e9cd4102          STRD     r4,r1,[sp,#8]
00002c  e9cd8700          STRD     r8,r7,[sp,#0]
000030  464b              MOV      r3,r9
000032  4632              MOV      r2,r6
000034  4651              MOV      r1,r10
000036  4658              MOV      r0,r11
000038  f7fffffe          BL       prvInitialiseNewTask
;;;753    			prvAddNewTaskToReadyList( pxNewTCB );
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       prvAddNewTaskToReadyList
;;;754    			xReturn = pdPASS;
000042  2001              MOVS     r0,#1
                  |L43.68|
;;;755    		}
;;;756    		else
;;;757    		{
;;;758    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;759    		}
;;;760    
;;;761    		return xReturn;
;;;762    	}
000044  b004              ADD      sp,sp,#0x10
000046  e8bd9ff0          POP      {r4-r12,pc}
                  |L43.74|
00004a  4628              MOV      r0,r5                 ;732
00004c  f7fffffe          BL       vPortFree
                  |L43.80|
000050  f04f30ff          MOV      r0,#0xffffffff        ;758
000054  e7f6              B        |L43.68|
;;;763    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xTaskGenericNotify PROC
;;;4342   
;;;4343   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4344   	{
000004  461f              MOV      r7,r3
000006  4690              MOV      r8,r2
000008  460d              MOV      r5,r1
00000a  0004              MOVS     r4,r0
;;;4345   	TCB_t * pxTCB;
;;;4346   	BaseType_t xReturn = pdPASS;
00000c  f04f0601          MOV      r6,#1
000010  d105              BNE      |L44.30|
;;;4347   	uint8_t ucOriginalNotifyState;
;;;4348   
;;;4349   		configASSERT( xTaskToNotify );
000012  f24102fd          MOV      r2,#0x10fd
000016  a128              ADR      r1,|L44.184|
000018  a02c              ADR      r0,|L44.204|
00001a  f7fffffe          BL       __2printf
                  |L44.30|
;;;4350   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4351   
;;;4352   		taskENTER_CRITICAL();
00001e  f7fffffe          BL       vPortEnterCritical
;;;4353   		{
;;;4354   			if( pulPreviousNotificationValue != NULL )
000022  b10f              CBZ      r7,|L44.40|
;;;4355   			{
;;;4356   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000024  6de0              LDR      r0,[r4,#0x5c]
000026  6038              STR      r0,[r7,#0]
                  |L44.40|
;;;4357   			}
;;;4358   
;;;4359   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000028  f8940060          LDRB     r0,[r4,#0x60]
;;;4360   
;;;4361   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00002c  2102              MOVS     r1,#2
00002e  f8841060          STRB     r1,[r4,#0x60]
;;;4362   
;;;4363   			switch( eAction )
000032  f1b80f05          CMP      r8,#5
000036  d20e              BCS      |L44.86|
000038  e8dff008          TBB      [pc,r8]
00003c  0d03060c          DCB      0x0d,0x03,0x06,0x0c
000040  0a00              DCB      0x0a,0x00
;;;4364   			{
;;;4365   				case eSetBits	:
;;;4366   					pxTCB->ulNotifiedValue |= ulValue;
000042  6de1              LDR      r1,[r4,#0x5c]
000044  4329              ORRS     r1,r1,r5
;;;4367   					break;
000046  e001              B        |L44.76|
;;;4368   
;;;4369   				case eIncrement	:
;;;4370   					( pxTCB->ulNotifiedValue )++;
000048  6de1              LDR      r1,[r4,#0x5c]
00004a  1c49              ADDS     r1,r1,#1
                  |L44.76|
00004c  65e1              STR      r1,[r4,#0x5c]         ;4366
00004e  e002              B        |L44.86|
;;;4371   					break;
;;;4372   
;;;4373   				case eSetValueWithOverwrite	:
;;;4374   					pxTCB->ulNotifiedValue = ulValue;
;;;4375   					break;
;;;4376   
;;;4377   				case eSetValueWithoutOverwrite :
;;;4378   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000050  2802              CMP      r0,#2
000052  d003              BEQ      |L44.92|
;;;4379   					{
;;;4380   						pxTCB->ulNotifiedValue = ulValue;
000054  65e5              STR      r5,[r4,#0x5c]
                  |L44.86|
;;;4381   					}
;;;4382   					else
;;;4383   					{
;;;4384   						/* The value could not be written to the task. */
;;;4385   						xReturn = pdFAIL;
;;;4386   					}
;;;4387   					break;
;;;4388   
;;;4389   				case eNoAction:
;;;4390   					/* The task is being notified without its notify value being
;;;4391   					updated. */
;;;4392   					break;
;;;4393   			}
;;;4394   
;;;4395   			traceTASK_NOTIFY();
;;;4396   
;;;4397   			/* If the task is in the blocked state specifically to wait for a
;;;4398   			notification then unblock it now. */
;;;4399   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000056  2801              CMP      r0,#1
000058  d002              BEQ      |L44.96|
00005a  e028              B        |L44.174|
                  |L44.92|
00005c  2600              MOVS     r6,#0                 ;4385
00005e  e026              B        |L44.174|
                  |L44.96|
;;;4400   			{
;;;4401   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000060  1d20              ADDS     r0,r4,#4
000062  f7fffffe          BL       uxListRemove
;;;4402   				prvAddTaskToReadyList( pxTCB );
000066  4d1d              LDR      r5,|L44.220|
000068  6ae0              LDR      r0,[r4,#0x2c]
00006a  2101              MOVS     r1,#1
00006c  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
00006e  4081              LSLS     r1,r1,r0
000070  4311              ORRS     r1,r1,r2
000072  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000074  491a              LDR      r1,|L44.224|
000076  eb000080          ADD      r0,r0,r0,LSL #2
00007a  eb010080          ADD      r0,r1,r0,LSL #2
00007e  1d21              ADDS     r1,r4,#4
000080  f7fffffe          BL       vListInsertEnd
;;;4403   
;;;4404   				/* The task should not have been on an event list. */
;;;4405   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000084  6aa0              LDR      r0,[r4,#0x28]
000086  b128              CBZ      r0,|L44.148|
000088  f2411235          MOV      r2,#0x1135
00008c  a10a              ADR      r1,|L44.184|
00008e  a00f              ADR      r0,|L44.204|
000090  f7fffffe          BL       __2printf
                  |L44.148|
;;;4406   
;;;4407   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4408   				{
;;;4409   					/* If a task is blocked waiting for a notification then
;;;4410   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4411   					out time.  If the task is unblocked for a reason other than
;;;4412   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4413   					because it will automatically get reset to a new value when
;;;4414   					the tick count equals xNextTaskUnblockTime.  However if
;;;4415   					tickless idling is used it might be more important to enter
;;;4416   					sleep mode at the earliest possible time - so reset
;;;4417   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4418   					earliest possible time. */
;;;4419   					prvResetNextTaskUnblockTime();
;;;4420   				}
;;;4421   				#endif
;;;4422   
;;;4423   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000094  6ae0              LDR      r0,[r4,#0x2c]
000096  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000098  6ac9              LDR      r1,[r1,#0x2c]
00009a  4288              CMP      r0,r1
00009c  d907              BLS      |L44.174|
;;;4424   				{
;;;4425   					/* The notified task has a priority above the currently
;;;4426   					executing task so a yield is required. */
;;;4427   					taskYIELD_IF_USING_PREEMPTION();
00009e  4911              LDR      r1,|L44.228|
0000a0  f04f5080          MOV      r0,#0x10000000
0000a4  6008              STR      r0,[r1,#0]
0000a6  f3bf8f4f          DSB      
0000aa  f3bf8f6f          ISB      
                  |L44.174|
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   			else
;;;4435   			{
;;;4436   				mtCOVERAGE_TEST_MARKER();
;;;4437   			}
;;;4438   		}
;;;4439   		taskEXIT_CRITICAL();
0000ae  f7fffffe          BL       vPortExitCritical
;;;4440   
;;;4441   		return xReturn;
0000b2  4630              MOV      r0,r6
;;;4442   	}
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;4443   
                          ENDP

                  |L44.184|
0000b8  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000bc  72656552
0000c0  544f535c
0000c4  7461736b
0000c8  732e6300
                  |L44.204|
0000cc  4572726f          DCB      "Error:%s,%d\r\n",0
0000d0  723a2573
0000d4  2c25640d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L44.220|
                          DCD      ||.data||
                  |L44.224|
                          DCD      ||.bss||
                  |L44.228|
                          DCD      0xe000ed04

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xTaskGenericNotifyFromISR PROC
;;;4448   
;;;4449   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4450   	{
000004  f8dd9020          LDR      r9,[sp,#0x20]
000008  461f              MOV      r7,r3
00000a  4692              MOV      r10,r2
00000c  460d              MOV      r5,r1
00000e  0004              MOVS     r4,r0
;;;4451   	TCB_t * pxTCB;
;;;4452   	uint8_t ucOriginalNotifyState;
;;;4453   	BaseType_t xReturn = pdPASS;
000010  f04f0801          MOV      r8,#1
000014  d105              BNE      |L45.34|
;;;4454   	UBaseType_t uxSavedInterruptStatus;
;;;4455   
;;;4456   		configASSERT( xTaskToNotify );
000016  f2411268          MOV      r2,#0x1168
00001a  a130              ADR      r1,|L45.220|
00001c  a034              ADR      r0,|L45.240|
00001e  f7fffffe          BL       __2printf
                  |L45.34|
;;;4457   
;;;4458   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4459   		maximum	system call (or maximum API call) interrupt priority.
;;;4460   		Interrupts that are	above the maximum system call priority are keep
;;;4461   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4462   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4463   		is defined in FreeRTOSConfig.h then
;;;4464   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4465   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4466   		been assigned a priority above the configured maximum system call
;;;4467   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4468   		from interrupts	that have been assigned a priority at or (logically)
;;;4469   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4470   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4471   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4472   		provided on the following link:
;;;4473   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4474   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000022  f7fffffe          BL       vPortValidateInterruptPriority
000026  2050              MOVS     r0,#0x50
000028  f3ef8611          MRS      r6,BASEPRI
00002c  f3808811          MSR      BASEPRI,r0
000030  f3bf8f4f          DSB      
000034  f3bf8f6f          ISB      
;;;4475   
;;;4476   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4477   
;;;4478   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4479   		{
;;;4480   			if( pulPreviousNotificationValue != NULL )
000038  b10f              CBZ      r7,|L45.62|
;;;4481   			{
;;;4482   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
00003a  6de0              LDR      r0,[r4,#0x5c]
00003c  6038              STR      r0,[r7,#0]
                  |L45.62|
;;;4483   			}
;;;4484   
;;;4485   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00003e  f8940060          LDRB     r0,[r4,#0x60]
;;;4486   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000042  2102              MOVS     r1,#2
000044  f8841060          STRB     r1,[r4,#0x60]
;;;4487   
;;;4488   			switch( eAction )
000048  f1ba0f05          CMP      r10,#5
00004c  d20e              BCS      |L45.108|
00004e  e8dff00a          TBB      [pc,r10]
000052  0d03              DCB      0x0d,0x03
000054  060c0a00          DCB      0x06,0x0c,0x0a,0x00
;;;4489   			{
;;;4490   				case eSetBits	:
;;;4491   					pxTCB->ulNotifiedValue |= ulValue;
000058  6de1              LDR      r1,[r4,#0x5c]
00005a  4329              ORRS     r1,r1,r5
;;;4492   					break;
00005c  e001              B        |L45.98|
;;;4493   
;;;4494   				case eIncrement	:
;;;4495   					( pxTCB->ulNotifiedValue )++;
00005e  6de1              LDR      r1,[r4,#0x5c]
000060  1c49              ADDS     r1,r1,#1
                  |L45.98|
000062  65e1              STR      r1,[r4,#0x5c]         ;4491
000064  e002              B        |L45.108|
;;;4496   					break;
;;;4497   
;;;4498   				case eSetValueWithOverwrite	:
;;;4499   					pxTCB->ulNotifiedValue = ulValue;
;;;4500   					break;
;;;4501   
;;;4502   				case eSetValueWithoutOverwrite :
;;;4503   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000066  2802              CMP      r0,#2
000068  d003              BEQ      |L45.114|
;;;4504   					{
;;;4505   						pxTCB->ulNotifiedValue = ulValue;
00006a  65e5              STR      r5,[r4,#0x5c]
                  |L45.108|
;;;4506   					}
;;;4507   					else
;;;4508   					{
;;;4509   						/* The value could not be written to the task. */
;;;4510   						xReturn = pdFAIL;
;;;4511   					}
;;;4512   					break;
;;;4513   
;;;4514   				case eNoAction :
;;;4515   					/* The task is being notified without its notify value being
;;;4516   					updated. */
;;;4517   					break;
;;;4518   			}
;;;4519   
;;;4520   			traceTASK_NOTIFY_FROM_ISR();
;;;4521   
;;;4522   			/* If the task is in the blocked state specifically to wait for a
;;;4523   			notification then unblock it now. */
;;;4524   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
00006c  2801              CMP      r0,#1
00006e  d003              BEQ      |L45.120|
000070  e02f              B        |L45.210|
                  |L45.114|
000072  f04f0800          MOV      r8,#0                 ;4510
000076  e02c              B        |L45.210|
                  |L45.120|
;;;4525   			{
;;;4526   				/* The task should not have been on an event list. */
;;;4527   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000078  6aa0              LDR      r0,[r4,#0x28]
00007a  b128              CBZ      r0,|L45.136|
00007c  f24112af          MOV      r2,#0x11af
000080  a116              ADR      r1,|L45.220|
000082  a01b              ADR      r0,|L45.240|
000084  f7fffffe          BL       __2printf
                  |L45.136|
;;;4528   
;;;4529   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000088  4d1d              LDR      r5,|L45.256|
00008a  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00008c  2701              MOVS     r7,#1                 ;4453
00008e  b178              CBZ      r0,|L45.176|
;;;4530   				{
;;;4531   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4532   					prvAddTaskToReadyList( pxTCB );
;;;4533   				}
;;;4534   				else
;;;4535   				{
;;;4536   					/* The delayed and ready lists cannot be accessed, so hold
;;;4537   					this task pending until the scheduler is resumed. */
;;;4538   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000090  f1040118          ADD      r1,r4,#0x18
000094  481b              LDR      r0,|L45.260|
                  |L45.150|
000096  f7fffffe          BL       vListInsertEnd
;;;4539   				}
;;;4540   
;;;4541   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
00009a  6ae0              LDR      r0,[r4,#0x2c]
00009c  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00009e  6ac9              LDR      r1,[r1,#0x2c]
0000a0  4288              CMP      r0,r1
0000a2  d916              BLS      |L45.210|
;;;4542   				{
;;;4543   					/* The notified task has a priority above the currently
;;;4544   					executing task so a yield is required. */
;;;4545   					if( pxHigherPriorityTaskWoken != NULL )
0000a4  f1b90f00          CMP      r9,#0
0000a8  d012              BEQ      |L45.208|
;;;4546   					{
;;;4547   						*pxHigherPriorityTaskWoken = pdTRUE;
0000aa  f8c97000          STR      r7,[r9,#0]
0000ae  e010              B        |L45.210|
                  |L45.176|
0000b0  1d20              ADDS     r0,r4,#4              ;4531
0000b2  f7fffffe          BL       uxListRemove
0000b6  6ae0              LDR      r0,[r4,#0x2c]         ;4532
0000b8  692a              LDR      r2,[r5,#0x10]         ;4532  ; uxTopReadyPriority
0000ba  fa07f100          LSL      r1,r7,r0              ;4532
0000be  4311              ORRS     r1,r1,r2              ;4532
0000c0  6129              STR      r1,[r5,#0x10]         ;4532  ; uxTopReadyPriority
0000c2  eb000180          ADD      r1,r0,r0,LSL #2       ;4532
0000c6  4810              LDR      r0,|L45.264|
0000c8  eb000081          ADD      r0,r0,r1,LSL #2       ;4532
0000cc  1d21              ADDS     r1,r4,#4              ;4532
0000ce  e7e2              B        |L45.150|
                  |L45.208|
;;;4548   					}
;;;4549   					else
;;;4550   					{
;;;4551   						/* Mark that a yield is pending in case the user is not
;;;4552   						using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;4553   						safe FreeRTOS function. */
;;;4554   						xYieldPending = pdTRUE;
0000d0  61ef              STR      r7,[r5,#0x1c]  ; xYieldPending
                  |L45.210|
0000d2  f3868811          MSR      BASEPRI,r6
;;;4555   					}
;;;4556   				}
;;;4557   				else
;;;4558   				{
;;;4559   					mtCOVERAGE_TEST_MARKER();
;;;4560   				}
;;;4561   			}
;;;4562   		}
;;;4563   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4564   
;;;4565   		return xReturn;
0000d6  4640              MOV      r0,r8
;;;4566   	}
0000d8  e8bd87f0          POP      {r4-r10,pc}
;;;4567   
                          ENDP

                  |L45.220|
0000dc  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000e0  72656552
0000e4  544f535c
0000e8  7461736b
0000ec  732e6300
                  |L45.240|
0000f0  4572726f          DCB      "Error:%s,%d\r\n",0
0000f4  723a2573
0000f8  2c25640d
0000fc  0a00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L45.256|
                          DCD      ||.data||
                  |L45.260|
                          DCD      ||.bss||+0x2a8
                  |L45.264|
                          DCD      ||.bss||

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3660   
;;;3661   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4801              LDR      r0,|L46.8|
;;;3662   	{
;;;3663   	TaskHandle_t xReturn;
;;;3664   
;;;3665   		/* A critical section is not required as this is not called from
;;;3666   		an interrupt and the current TCB will always be the same for any
;;;3667   		individual execution thread. */
;;;3668   		xReturn = pxCurrentTCB;
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;3669   
;;;3670   		return xReturn;
;;;3671   	}
000004  4770              BX       lr
;;;3672   
                          ENDP

000006  0000              DCW      0x0000
                  |L46.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3677   
;;;3678   	BaseType_t xTaskGetSchedulerState( void )
000000  4805              LDR      r0,|L47.24|
;;;3679   	{
;;;3680   	BaseType_t xReturn;
;;;3681   
;;;3682   		if( xSchedulerRunning == pdFALSE )
000002  6941              LDR      r1,[r0,#0x14]  ; xSchedulerRunning
000004  b119              CBZ      r1,|L47.14|
;;;3683   		{
;;;3684   			xReturn = taskSCHEDULER_NOT_STARTED;
;;;3685   		}
;;;3686   		else
;;;3687   		{
;;;3688   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000006  6b00              LDR      r0,[r0,#0x30]  ; uxSchedulerSuspended
000008  b118              CBZ      r0,|L47.18|
;;;3689   			{
;;;3690   				xReturn = taskSCHEDULER_RUNNING;
;;;3691   			}
;;;3692   			else
;;;3693   			{
;;;3694   				xReturn = taskSCHEDULER_SUSPENDED;
00000a  2000              MOVS     r0,#0
;;;3695   			}
;;;3696   		}
;;;3697   
;;;3698   		return xReturn;
;;;3699   	}
00000c  4770              BX       lr
                  |L47.14|
00000e  2001              MOVS     r0,#1                 ;3684
000010  4770              BX       lr
                  |L47.18|
000012  2002              MOVS     r0,#2                 ;3690
000014  4770              BX       lr
;;;3700   
                          ENDP

000016  0000              DCW      0x0000
                  |L47.24|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2126   
;;;2127   TickType_t xTaskGetTickCount( void )
000000  4801              LDR      r0,|L48.8|
;;;2128   {
;;;2129   TickType_t xTicks;
;;;2130   
;;;2131   	/* Critical section required if running on a 16 bit processor. */
;;;2132   	portTICK_TYPE_ENTER_CRITICAL();
;;;2133   	{
;;;2134   		xTicks = xTickCount;
000002  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;2135   	}
;;;2136   	portTICK_TYPE_EXIT_CRITICAL();
;;;2137   
;;;2138   	return xTicks;
;;;2139   }
000004  4770              BX       lr
;;;2140   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L48.8|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2141   
;;;2142   TickType_t xTaskGetTickCountFromISR( void )
000000  b510              PUSH     {r4,lr}
;;;2143   {
;;;2144   TickType_t xReturn;
;;;2145   UBaseType_t uxSavedInterruptStatus;
;;;2146   
;;;2147   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2148   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2149   	above the maximum system call priority are kept permanently enabled, even
;;;2150   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2151   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2152   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2153   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2154   	assigned a priority above the configured maximum system call priority.
;;;2155   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2156   	that have been assigned a priority at or (logically) below the maximum
;;;2157   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2158   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2159   	More information (albeit Cortex-M specific) is provided on the following
;;;2160   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2161   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;2162   
;;;2163   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;2164   	{
;;;2165   		xReturn = xTickCount;
000006  4801              LDR      r0,|L49.12|
000008  68c0              LDR      r0,[r0,#0xc]  ; xTickCount
;;;2166   	}
;;;2167   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2168   
;;;2169   	return xReturn;
;;;2170   }
00000a  bd10              POP      {r4,pc}
;;;2171   /*-----------------------------------------------------------*/
                          ENDP

                  |L49.12|
                          DCD      ||.data||

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTaskIncrementTick PROC
;;;2498   
;;;2499   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2500   {
;;;2501   TCB_t * pxTCB;
;;;2502   TickType_t xItemValue;
;;;2503   BaseType_t xSwitchRequired = pdFALSE;
;;;2504   
;;;2505   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2506   	Increments the tick then checks to see if the new tick value will cause any
;;;2507   	tasks to be unblocked. */
;;;2508   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2509   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000004  4f2d              LDR      r7,|L50.188|
000006  2600              MOVS     r6,#0                 ;2503
000008  6b38              LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
00000a  b140              CBZ      r0,|L50.30|
;;;2510   	{
;;;2511   		/* Minor optimisation.  The tick count cannot change in this
;;;2512   		block. */
;;;2513   		const TickType_t xConstTickCount = xTickCount + 1;
;;;2514   
;;;2515   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2516   		delayed lists if it wraps to 0. */
;;;2517   		xTickCount = xConstTickCount;
;;;2518   
;;;2519   		if( xConstTickCount == ( TickType_t ) 0U )
;;;2520   		{
;;;2521   			taskSWITCH_DELAYED_LISTS();
;;;2522   		}
;;;2523   		else
;;;2524   		{
;;;2525   			mtCOVERAGE_TEST_MARKER();
;;;2526   		}
;;;2527   
;;;2528   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2529   		the	queue in the order of their wake time - meaning once one task
;;;2530   		has been found whose block time has not expired there is no need to
;;;2531   		look any further down the list. */
;;;2532   		if( xConstTickCount >= xNextTaskUnblockTime )
;;;2533   		{
;;;2534   			for( ;; )
;;;2535   			{
;;;2536   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
;;;2537   				{
;;;2538   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2539   					to the maximum possible value so it is extremely
;;;2540   					unlikely that the
;;;2541   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2542   					next time through. */
;;;2543   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;2544   					break;
;;;2545   				}
;;;2546   				else
;;;2547   				{
;;;2548   					/* The delayed list is not empty, get the value of the
;;;2549   					item at the head of the delayed list.  This is the time
;;;2550   					at which the task at the head of the delayed list must
;;;2551   					be removed from the Blocked state. */
;;;2552   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
;;;2553   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
;;;2554   
;;;2555   					if( xConstTickCount < xItemValue )
;;;2556   					{
;;;2557   						/* It is not time to unblock this item yet, but the
;;;2558   						item value is the time at which the task at the head
;;;2559   						of the blocked list must be removed from the Blocked
;;;2560   						state -	so record the item value in
;;;2561   						xNextTaskUnblockTime. */
;;;2562   						xNextTaskUnblockTime = xItemValue;
;;;2563   						break;
;;;2564   					}
;;;2565   					else
;;;2566   					{
;;;2567   						mtCOVERAGE_TEST_MARKER();
;;;2568   					}
;;;2569   
;;;2570   					/* It is time to remove the item from the Blocked state. */
;;;2571   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2572   
;;;2573   					/* Is the task waiting on an event also?  If so remove
;;;2574   					it from the event list. */
;;;2575   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;2576   					{
;;;2577   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2578   					}
;;;2579   					else
;;;2580   					{
;;;2581   						mtCOVERAGE_TEST_MARKER();
;;;2582   					}
;;;2583   
;;;2584   					/* Place the unblocked task into the appropriate ready
;;;2585   					list. */
;;;2586   					prvAddTaskToReadyList( pxTCB );
;;;2587   
;;;2588   					/* A task being unblocked cannot cause an immediate
;;;2589   					context switch if preemption is turned off. */
;;;2590   					#if (  configUSE_PREEMPTION == 1 )
;;;2591   					{
;;;2592   						/* Preemption is on, but a context switch should
;;;2593   						only be performed if the unblocked task has a
;;;2594   						priority that is equal to or higher than the
;;;2595   						currently executing task. */
;;;2596   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2597   						{
;;;2598   							xSwitchRequired = pdTRUE;
;;;2599   						}
;;;2600   						else
;;;2601   						{
;;;2602   							mtCOVERAGE_TEST_MARKER();
;;;2603   						}
;;;2604   					}
;;;2605   					#endif /* configUSE_PREEMPTION */
;;;2606   				}
;;;2607   			}
;;;2608   		}
;;;2609   
;;;2610   		/* Tasks of equal priority to the currently running task will share
;;;2611   		processing time (time slice) if preemption is on, and the application
;;;2612   		writer has not explicitly turned time slicing off. */
;;;2613   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2614   		{
;;;2615   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
;;;2616   			{
;;;2617   				xSwitchRequired = pdTRUE;
;;;2618   			}
;;;2619   			else
;;;2620   			{
;;;2621   				mtCOVERAGE_TEST_MARKER();
;;;2622   			}
;;;2623   		}
;;;2624   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2625   
;;;2626   		#if ( configUSE_TICK_HOOK == 1 )
;;;2627   		{
;;;2628   			/* Guard against the tick hook being called when the pended tick
;;;2629   			count is being unwound (when the scheduler is being unlocked). */
;;;2630   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2631   			{
;;;2632   				vApplicationTickHook();
;;;2633   			}
;;;2634   			else
;;;2635   			{
;;;2636   				mtCOVERAGE_TEST_MARKER();
;;;2637   			}
;;;2638   		}
;;;2639   		#endif /* configUSE_TICK_HOOK */
;;;2640   	}
;;;2641   	else
;;;2642   	{
;;;2643   		++uxPendedTicks;
00000c  69b8              LDR      r0,[r7,#0x18]  ; uxPendedTicks
00000e  1c40              ADDS     r0,r0,#1
000010  61b8              STR      r0,[r7,#0x18]  ; uxPendedTicks
                  |L50.18|
;;;2644   
;;;2645   		/* The tick hook gets called at regular intervals, even if the
;;;2646   		scheduler is locked. */
;;;2647   		#if ( configUSE_TICK_HOOK == 1 )
;;;2648   		{
;;;2649   			vApplicationTickHook();
;;;2650   		}
;;;2651   		#endif
;;;2652   	}
;;;2653   
;;;2654   	#if ( configUSE_PREEMPTION == 1 )
;;;2655   	{
;;;2656   		if( xYieldPending != pdFALSE )
000012  69f8              LDR      r0,[r7,#0x1c]  ; xYieldPending
000014  b100              CBZ      r0,|L50.24|
;;;2657   		{
;;;2658   			xSwitchRequired = pdTRUE;
000016  2601              MOVS     r6,#1
                  |L50.24|
;;;2659   		}
;;;2660   		else
;;;2661   		{
;;;2662   			mtCOVERAGE_TEST_MARKER();
;;;2663   		}
;;;2664   	}
;;;2665   	#endif /* configUSE_PREEMPTION */
;;;2666   
;;;2667   	return xSwitchRequired;
000018  4630              MOV      r0,r6
;;;2668   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L50.30|
00001e  68fd              LDR      r5,[r7,#0xc]          ;2513  ; xTickCount
000020  1c6d              ADDS     r5,r5,#1              ;2513
000022  60fd              STR      r5,[r7,#0xc]          ;2517  ; xTickCount
000024  d111              BNE      |L50.74|
000026  6bf8              LDR      r0,[r7,#0x3c]         ;2521  ; pxDelayedTaskList
000028  6800              LDR      r0,[r0,#0]            ;2521
00002a  b128              CBZ      r0,|L50.56|
00002c  f64012d9          MOV      r2,#0x9d9             ;2521
000030  a123              ADR      r1,|L50.192|
000032  a028              ADR      r0,|L50.212|
000034  f7fffffe          BL       __2printf
                  |L50.56|
000038  6bf8              LDR      r0,[r7,#0x3c]         ;2521  ; pxDelayedTaskList
00003a  6c39              LDR      r1,[r7,#0x40]         ;2521  ; pxOverflowDelayedTaskList
00003c  63f9              STR      r1,[r7,#0x3c]         ;2521  ; pxDelayedTaskList
00003e  6438              STR      r0,[r7,#0x40]         ;2521  ; pxOverflowDelayedTaskList
000040  6a38              LDR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
000042  1c40              ADDS     r0,r0,#1              ;2521
000044  6238              STR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
000046  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L50.74|
00004a  6ab8              LDR      r0,[r7,#0x28]         ;2532  ; xNextTaskUnblockTime
00004c  f8df8094          LDR      r8,|L50.228|
000050  4285              CMP      r5,r0                 ;2532
000052  d309              BCC      |L50.104|
                  |L50.84|
000054  6bf8              LDR      r0,[r7,#0x3c]         ;2536  ; pxDelayedTaskList
000056  6800              LDR      r0,[r0,#0]            ;2536
000058  b180              CBZ      r0,|L50.124|
00005a  6bf8              LDR      r0,[r7,#0x3c]         ;2552  ; pxDelayedTaskList
00005c  68c0              LDR      r0,[r0,#0xc]          ;2552
00005e  68c4              LDR      r4,[r0,#0xc]          ;2553
000060  6860              LDR      r0,[r4,#4]            ;2555
000062  4285              CMP      r5,r0                 ;2555
000064  d20d              BCS      |L50.130|
                  |L50.102|
000066  62b8              STR      r0,[r7,#0x28]         ;2562  ; xNextTaskUnblockTime
                  |L50.104|
000068  6838              LDR      r0,[r7,#0]            ;2615  ; pxCurrentTCB
00006a  6ac0              LDR      r0,[r0,#0x2c]         ;2615
00006c  eb000180          ADD      r1,r0,r0,LSL #2       ;2615
000070  f8580021          LDR      r0,[r8,r1,LSL #2]     ;2615
000074  2801              CMP      r0,#1                 ;2615
000076  d9cc              BLS      |L50.18|
000078  2601              MOVS     r6,#1                 ;2617
00007a  e7ca              B        |L50.18|
                  |L50.124|
00007c  f04f30ff          MOV      r0,#0xffffffff        ;2543
000080  e7f1              B        |L50.102|
                  |L50.130|
000082  1d20              ADDS     r0,r4,#4              ;2571
000084  f7fffffe          BL       uxListRemove
000088  6aa0              LDR      r0,[r4,#0x28]         ;2575
00008a  b118              CBZ      r0,|L50.148|
00008c  f1040018          ADD      r0,r4,#0x18           ;2577
000090  f7fffffe          BL       uxListRemove
                  |L50.148|
000094  6ae0              LDR      r0,[r4,#0x2c]         ;2586
000096  2101              MOVS     r1,#1                 ;2586
000098  693a              LDR      r2,[r7,#0x10]         ;2586  ; uxTopReadyPriority
00009a  4081              LSLS     r1,r1,r0              ;2586
00009c  4311              ORRS     r1,r1,r2              ;2586
00009e  6139              STR      r1,[r7,#0x10]         ;2586  ; uxTopReadyPriority
0000a0  eb000180          ADD      r1,r0,r0,LSL #2       ;2586
0000a4  eb080081          ADD      r0,r8,r1,LSL #2       ;2586
0000a8  1d21              ADDS     r1,r4,#4              ;2586
0000aa  f7fffffe          BL       vListInsertEnd
0000ae  6ae0              LDR      r0,[r4,#0x2c]         ;2596
0000b0  6839              LDR      r1,[r7,#0]            ;2596  ; pxCurrentTCB
0000b2  6ac9              LDR      r1,[r1,#0x2c]         ;2596
0000b4  4288              CMP      r0,r1                 ;2596
0000b6  d3cd              BCC      |L50.84|
0000b8  2601              MOVS     r6,#1                 ;2598
0000ba  e7cb              B        |L50.84|
;;;2669   /*-----------------------------------------------------------*/
                          ENDP

                  |L50.188|
                          DCD      ||.data||
                  |L50.192|
0000c0  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000c4  72656552
0000c8  544f535c
0000cc  7461736b
0000d0  732e6300
                  |L50.212|
0000d4  4572726f          DCB      "Error:%s,%d\r\n",0
0000d8  723a2573
0000dc  2c25640d
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L50.228|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4661   
;;;4662   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;4663   	{
000002  b158              CBZ      r0,|L51.28|
;;;4664   	TCB_t *pxTCB;
;;;4665   	BaseType_t xReturn;
;;;4666   
;;;4667   		/* If null is passed in here then it is the calling task that is having
;;;4668   		its notification state cleared. */
;;;4669   		pxTCB = prvGetTCBFromHandle( xTask );
000004  4604              MOV      r4,r0
                  |L51.6|
;;;4670   
;;;4671   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4672   		{
;;;4673   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
00000a  f8940060          LDRB     r0,[r4,#0x60]
00000e  2802              CMP      r0,#2
000010  d007              BEQ      |L51.34|
;;;4674   			{
;;;4675   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
;;;4676   				xReturn = pdPASS;
;;;4677   			}
;;;4678   			else
;;;4679   			{
;;;4680   				xReturn = pdFAIL;
000012  2400              MOVS     r4,#0
                  |L51.20|
;;;4681   			}
;;;4682   		}
;;;4683   		taskEXIT_CRITICAL();
000014  f7fffffe          BL       vPortExitCritical
;;;4684   
;;;4685   		return xReturn;
000018  4620              MOV      r0,r4
;;;4686   	}
00001a  bd10              POP      {r4,pc}
                  |L51.28|
00001c  4803              LDR      r0,|L51.44|
00001e  6804              LDR      r4,[r0,#0]            ;4669  ; pxCurrentTCB
000020  e7f1              B        |L51.6|
                  |L51.34|
000022  2000              MOVS     r0,#0                 ;4675
000024  f8840060          STRB     r0,[r4,#0x60]         ;4675
000028  2401              MOVS     r4,#1                 ;4676
00002a  e7f3              B        |L51.20|
;;;4687   
                          ENDP

                  |L51.44|
                          DCD      ||.data||

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4262   
;;;4263   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4264   	{
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  4688              MOV      r8,r1
00000a  4607              MOV      r7,r0
;;;4265   	BaseType_t xReturn;
;;;4266   
;;;4267   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4268   		{
;;;4269   			/* Only block if a notification is not already pending. */
;;;4270   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000010  4c1c              LDR      r4,|L52.132|
000012  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000014  f8900060          LDRB     r0,[r0,#0x60]
000018  2802              CMP      r0,#2
00001a  d014              BEQ      |L52.70|
;;;4271   			{
;;;4272   				/* Clear bits in the task's notification value as bits may get
;;;4273   				set	by the notifying task or interrupt.  This can be used to
;;;4274   				clear the value to zero. */
;;;4275   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
00001e  6dc1              LDR      r1,[r0,#0x5c]
000020  43b9              BICS     r1,r1,r7
000022  65c1              STR      r1,[r0,#0x5c]
;;;4276   
;;;4277   				/* Mark this task as waiting for a notification. */
;;;4278   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000024  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
000026  2001              MOVS     r0,#1
000028  f8810060          STRB     r0,[r1,#0x60]
;;;4279   
;;;4280   				if( xTicksToWait > ( TickType_t ) 0 )
00002c  b15e              CBZ      r6,|L52.70|
;;;4281   				{
;;;4282   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00002e  2101              MOVS     r1,#1
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4283   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4284   
;;;4285   					/* All ports are written to allow a yield in a critical
;;;4286   					section (some will yield immediately, others wait until the
;;;4287   					critical section exits) - but it is not something that
;;;4288   					application code should ever do. */
;;;4289   					portYIELD_WITHIN_API();
000036  4914              LDR      r1,|L52.136|
000038  f04f5080          MOV      r0,#0x10000000
00003c  6008              STR      r0,[r1,#0]
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
                  |L52.70|
;;;4290   				}
;;;4291   				else
;;;4292   				{
;;;4293   					mtCOVERAGE_TEST_MARKER();
;;;4294   				}
;;;4295   			}
;;;4296   			else
;;;4297   			{
;;;4298   				mtCOVERAGE_TEST_MARKER();
;;;4299   			}
;;;4300   		}
;;;4301   		taskEXIT_CRITICAL();
000046  f7fffffe          BL       vPortExitCritical
;;;4302   
;;;4303   		taskENTER_CRITICAL();
00004a  f7fffffe          BL       vPortEnterCritical
;;;4304   		{
;;;4305   			traceTASK_NOTIFY_WAIT();
;;;4306   
;;;4307   			if( pulNotificationValue != NULL )
00004e  b115              CBZ      r5,|L52.86|
;;;4308   			{
;;;4309   				/* Output the current notification value, which may or may not
;;;4310   				have changed. */
;;;4311   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000050  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000052  6dc0              LDR      r0,[r0,#0x5c]
000054  6028              STR      r0,[r5,#0]
                  |L52.86|
;;;4312   			}
;;;4313   
;;;4314   			/* If ucNotifyValue is set then either the task never entered the
;;;4315   			blocked state (because a notification was already pending) or the
;;;4316   			task unblocked because of a notification.  Otherwise the task
;;;4317   			unblocked because of a timeout. */
;;;4318   			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000056  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000058  f8900060          LDRB     r0,[r0,#0x60]
00005c  2801              CMP      r0,#1
00005e  d00e              BEQ      |L52.126|
;;;4319   			{
;;;4320   				/* A notification was not received. */
;;;4321   				xReturn = pdFALSE;
;;;4322   			}
;;;4323   			else
;;;4324   			{
;;;4325   				/* A notification was already pending or a notification was
;;;4326   				received while the task was waiting. */
;;;4327   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000060  6820              LDR      r0,[r4,#0]  ; pxCurrentTCB
000062  6dc1              LDR      r1,[r0,#0x5c]
000064  ea210108          BIC      r1,r1,r8
000068  65c1              STR      r1,[r0,#0x5c]
;;;4328   				xReturn = pdTRUE;
00006a  2501              MOVS     r5,#1
                  |L52.108|
;;;4329   			}
;;;4330   
;;;4331   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00006c  6821              LDR      r1,[r4,#0]  ; pxCurrentTCB
00006e  2000              MOVS     r0,#0
000070  f8810060          STRB     r0,[r1,#0x60]
;;;4332   		}
;;;4333   		taskEXIT_CRITICAL();
000074  f7fffffe          BL       vPortExitCritical
;;;4334   
;;;4335   		return xReturn;
000078  4628              MOV      r0,r5
;;;4336   	}
00007a  e8bd81f0          POP      {r4-r8,pc}
                  |L52.126|
00007e  2500              MOVS     r5,#0                 ;4321
000080  e7f4              B        |L52.108|
;;;4337   
                          ENDP

000082  0000              DCW      0x0000
                  |L52.132|
                          DCD      ||.data||
                  |L52.136|
                          DCD      0xe000ed04

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xTaskPriorityDisinherit PROC
;;;3771   
;;;3772   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3773   	{
;;;3774   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000002  0004              MOVS     r4,r0
;;;3775   	BaseType_t xReturn = pdFALSE;
000004  f04f0600          MOV      r6,#0
000008  d03c              BEQ      |L53.132|
;;;3776   
;;;3777   		if( pxMutexHolder != NULL )
;;;3778   		{
;;;3779   			/* A task can only have an inherited priority if it holds the mutex.
;;;3780   			If the mutex is held by a task then it cannot be given from an
;;;3781   			interrupt, and if a mutex is given by the holding task then it must
;;;3782   			be the running state task. */
;;;3783   			configASSERT( pxTCB == pxCurrentTCB );
00000a  4d1f              LDR      r5,|L53.136|
00000c  6828              LDR      r0,[r5,#0]  ; pxCurrentTCB
00000e  4284              CMP      r4,r0
000010  d005              BEQ      |L53.30|
000012  f64062c7          MOV      r2,#0xec7
000016  a11d              ADR      r1,|L53.140|
000018  a021              ADR      r0,|L53.160|
00001a  f7fffffe          BL       __2printf
                  |L53.30|
;;;3784   
;;;3785   			configASSERT( pxTCB->uxMutexesHeld );
00001e  6d60              LDR      r0,[r4,#0x54]
000020  b928              CBNZ     r0,|L53.46|
000022  f64062c9          MOV      r2,#0xec9
000026  a119              ADR      r1,|L53.140|
000028  a01d              ADR      r0,|L53.160|
00002a  f7fffffe          BL       __2printf
                  |L53.46|
;;;3786   			( pxTCB->uxMutexesHeld )--;
00002e  6d60              LDR      r0,[r4,#0x54]
000030  1e40              SUBS     r0,r0,#1
;;;3787   
;;;3788   			/* Has the holder of the mutex inherited the priority of another
;;;3789   			task? */
;;;3790   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
000032  6560              STR      r0,[r4,#0x54]
000034  6d22              LDR      r2,[r4,#0x50]
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  4291              CMP      r1,r2
00003a  d023              BEQ      |L53.132|
;;;3791   			{
;;;3792   				/* Only disinherit if no other mutexes are held. */
;;;3793   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
00003c  bb10              CBNZ     r0,|L53.132|
;;;3794   				{
;;;3795   					/* A task can only have an inherited priority if it holds
;;;3796   					the mutex.  If the mutex is held by a task then it cannot be
;;;3797   					given from an interrupt, and if a mutex is given by the
;;;3798   					holding	task then it must be the running state task.  Remove
;;;3799   					the	holding task from the ready	list. */
;;;3800   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00003e  1d20              ADDS     r0,r4,#4
000040  f7fffffe          BL       uxListRemove
;;;3801   					{
;;;3802   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000044  491a              LDR      r1,|L53.176|
000046  2201              MOVS     r2,#1
000048  b950              CBNZ     r0,|L53.96|
00004a  6ae0              LDR      r0,[r4,#0x2c]
00004c  eb000380          ADD      r3,r0,r0,LSL #2
000050  f8513023          LDR      r3,[r1,r3,LSL #2]
000054  b923              CBNZ     r3,|L53.96|
000056  692b              LDR      r3,[r5,#0x10]  ; uxTopReadyPriority
000058  fa02f000          LSL      r0,r2,r0
00005c  4383              BICS     r3,r3,r0
00005e  612b              STR      r3,[r5,#0x10]  ; uxTopReadyPriority
                  |L53.96|
;;;3803   					}
;;;3804   					else
;;;3805   					{
;;;3806   						mtCOVERAGE_TEST_MARKER();
;;;3807   					}
;;;3808   
;;;3809   					/* Disinherit the priority before adding the task into the
;;;3810   					new	ready list. */
;;;3811   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3812   					pxTCB->uxPriority = pxTCB->uxBasePriority;
000060  6d20              LDR      r0,[r4,#0x50]
;;;3813   
;;;3814   					/* Reset the event list item value.  It cannot be in use for
;;;3815   					any other purpose if this task is running, and it must be
;;;3816   					running to give back the mutex. */
;;;3817   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000062  62e0              STR      r0,[r4,#0x2c]
000064  f1c00020          RSB      r0,r0,#0x20
;;;3818   					prvAddTaskToReadyList( pxTCB );
000068  61a0              STR      r0,[r4,#0x18]
00006a  6ae0              LDR      r0,[r4,#0x2c]
00006c  692b              LDR      r3,[r5,#0x10]  ; uxTopReadyPriority
00006e  4082              LSLS     r2,r2,r0
000070  431a              ORRS     r2,r2,r3
000072  612a              STR      r2,[r5,#0x10]  ; uxTopReadyPriority
000074  eb000080          ADD      r0,r0,r0,LSL #2
000078  eb010080          ADD      r0,r1,r0,LSL #2
00007c  1d21              ADDS     r1,r4,#4
00007e  f7fffffe          BL       vListInsertEnd
;;;3819   
;;;3820   					/* Return true to indicate that a context switch is required.
;;;3821   					This is only actually required in the corner case whereby
;;;3822   					multiple mutexes were held and the mutexes were given back
;;;3823   					in an order different to that in which they were taken.
;;;3824   					If a context switch did not occur when the first mutex was
;;;3825   					returned, even if a task was waiting on it, then a context
;;;3826   					switch should occur when the last mutex is returned whether
;;;3827   					a task is waiting on it or not. */
;;;3828   					xReturn = pdTRUE;
000082  2601              MOVS     r6,#1
                  |L53.132|
;;;3829   				}
;;;3830   				else
;;;3831   				{
;;;3832   					mtCOVERAGE_TEST_MARKER();
;;;3833   				}
;;;3834   			}
;;;3835   			else
;;;3836   			{
;;;3837   				mtCOVERAGE_TEST_MARKER();
;;;3838   			}
;;;3839   		}
;;;3840   		else
;;;3841   		{
;;;3842   			mtCOVERAGE_TEST_MARKER();
;;;3843   		}
;;;3844   
;;;3845   		return xReturn;
000084  4630              MOV      r0,r6
;;;3846   	}
000086  bd70              POP      {r4-r6,pc}
;;;3847   
                          ENDP

                  |L53.136|
                          DCD      ||.data||
                  |L53.140|
00008c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000090  72656552
000094  544f535c
000098  7461736b
00009c  732e6300
                  |L53.160|
0000a0  4572726f          DCB      "Error:%s,%d\r\n",0
0000a4  723a2573
0000a8  2c25640d
0000ac  0a00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L53.176|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTaskRemoveFromEventList PROC
;;;2893   
;;;2894   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2895   {
;;;2896   TCB_t *pxUnblockedTCB;
;;;2897   BaseType_t xReturn;
;;;2898   
;;;2899   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2900   	called from a critical section within an ISR. */
;;;2901   
;;;2902   	/* The event list is sorted in priority order, so the first in the list can
;;;2903   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2904   	the delayed list, and add it to the ready list.
;;;2905   
;;;2906   	If an event is for a queue that is locked then this function will never
;;;2907   	get called - the lock count on the queue will get modified instead.  This
;;;2908   	means exclusive access to the event list is guaranteed here.
;;;2909   
;;;2910   	This function assumes that a check has already been made to ensure that
;;;2911   	pxEventList is not empty. */
;;;2912   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68c0              LDR      r0,[r0,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]          ;2895
000008  b92c              CBNZ     r4,|L54.22|
;;;2913   	configASSERT( pxUnblockedTCB );
00000a  f6403261          MOV      r2,#0xb61
00000e  a116              ADR      r1,|L54.104|
000010  a01a              ADR      r0,|L54.124|
000012  f7fffffe          BL       __2printf
                  |L54.22|
;;;2914   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000016  f1040018          ADD      r0,r4,#0x18
00001a  4607              MOV      r7,r0
00001c  f7fffffe          BL       uxListRemove
;;;2915   
;;;2916   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000020  4d1a              LDR      r5,|L54.140|
000022  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
;;;2917   	{
;;;2918   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
;;;2919   		prvAddTaskToReadyList( pxUnblockedTCB );
000024  2601              MOVS     r6,#1
000026  b160              CBZ      r0,|L54.66|
000028  4639              MOV      r1,r7                 ;2916
;;;2920   	}
;;;2921   	else
;;;2922   	{
;;;2923   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2924   		pending until the scheduler is resumed. */
;;;2925   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00002a  4819              LDR      r0,|L54.144|
                  |L54.44|
00002c  f7fffffe          BL       vListInsertEnd
;;;2926   	}
;;;2927   
;;;2928   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000030  6ae0              LDR      r0,[r4,#0x2c]
000032  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
000034  6ac9              LDR      r1,[r1,#0x2c]
000036  4288              CMP      r0,r1
000038  d913              BLS      |L54.98|
;;;2929   	{
;;;2930   		/* Return true if the task removed from the event list has a higher
;;;2931   		priority than the calling task.  This allows the calling task to know if
;;;2932   		it should force a context switch now. */
;;;2933   		xReturn = pdTRUE;
00003a  2001              MOVS     r0,#1
;;;2934   
;;;2935   		/* Mark that a yield is pending in case the user is not using the
;;;2936   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2937   		xYieldPending = pdTRUE;
00003c  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L54.62|
;;;2938   	}
;;;2939   	else
;;;2940   	{
;;;2941   		xReturn = pdFALSE;
;;;2942   	}
;;;2943   
;;;2944   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2945   	{
;;;2946   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2947   		might be set to the blocked task's time out time.  If the task is
;;;2948   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2949   		normally left unchanged, because it is automatically reset to a new
;;;2950   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2951   		tickless idling is used it might be more important to enter sleep mode
;;;2952   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2953   		ensure it is updated at the earliest possible time. */
;;;2954   		prvResetNextTaskUnblockTime();
;;;2955   	}
;;;2956   	#endif
;;;2957   
;;;2958   	return xReturn;
;;;2959   }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L54.66|
000042  1d20              ADDS     r0,r4,#4              ;2918
000044  f7fffffe          BL       uxListRemove
000048  6ae0              LDR      r0,[r4,#0x2c]         ;2919
00004a  692a              LDR      r2,[r5,#0x10]         ;2919  ; uxTopReadyPriority
00004c  fa06f100          LSL      r1,r6,r0              ;2919
000050  4311              ORRS     r1,r1,r2              ;2919
000052  6129              STR      r1,[r5,#0x10]         ;2919  ; uxTopReadyPriority
000054  490f              LDR      r1,|L54.148|
000056  eb000080          ADD      r0,r0,r0,LSL #2       ;2919
00005a  eb010080          ADD      r0,r1,r0,LSL #2       ;2919
00005e  1d21              ADDS     r1,r4,#4              ;2919
000060  e7e4              B        |L54.44|
                  |L54.98|
000062  2000              MOVS     r0,#0                 ;2941
000064  e7eb              B        |L54.62|
;;;2960   /*-----------------------------------------------------------*/
                          ENDP

000066  0000              DCW      0x0000
                  |L54.104|
000068  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
00006c  72656552
000070  544f535c
000074  7461736b
000078  732e6300
                  |L54.124|
00007c  4572726f          DCB      "Error:%s,%d\r\n",0
000080  723a2573
000084  2c25640d
000088  0a00    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L54.140|
                          DCD      ||.data||
                  |L54.144|
                          DCD      ||.bss||+0x2a8
                  |L54.148|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xTaskRemoveFromUnorderedEventList PROC
;;;2961   
;;;2962   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;2963   {
;;;2964   TCB_t *pxUnblockedTCB;
;;;2965   BaseType_t xReturn;
;;;2966   
;;;2967   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2968   	the event flags implementation. */
;;;2969   	configASSERT( uxSchedulerSuspended != pdFALSE );
000002  4d1a              LDR      r5,|L55.108|
000004  4606              MOV      r6,r0                 ;2963
000006  460c              MOV      r4,r1                 ;2963
000008  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00000a  b928              CBNZ     r0,|L55.24|
00000c  f6403299          MOV      r2,#0xb99
000010  a117              ADR      r1,|L55.112|
000012  a01c              ADR      r0,|L55.132|
000014  f7fffffe          BL       __2printf
                  |L55.24|
;;;2970   
;;;2971   	/* Store the new item value in the event list. */
;;;2972   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000018  f0444000          ORR      r0,r4,#0x80000000
;;;2973   
;;;2974   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2975   	event flags. */
;;;2976   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
00001c  6030              STR      r0,[r6,#0]
;;;2977   	configASSERT( pxUnblockedTCB );
00001e  68f4              LDR      r4,[r6,#0xc]
000020  b92c              CBNZ     r4,|L55.46|
000022  f64032a1          MOV      r2,#0xba1
000026  a112              ADR      r1,|L55.112|
000028  a016              ADR      r0,|L55.132|
00002a  f7fffffe          BL       __2printf
                  |L55.46|
;;;2978   	( void ) uxListRemove( pxEventListItem );
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       uxListRemove
;;;2979   
;;;2980   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2981   	scheduler is suspended so interrupts will not be accessing the ready
;;;2982   	lists. */
;;;2983   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;2984   	prvAddTaskToReadyList( pxUnblockedTCB );
00003a  6ae0              LDR      r0,[r4,#0x2c]
00003c  2601              MOVS     r6,#1
00003e  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000040  fa06f100          LSL      r1,r6,r0
000044  4311              ORRS     r1,r1,r2
000046  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
000048  4912              LDR      r1,|L55.148|
00004a  eb000080          ADD      r0,r0,r0,LSL #2
00004e  eb010080          ADD      r0,r1,r0,LSL #2
000052  1d21              ADDS     r1,r4,#4
000054  f7fffffe          BL       vListInsertEnd
;;;2985   
;;;2986   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000058  6ae0              LDR      r0,[r4,#0x2c]
00005a  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00005c  6ac9              LDR      r1,[r1,#0x2c]
00005e  4288              CMP      r0,r1
000060  d902              BLS      |L55.104|
;;;2987   	{
;;;2988   		/* Return true if the task removed from the event list has
;;;2989   		a higher priority than the calling task.  This allows
;;;2990   		the calling task to know if it should force a context
;;;2991   		switch now. */
;;;2992   		xReturn = pdTRUE;
000062  2001              MOVS     r0,#1
;;;2993   
;;;2994   		/* Mark that a yield is pending in case the user is not using the
;;;2995   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2996   		xYieldPending = pdTRUE;
000064  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
;;;2997   	}
;;;2998   	else
;;;2999   	{
;;;3000   		xReturn = pdFALSE;
;;;3001   	}
;;;3002   
;;;3003   	return xReturn;
;;;3004   }
000066  bd70              POP      {r4-r6,pc}
                  |L55.104|
000068  2000              MOVS     r0,#0                 ;3000
00006a  bd70              POP      {r4-r6,pc}
;;;3005   /*-----------------------------------------------------------*/
                          ENDP

                  |L55.108|
                          DCD      ||.data||
                  |L55.112|
000070  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000074  72656552
000078  544f535c
00007c  7461736b
000080  732e6300
                  |L55.132|
000084  4572726f          DCB      "Error:%s,%d\r\n",0
000088  723a2573
00008c  2c25640d
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L55.148|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTaskResumeAll PROC
;;;2016   
;;;2017   BaseType_t xTaskResumeAll( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2018   {
;;;2019   TCB_t *pxTCB = NULL;
;;;2020   BaseType_t xAlreadyYielded = pdFALSE;
;;;2021   
;;;2022   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2023   	previous call to vTaskSuspendAll(). */
;;;2024   	configASSERT( uxSchedulerSuspended );
000004  4d2b              LDR      r5,|L56.180|
000006  2400              MOVS     r4,#0                 ;2019
000008  4627              MOV      r7,r4                 ;2020
00000a  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00000c  b928              CBNZ     r0,|L56.26|
00000e  f44f62fd          MOV      r2,#0x7e8
000012  a129              ADR      r1,|L56.184|
000014  a02d              ADR      r0,|L56.204|
000016  f7fffffe          BL       __2printf
                  |L56.26|
;;;2025   
;;;2026   	/* It is possible that an ISR caused a task to be removed from an event
;;;2027   	list while the scheduler was suspended.  If this was the case then the
;;;2028   	removed task will have been added to the xPendingReadyList.  Once the
;;;2029   	scheduler has been resumed it is safe to move all the pending ready
;;;2030   	tasks from this list into their appropriate ready list. */
;;;2031   	taskENTER_CRITICAL();
00001a  f7fffffe          BL       vPortEnterCritical
;;;2032   	{
;;;2033   		--uxSchedulerSuspended;
00001e  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000020  1e40              SUBS     r0,r0,#1
000022  6328              STR      r0,[r5,#0x30]  ; uxSchedulerSuspended
;;;2034   
;;;2035   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000024  6b28              LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000026  bbe8              CBNZ     r0,|L56.164|
;;;2036   		{
;;;2037   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000028  68a8              LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;2038   			{
;;;2039   				/* Move any readied tasks from the pending list into the
;;;2040   				appropriate ready list. */
;;;2041   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
;;;2042   				{
;;;2043   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
00002a  492c              LDR      r1,|L56.220|
;;;2044   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2045   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2046   					prvAddTaskToReadyList( pxTCB );
00002c  2601              MOVS     r6,#1
00002e  b3c8              CBZ      r0,|L56.164|
000030  f5a1792a          SUB      r9,r1,#0x2a8
000034  4688              MOV      r8,r1                 ;2043
                  |L56.54|
000036  f8d81000          LDR      r1,[r8,#0]            ;2041  ; xPendingReadyList
00003a  b1e9              CBZ      r1,|L56.120|
00003c  f8d8000c          LDR      r0,[r8,#0xc]          ;2043  ; xPendingReadyList
000040  68c4              LDR      r4,[r0,#0xc]          ;2044
000042  f1040018          ADD      r0,r4,#0x18           ;2044
000046  f7fffffe          BL       uxListRemove
00004a  1d20              ADDS     r0,r4,#4              ;2045
00004c  f7fffffe          BL       uxListRemove
000050  6ae0              LDR      r0,[r4,#0x2c]
000052  692a              LDR      r2,[r5,#0x10]  ; uxTopReadyPriority
000054  fa06f100          LSL      r1,r6,r0
000058  4311              ORRS     r1,r1,r2
00005a  6129              STR      r1,[r5,#0x10]  ; uxTopReadyPriority
00005c  eb000180          ADD      r1,r0,r0,LSL #2
000060  eb090081          ADD      r0,r9,r1,LSL #2
000064  1d21              ADDS     r1,r4,#4
000066  f7fffffe          BL       vListInsertEnd
;;;2047   
;;;2048   					/* If the moved task has a priority higher than the current
;;;2049   					task then a yield must be performed. */
;;;2050   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00006a  6ae0              LDR      r0,[r4,#0x2c]
00006c  6829              LDR      r1,[r5,#0]  ; pxCurrentTCB
00006e  6ac9              LDR      r1,[r1,#0x2c]
000070  4288              CMP      r0,r1
000072  d3e0              BCC      |L56.54|
;;;2051   					{
;;;2052   						xYieldPending = pdTRUE;
000074  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
000076  e7de              B        |L56.54|
                  |L56.120|
;;;2053   					}
;;;2054   					else
;;;2055   					{
;;;2056   						mtCOVERAGE_TEST_MARKER();
;;;2057   					}
;;;2058   				}
;;;2059   
;;;2060   				if( pxTCB != NULL )
000078  b10c              CBZ      r4,|L56.126|
;;;2061   				{
;;;2062   					/* A task was unblocked while the scheduler was suspended,
;;;2063   					which may have prevented the next unblock time from being
;;;2064   					re-calculated, in which case re-calculate it now.  Mainly
;;;2065   					important for low power tickless implementations, where
;;;2066   					this can prevent an unnecessary exit from low power
;;;2067   					state. */
;;;2068   					prvResetNextTaskUnblockTime();
00007a  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L56.126|
;;;2069   				}
;;;2070   
;;;2071   				/* If any ticks occurred while the scheduler was suspended then
;;;2072   				they should be processed now.  This ensures the tick count does
;;;2073   				not	slip, and that any delayed tasks are resumed at the correct
;;;2074   				time. */
;;;2075   				{
;;;2076   					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
00007e  69ac              LDR      r4,[r5,#0x18]  ; uxPendedTicks
;;;2077   
;;;2078   					if( uxPendedCounts > ( UBaseType_t ) 0U )
000080  b13c              CBZ      r4,|L56.146|
                  |L56.130|
;;;2079   					{
;;;2080   						do
;;;2081   						{
;;;2082   							if( xTaskIncrementTick() != pdFALSE )
000082  f7fffffe          BL       xTaskIncrementTick
000086  b100              CBZ      r0,|L56.138|
;;;2083   							{
;;;2084   								xYieldPending = pdTRUE;
000088  61ee              STR      r6,[r5,#0x1c]  ; xYieldPending
                  |L56.138|
00008a  1e64              SUBS     r4,r4,#1
;;;2085   							}
;;;2086   							else
;;;2087   							{
;;;2088   								mtCOVERAGE_TEST_MARKER();
;;;2089   							}
;;;2090   							--uxPendedCounts;
;;;2091   						} while( uxPendedCounts > ( UBaseType_t ) 0U );
00008c  d1f9              BNE      |L56.130|
;;;2092   
;;;2093   						uxPendedTicks = 0;
00008e  2000              MOVS     r0,#0
000090  61a8              STR      r0,[r5,#0x18]  ; uxPendedTicks
                  |L56.146|
;;;2094   					}
;;;2095   					else
;;;2096   					{
;;;2097   						mtCOVERAGE_TEST_MARKER();
;;;2098   					}
;;;2099   				}
;;;2100   
;;;2101   				if( xYieldPending != pdFALSE )
000092  69e8              LDR      r0,[r5,#0x1c]  ; xYieldPending
000094  b130              CBZ      r0,|L56.164|
;;;2102   				{
;;;2103   					#if( configUSE_PREEMPTION != 0 )
;;;2104   					{
;;;2105   						xAlreadyYielded = pdTRUE;
;;;2106   					}
;;;2107   					#endif
;;;2108   					taskYIELD_IF_USING_PREEMPTION();
000096  4912              LDR      r1,|L56.224|
000098  2701              MOVS     r7,#1                 ;2105
00009a  0738              LSLS     r0,r7,#28
00009c  6008              STR      r0,[r1,#0]
00009e  f3bf8f4f          DSB      
0000a2  e000              B        |L56.166|
                  |L56.164|
0000a4  e001              B        |L56.170|
                  |L56.166|
0000a6  f3bf8f6f          ISB      
                  |L56.170|
;;;2109   				}
;;;2110   				else
;;;2111   				{
;;;2112   					mtCOVERAGE_TEST_MARKER();
;;;2113   				}
;;;2114   			}
;;;2115   		}
;;;2116   		else
;;;2117   		{
;;;2118   			mtCOVERAGE_TEST_MARKER();
;;;2119   		}
;;;2120   	}
;;;2121   	taskEXIT_CRITICAL();
0000aa  f7fffffe          BL       vPortExitCritical
;;;2122   
;;;2123   	return xAlreadyYielded;
0000ae  4638              MOV      r0,r7
;;;2124   }
0000b0  e8bd87f0          POP      {r4-r10,pc}
;;;2125   /*-----------------------------------------------------------*/
                          ENDP

                  |L56.180|
                          DCD      ||.data||
                  |L56.184|
0000b8  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
0000bc  72656552
0000c0  544f535c
0000c4  7461736b
0000c8  732e6300
                  |L56.204|
0000cc  4572726f          DCB      "Error:%s,%d\r\n",0
0000d0  723a2573
0000d4  2c25640d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L56.220|
                          DCD      ||.bss||+0x2a8
                  |L56.224|
                          DCD      0xe000ed04

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  xTaskResumeFromISR PROC
;;;1755   
;;;1756   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1757   	{
;;;1758   	BaseType_t xYieldRequired = pdFALSE;
000004  2600              MOVS     r6,#0
;;;1759   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000006  0004              MOVS     r4,r0
000008  d105              BNE      |L57.22|
;;;1760   	UBaseType_t uxSavedInterruptStatus;
;;;1761   
;;;1762   		configASSERT( xTaskToResume );
00000a  f24062e2          MOV      r2,#0x6e2
00000e  a11b              ADR      r1,|L57.124|
000010  a01f              ADR      r0,|L57.144|
000012  f7fffffe          BL       __2printf
                  |L57.22|
;;;1763   
;;;1764   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1765   		maximum	system call (or maximum API call) interrupt priority.
;;;1766   		Interrupts that are	above the maximum system call priority are keep
;;;1767   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1768   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1769   		is defined in FreeRTOSConfig.h then
;;;1770   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1771   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1772   		been assigned a priority above the configured maximum system call
;;;1773   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1774   		from interrupts	that have been assigned a priority at or (logically)
;;;1775   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1776   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1777   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1778   		provided on the following link:
;;;1779   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1780   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000016  f7fffffe          BL       vPortValidateInterruptPriority
00001a  2050              MOVS     r0,#0x50
00001c  f3ef8511          MRS      r5,BASEPRI
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
;;;1781   
;;;1782   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1783   		{
;;;1784   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       prvTaskIsTaskSuspended
000032  b1e8              CBZ      r0,|L57.112|
;;;1785   			{
;;;1786   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1787   
;;;1788   				/* Check the ready lists can be accessed. */
;;;1789   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000034  4f1a              LDR      r7,|L57.160|
000036  6b38              LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
000038  b118              CBZ      r0,|L57.66|
;;;1790   				{
;;;1791   					/* Ready lists can be accessed so move the task from the
;;;1792   					suspended list to the ready list directly. */
;;;1793   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1794   					{
;;;1795   						xYieldRequired = pdTRUE;
;;;1796   					}
;;;1797   					else
;;;1798   					{
;;;1799   						mtCOVERAGE_TEST_MARKER();
;;;1800   					}
;;;1801   
;;;1802   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;1803   					prvAddTaskToReadyList( pxTCB );
;;;1804   				}
;;;1805   				else
;;;1806   				{
;;;1807   					/* The delayed or ready lists cannot be accessed so the task
;;;1808   					is held in the pending ready list until the scheduler is
;;;1809   					unsuspended. */
;;;1810   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00003a  f1040118          ADD      r1,r4,#0x18
00003e  4819              LDR      r0,|L57.164|
000040  e014              B        |L57.108|
                  |L57.66|
000042  6ae0              LDR      r0,[r4,#0x2c]         ;1793
000044  6839              LDR      r1,[r7,#0]            ;1793  ; pxCurrentTCB
000046  6ac9              LDR      r1,[r1,#0x2c]         ;1793
000048  4288              CMP      r0,r1                 ;1793
00004a  d300              BCC      |L57.78|
00004c  2601              MOVS     r6,#1                 ;1795
                  |L57.78|
00004e  1d20              ADDS     r0,r4,#4              ;1802
000050  f7fffffe          BL       uxListRemove
000054  6ae0              LDR      r0,[r4,#0x2c]         ;1803
000056  2101              MOVS     r1,#1                 ;1803
000058  693a              LDR      r2,[r7,#0x10]         ;1803  ; uxTopReadyPriority
00005a  4081              LSLS     r1,r1,r0              ;1803
00005c  4311              ORRS     r1,r1,r2              ;1803
00005e  6139              STR      r1,[r7,#0x10]         ;1803  ; uxTopReadyPriority
000060  4911              LDR      r1,|L57.168|
000062  eb000080          ADD      r0,r0,r0,LSL #2       ;1803
000066  eb010080          ADD      r0,r1,r0,LSL #2       ;1803
00006a  1d21              ADDS     r1,r4,#4              ;1803
                  |L57.108|
00006c  f7fffffe          BL       vListInsertEnd
                  |L57.112|
000070  f3858811          MSR      BASEPRI,r5            ;1803
;;;1811   				}
;;;1812   			}
;;;1813   			else
;;;1814   			{
;;;1815   				mtCOVERAGE_TEST_MARKER();
;;;1816   			}
;;;1817   		}
;;;1818   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1819   
;;;1820   		return xYieldRequired;
000074  4630              MOV      r0,r6
;;;1821   	}
000076  e8bd81f0          POP      {r4-r8,pc}
;;;1822   
                          ENDP

00007a  0000              DCW      0x0000
                  |L57.124|
00007c  2e2e5c46          DCB      "..\\FreeRTOS\\tasks.c",0
000080  72656552
000084  544f535c
000088  7461736b
00008c  732e6300
                  |L57.144|
000090  4572726f          DCB      "Error:%s,%d\r\n",0
000094  723a2573
000098  2c25640d
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0
                  |L57.160|
                          DCD      ||.data||
                  |L57.164|
                          DCD      ||.bss||+0x2a8
                  |L57.168|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        640
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  uxDeletedTasksWaitingCleanUp
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
                  ulTaskSwitchedInTime
                          DCD      0x00000000
                  ulTotalRunTime
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
