; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\heap_4.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\heap_4.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I"E:\STM32F103战舰V3资料\STM32F103 FreeRTOS例程\FreeRTOS实验17-1 FreeRTOS内存管理实验\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\heap_4.crf ..\FreeRTOS\portable\MemMang\heap_4.c]
                          THUMB

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;370    
;;;371    static void prvHeapInit( void )
000000  4810              LDR      r0,|L1.68|
;;;372    {
;;;373    BlockLink_t *pxFirstFreeBlock;
;;;374    uint8_t *pucAlignedHeap;
;;;375    size_t uxAddress;
;;;376    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
000002  f44f41a0          MOV      r1,#0x5000
;;;377    
;;;378    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;379    	uxAddress = ( size_t ) ucHeap;
;;;380    
;;;381    	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
000006  0742              LSLS     r2,r0,#29
000008  d006              BEQ      |L1.24|
00000a  1dc0              ADDS     r0,r0,#7              ;372
;;;382    	{
;;;383    		uxAddress += ( portBYTE_ALIGNMENT - 1 );
;;;384    		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
;;;385    		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
00000c  490d              LDR      r1,|L1.68|
00000e  f0200007          BIC      r0,r0,#7              ;384
000012  1a41              SUBS     r1,r0,r1
000014  f5c141a0          RSB      r1,r1,#0x5000
                  |L1.24|
;;;386    	}
;;;387    
;;;388    	pucAlignedHeap = ( uint8_t * ) uxAddress;
;;;389    
;;;390    	/* xStart is used to hold a pointer to the first item in the list of free
;;;391    	blocks.  The void cast is used to prevent compiler warnings. */
;;;392    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000018  4a0b              LDR      r2,|L1.72|
;;;393    	xStart.xBlockSize = ( size_t ) 0;
00001a  2300              MOVS     r3,#0
;;;394    
;;;395    	/* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;396    	at the end of the heap space. */
;;;397    	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
00001c  4401              ADD      r1,r1,r0
00001e  e9c20300          STRD     r0,r3,[r2,#0]         ;393
000022  3908              SUBS     r1,r1,#8
;;;398    	uxAddress -= xHeapStructSize;
;;;399    	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
;;;400    	pxEnd = ( void * ) uxAddress;
000024  3a10              SUBS     r2,r2,#0x10
000026  f0210107          BIC      r1,r1,#7              ;399
;;;401    	pxEnd->xBlockSize = 0;
00002a  6011              STR      r1,[r2,#0]  ; pxEnd
;;;402    	pxEnd->pxNextFreeBlock = NULL;
00002c  604b              STR      r3,[r1,#4]
;;;403    
;;;404    	/* To start with there is a single free block that is sized to take up the
;;;405    	entire heap space, minus the space taken by pxEnd. */
;;;406    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
;;;407    	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
00002e  600b              STR      r3,[r1,#0]
000030  1a0b              SUBS     r3,r1,r0
000032  e9c01300          STRD     r1,r3,[r0,#0]
;;;408    	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
;;;409    
;;;410    	/* Only one block exists - and it covers the entire usable heap space. */
;;;411    	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
;;;412    	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
000036  6093              STR      r3,[r2,#8]  ; xMinimumEverFreeBytesRemaining
;;;413    
;;;414    	/* Work out the position of the top bit in a size_t variable. */
;;;415    	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
000038  f04f4000          MOV      r0,#0x80000000
00003c  6053              STR      r3,[r2,#4]  ; xFreeBytesRemaining
00003e  60d0              STR      r0,[r2,#0xc]  ; xBlockAllocatedBit
;;;416    }
000040  4770              BX       lr
;;;417    /*-----------------------------------------------------------*/
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      ||.bss||
                  |L1.72|
                          DCD      ||.data||+0x10

                          AREA ||i.prvInsertBlockIntoFreeList||, CODE, READONLY, ALIGN=2

                  prvInsertBlockIntoFreeList PROC
;;;418    
;;;419    static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
000000  b530              PUSH     {r4,r5,lr}
;;;420    {
;;;421    BlockLink_t *pxIterator;
;;;422    uint8_t *puc;
;;;423    
;;;424    	/* Iterate through the list until a block is found that has a higher address
;;;425    	than the block being inserted. */
;;;426    	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
000002  4911              LDR      r1,|L2.72|
000004  e000              B        |L2.8|
                  |L2.6|
000006  4611              MOV      r1,r2                 ;420
                  |L2.8|
000008  680a              LDR      r2,[r1,#0]
00000a  4282              CMP      r2,r0
00000c  d3fb              BCC      |L2.6|
;;;427    	{
;;;428    		/* Nothing to do here, just iterate to the right position. */
;;;429    	}
;;;430    
;;;431    	/* Do the block being inserted, and the block it is being inserted after
;;;432    	make a contiguous block of memory? */
;;;433    	puc = ( uint8_t * ) pxIterator;
;;;434    	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
00000e  684b              LDR      r3,[r1,#4]
000010  185c              ADDS     r4,r3,r1
000012  4284              CMP      r4,r0
000014  d103              BNE      |L2.30|
;;;435    	{
;;;436    		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
000016  6840              LDR      r0,[r0,#4]
000018  4418              ADD      r0,r0,r3
;;;437    		pxBlockToInsert = pxIterator;
00001a  6048              STR      r0,[r1,#4]
00001c  4608              MOV      r0,r1
                  |L2.30|
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		mtCOVERAGE_TEST_MARKER();
;;;442    	}
;;;443    
;;;444    	/* Do the block being inserted, and the block it is being inserted before
;;;445    	make a contiguous block of memory? */
;;;446    	puc = ( uint8_t * ) pxBlockToInsert;
;;;447    	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
00001e  6843              LDR      r3,[r0,#4]
000020  181c              ADDS     r4,r3,r0
000022  4294              CMP      r4,r2
000024  d109              BNE      |L2.58|
;;;448    	{
;;;449    		if( pxIterator->pxNextFreeBlock != pxEnd )
000026  4c08              LDR      r4,|L2.72|
000028  3c10              SUBS     r4,r4,#0x10
00002a  6824              LDR      r4,[r4,#0]  ; pxEnd
00002c  42a2              CMP      r2,r4
00002e  d009              BEQ      |L2.68|
;;;450    		{
;;;451    			/* Form one big block from the two blocks. */
;;;452    			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
000030  6852              LDR      r2,[r2,#4]
000032  441a              ADD      r2,r2,r3
;;;453    			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
000034  6042              STR      r2,[r0,#4]
000036  680a              LDR      r2,[r1,#0]
000038  6812              LDR      r2,[r2,#0]
                  |L2.58|
;;;454    		}
;;;455    		else
;;;456    		{
;;;457    			pxBlockToInsert->pxNextFreeBlock = pxEnd;
;;;458    		}
;;;459    	}
;;;460    	else
;;;461    	{
;;;462    		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
00003a  6002              STR      r2,[r0,#0]
                  |L2.60|
;;;463    	}
;;;464    
;;;465    	/* If the block being inserted plugged a gab, so was merged with the block
;;;466    	before and the block after, then it's pxNextFreeBlock pointer will have
;;;467    	already been set, and should not be set here as that would make it point
;;;468    	to itself. */
;;;469    	if( pxIterator != pxBlockToInsert )
00003c  4281              CMP      r1,r0
00003e  d000              BEQ      |L2.66|
;;;470    	{
;;;471    		pxIterator->pxNextFreeBlock = pxBlockToInsert;
000040  6008              STR      r0,[r1,#0]
                  |L2.66|
;;;472    	}
;;;473    	else
;;;474    	{
;;;475    		mtCOVERAGE_TEST_MARKER();
;;;476    	}
;;;477    }
000042  bd30              POP      {r4,r5,pc}
                  |L2.68|
000044  6004              STR      r4,[r0,#0]            ;457
000046  e7f9              B        |L2.60|
;;;478    
                          ENDP

                  |L2.72|
                          DCD      ||.data||+0x10

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  pvPortMalloc PROC
;;;154    
;;;155    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  4605              MOV      r5,r0
;;;157    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;158    void *pvReturn = NULL;
000006  2600              MOVS     r6,#0
;;;159    
;;;160    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;161    	{
;;;162    		/* If this is the first call to malloc then the heap will require
;;;163    		initialisation to setup the list of free blocks. */
;;;164    		if( pxEnd == NULL )
00000c  4f32              LDR      r7,|L3.216|
00000e  6838              LDR      r0,[r7,#0]  ; pxEnd
000010  b908              CBNZ     r0,|L3.22|
;;;165    		{
;;;166    			prvHeapInit();
000012  f7fffffe          BL       prvHeapInit
                  |L3.22|
;;;167    		}
;;;168    		else
;;;169    		{
;;;170    			mtCOVERAGE_TEST_MARKER();
;;;171    		}
;;;172    
;;;173    		/* Check the requested block size is not so large that the top bit is
;;;174    		set.  The top bit of the block size member of the BlockLink_t structure
;;;175    		is used to determine who owns the block - the application or the
;;;176    		kernel, so it must be free. */
;;;177    		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
000016  68f8              LDR      r0,[r7,#0xc]  ; xBlockAllocatedBit
000018  4205              TST      r5,r0
00001a  d14f              BNE      |L3.188|
;;;178    		{
;;;179    			/* The wanted size is increased so it can contain a BlockLink_t
;;;180    			structure in addition to the requested amount of bytes. */
;;;181    			if( xWantedSize > 0 )
00001c  2d00              CMP      r5,#0
00001e  d04d              BEQ      |L3.188|
000020  3508              ADDS     r5,r5,#8
;;;182    			{
;;;183    				xWantedSize += xHeapStructSize;
;;;184    
;;;185    				/* Ensure that blocks are always aligned to the required number
;;;186    				of bytes. */
;;;187    				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
000022  0768              LSLS     r0,r5,#29
000024  d00b              BEQ      |L3.62|
;;;188    				{
;;;189    					/* Byte alignment required. */
;;;190    					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000026  f0050007          AND      r0,r5,#7
00002a  f1c00008          RSB      r0,r0,#8
00002e  4405              ADD      r5,r5,r0
;;;191    					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
000030  0768              LSLS     r0,r5,#29
000032  d004              BEQ      |L3.62|
000034  22bf              MOVS     r2,#0xbf
000036  a129              ADR      r1,|L3.220|
000038  a032              ADR      r0,|L3.260|
00003a  f7fffffe          BL       __2printf
                  |L3.62|
;;;192    				}
;;;193    				else
;;;194    				{
;;;195    					mtCOVERAGE_TEST_MARKER();
;;;196    				}
;;;197    			}
;;;198    			else
;;;199    			{
;;;200    				mtCOVERAGE_TEST_MARKER();
;;;201    			}
;;;202    
;;;203    			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
00003e  2d00              CMP      r5,#0
000040  d03c              BEQ      |L3.188|
000042  6878              LDR      r0,[r7,#4]  ; xFreeBytesRemaining
000044  4285              CMP      r5,r0
000046  d839              BHI      |L3.188|
;;;204    			{
;;;205    				/* Traverse the list from the start	(lowest address) block until
;;;206    				one	of adequate size is found. */
;;;207    				pxPreviousBlock = &xStart;
000048  4923              LDR      r1,|L3.216|
00004a  3110              ADDS     r1,r1,#0x10
;;;208    				pxBlock = xStart.pxNextFreeBlock;
00004c  4608              MOV      r0,r1
;;;209    				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00004e  6804              LDR      r4,[r0,#0]  ; xStart
000050  e001              B        |L3.86|
                  |L3.82|
;;;210    				{
;;;211    					pxPreviousBlock = pxBlock;
000052  4621              MOV      r1,r4
;;;212    					pxBlock = pxBlock->pxNextFreeBlock;
000054  4604              MOV      r4,r0
                  |L3.86|
000056  6860              LDR      r0,[r4,#4]            ;209
000058  42a8              CMP      r0,r5                 ;209
00005a  d202              BCS      |L3.98|
00005c  6820              LDR      r0,[r4,#0]            ;209
00005e  2800              CMP      r0,#0                 ;209
000060  d1f7              BNE      |L3.82|
                  |L3.98|
;;;213    				}
;;;214    
;;;215    				/* If the end marker was reached then a block of adequate size
;;;216    				was	not found. */
;;;217    				if( pxBlock != pxEnd )
000062  6838              LDR      r0,[r7,#0]  ; pxEnd
000064  46b8              MOV      r8,r7
000066  4284              CMP      r4,r0
000068  d028              BEQ      |L3.188|
;;;218    				{
;;;219    					/* Return the memory space pointed to - jumping over the
;;;220    					BlockLink_t structure at its start. */
;;;221    					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
;;;222    
;;;223    					/* This block is being returned for use so must be taken out
;;;224    					of the list of free blocks. */
;;;225    					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00006a  680e              LDR      r6,[r1,#0]
00006c  6820              LDR      r0,[r4,#0]
;;;226    
;;;227    					/* If the block is larger than required it can be split into
;;;228    					two. */
;;;229    					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
00006e  6008              STR      r0,[r1,#0]
000070  6860              LDR      r0,[r4,#4]
000072  3608              ADDS     r6,r6,#8
000074  1b40              SUBS     r0,r0,r5
000076  2810              CMP      r0,#0x10
000078  d90e              BLS      |L3.152|
;;;230    					{
;;;231    						/* This block is to be split into two.  Create a new
;;;232    						block following the number of bytes requested. The void
;;;233    						cast is used to prevent byte alignment warnings from the
;;;234    						compiler. */
;;;235    						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
00007a  1967              ADDS     r7,r4,r5
;;;236    						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
00007c  0778              LSLS     r0,r7,#29
00007e  d004              BEQ      |L3.138|
000080  22ec              MOVS     r2,#0xec
000082  a116              ADR      r1,|L3.220|
000084  a01f              ADR      r0,|L3.260|
000086  f7fffffe          BL       __2printf
                  |L3.138|
;;;237    
;;;238    						/* Calculate the sizes of two blocks split from the
;;;239    						single block. */
;;;240    						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
00008a  6860              LDR      r0,[r4,#4]
00008c  1b40              SUBS     r0,r0,r5
;;;241    						pxBlock->xBlockSize = xWantedSize;
00008e  6078              STR      r0,[r7,#4]
;;;242    
;;;243    						/* Insert the new block into the list of free blocks. */
;;;244    						prvInsertBlockIntoFreeList( pxNewBlockLink );
000090  4638              MOV      r0,r7
000092  6065              STR      r5,[r4,#4]
000094  f7fffffe          BL       prvInsertBlockIntoFreeList
                  |L3.152|
;;;245    					}
;;;246    					else
;;;247    					{
;;;248    						mtCOVERAGE_TEST_MARKER();
;;;249    					}
;;;250    
;;;251    					xFreeBytesRemaining -= pxBlock->xBlockSize;
000098  6861              LDR      r1,[r4,#4]
00009a  f8d80004          LDR      r0,[r8,#4]  ; xFreeBytesRemaining
00009e  4642              MOV      r2,r8
0000a0  1a40              SUBS     r0,r0,r1
;;;252    
;;;253    					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
0000a2  f8c80004          STR      r0,[r8,#4]  ; xFreeBytesRemaining
0000a6  f8d83008          LDR      r3,[r8,#8]  ; xMinimumEverFreeBytesRemaining
0000aa  4298              CMP      r0,r3
0000ac  d200              BCS      |L3.176|
;;;254    					{
;;;255    						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
0000ae  6090              STR      r0,[r2,#8]  ; xMinimumEverFreeBytesRemaining
                  |L3.176|
;;;256    					}
;;;257    					else
;;;258    					{
;;;259    						mtCOVERAGE_TEST_MARKER();
;;;260    					}
;;;261    
;;;262    					/* The block is being returned - it is allocated and owned
;;;263    					by the application and has no "next" block. */
;;;264    					pxBlock->xBlockSize |= xBlockAllocatedBit;
0000b0  f8d8000c          LDR      r0,[r8,#0xc]  ; xBlockAllocatedBit
0000b4  4301              ORRS     r1,r1,r0
;;;265    					pxBlock->pxNextFreeBlock = NULL;
0000b6  2000              MOVS     r0,#0
0000b8  e9c40100          STRD     r0,r1,[r4,#0]
                  |L3.188|
;;;266    				}
;;;267    				else
;;;268    				{
;;;269    					mtCOVERAGE_TEST_MARKER();
;;;270    				}
;;;271    			}
;;;272    			else
;;;273    			{
;;;274    				mtCOVERAGE_TEST_MARKER();
;;;275    			}
;;;276    		}
;;;277    		else
;;;278    		{
;;;279    			mtCOVERAGE_TEST_MARKER();
;;;280    		}
;;;281    
;;;282    		traceMALLOC( pvReturn, xWantedSize );
;;;283    	}
;;;284    	( void ) xTaskResumeAll();
0000bc  f7fffffe          BL       xTaskResumeAll
;;;285    
;;;286    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;287    	{
;;;288    		if( pvReturn == NULL )
;;;289    		{
;;;290    			extern void vApplicationMallocFailedHook( void );
;;;291    			vApplicationMallocFailedHook();
;;;292    		}
;;;293    		else
;;;294    		{
;;;295    			mtCOVERAGE_TEST_MARKER();
;;;296    		}
;;;297    	}
;;;298    	#endif
;;;299    
;;;300    	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
0000c0  0770              LSLS     r0,r6,#29
0000c2  d005              BEQ      |L3.208|
0000c4  f44f7296          MOV      r2,#0x12c
0000c8  a104              ADR      r1,|L3.220|
0000ca  a00e              ADR      r0,|L3.260|
0000cc  f7fffffe          BL       __2printf
                  |L3.208|
;;;301    	return pvReturn;
0000d0  4630              MOV      r0,r6
;;;302    }
0000d2  e8bd81f0          POP      {r4-r8,pc}
;;;303    /*-----------------------------------------------------------*/
                          ENDP

0000d6  0000              DCW      0x0000
                  |L3.216|
                          DCD      ||.data||
                  |L3.220|
0000dc  2e2e5c46          DCB      "..\\FreeRTOS\\portable\\MemMang\\heap_4.c",0
0000e0  72656552
0000e4  544f535c
0000e8  706f7274
0000ec  61626c65
0000f0  5c4d656d
0000f4  4d616e67
0000f8  5c686561
0000fc  705f342e
000100  6300    
000102  00                DCB      0
000103  00                DCB      0
                  |L3.260|
000104  4572726f          DCB      "Error:%s,%d\r\n",0
000108  723a2573
00010c  2c25640d
000110  0a00    
000112  00                DCB      0
000113  00                DCB      0

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  vPortFree PROC
;;;304    
;;;305    void vPortFree( void *pv )
000000  b570              PUSH     {r4-r6,lr}
;;;306    {
000002  2800              CMP      r0,#0
000004  d02a              BEQ      |L4.92|
;;;307    uint8_t *puc = ( uint8_t * ) pv;
;;;308    BlockLink_t *pxLink;
;;;309    
;;;310    	if( pv != NULL )
;;;311    	{
;;;312    		/* The memory being freed will have an BlockLink_t structure immediately
;;;313    		before it. */
;;;314    		puc -= xHeapStructSize;
;;;315    
;;;316    		/* This casting is to keep the compiler from issuing warnings. */
;;;317    		pxLink = ( void * ) puc;
;;;318    
;;;319    		/* Check the block is actually allocated. */
;;;320    		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
000006  4d16              LDR      r5,|L4.96|
000008  f1a00408          SUB      r4,r0,#8              ;306
00000c  6860              LDR      r0,[r4,#4]
00000e  68e9              LDR      r1,[r5,#0xc]  ; xBlockAllocatedBit
000010  4208              TST      r0,r1
000012  d105              BNE      |L4.32|
000014  f44f72a0          MOV      r2,#0x140
000018  a112              ADR      r1,|L4.100|
00001a  a01c              ADR      r0,|L4.140|
00001c  f7fffffe          BL       __2printf
                  |L4.32|
;;;321    		configASSERT( pxLink->pxNextFreeBlock == NULL );
000020  6820              LDR      r0,[r4,#0]
000022  b128              CBZ      r0,|L4.48|
000024  f2401241          MOV      r2,#0x141
000028  a10e              ADR      r1,|L4.100|
00002a  a018              ADR      r0,|L4.140|
00002c  f7fffffe          BL       __2printf
                  |L4.48|
;;;322    
;;;323    		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
000030  6860              LDR      r0,[r4,#4]
000032  68e9              LDR      r1,[r5,#0xc]  ; xBlockAllocatedBit
000034  4208              TST      r0,r1
000036  d011              BEQ      |L4.92|
;;;324    		{
;;;325    			if( pxLink->pxNextFreeBlock == NULL )
000038  6822              LDR      r2,[r4,#0]
00003a  2a00              CMP      r2,#0
00003c  d10e              BNE      |L4.92|
;;;326    			{
;;;327    				/* The block is being returned to the heap - it is no longer
;;;328    				allocated. */
;;;329    				pxLink->xBlockSize &= ~xBlockAllocatedBit;
00003e  4388              BICS     r0,r0,r1
;;;330    
;;;331    				vTaskSuspendAll();
000040  6060              STR      r0,[r4,#4]
000042  f7fffffe          BL       vTaskSuspendAll
;;;332    				{
;;;333    					/* Add this block to the list of free blocks. */
;;;334    					xFreeBytesRemaining += pxLink->xBlockSize;
000046  6860              LDR      r0,[r4,#4]
000048  6869              LDR      r1,[r5,#4]  ; xFreeBytesRemaining
00004a  4408              ADD      r0,r0,r1
;;;335    					traceFREE( pv, pxLink->xBlockSize );
;;;336    					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
00004c  6068              STR      r0,[r5,#4]  ; xFreeBytesRemaining
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       prvInsertBlockIntoFreeList
;;;337    				}
;;;338    				( void ) xTaskResumeAll();
000054  e8bd4070          POP      {r4-r6,lr}
000058  f7ffbffe          B.W      xTaskResumeAll
                  |L4.92|
;;;339    			}
;;;340    			else
;;;341    			{
;;;342    				mtCOVERAGE_TEST_MARKER();
;;;343    			}
;;;344    		}
;;;345    		else
;;;346    		{
;;;347    			mtCOVERAGE_TEST_MARKER();
;;;348    		}
;;;349    	}
;;;350    }
00005c  bd70              POP      {r4-r6,pc}
;;;351    /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      ||.data||
                  |L4.100|
000064  2e2e5c46          DCB      "..\\FreeRTOS\\portable\\MemMang\\heap_4.c",0
000068  72656552
00006c  544f535c
000070  706f7274
000074  61626c65
000078  5c4d656d
00007c  4d616e67
000080  5c686561
000084  705f342e
000088  6300    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L4.140|
00008c  4572726f          DCB      "Error:%s,%d\r\n",0
000090  723a2573
000094  2c25640d
000098  0a00    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;364    
;;;365    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;366    {
;;;367    	/* This just exists to keep the linker quiet. */
;;;368    }
;;;369    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;352    
;;;353    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L6.8|
;;;354    {
;;;355    	return xFreeBytesRemaining;
000002  6840              LDR      r0,[r0,#4]  ; xFreeBytesRemaining
;;;356    }
000004  4770              BX       lr
;;;357    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      ||.data||

                          AREA ||i.xPortGetMinimumEverFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetMinimumEverFreeHeapSize PROC
;;;358    
;;;359    size_t xPortGetMinimumEverFreeHeapSize( void )
000000  4801              LDR      r0,|L7.8|
;;;360    {
;;;361    	return xMinimumEverFreeBytesRemaining;
000002  6880              LDR      r0,[r0,#8]  ; xMinimumEverFreeBytesRemaining
;;;362    }
000004  4770              BX       lr
;;;363    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        20480

                          AREA ||.data||, DATA, ALIGN=2

                  pxEnd
                          DCD      0x00000000
                  xFreeBytesRemaining
                          DCD      0x00000000
                  xMinimumEverFreeBytesRemaining
                          DCD      0x00000000
                  xBlockAllocatedBit
                          DCD      0x00000000
                  xStart
                          %        8
