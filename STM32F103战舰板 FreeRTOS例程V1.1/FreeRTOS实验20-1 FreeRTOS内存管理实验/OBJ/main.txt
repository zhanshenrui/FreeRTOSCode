; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\MALLOC -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\HARDWARE\LED -I..\HARDWARE\TIMER -I..\HARDWARE\LCD -I..\HARDWARE\EXTI -I..\HARDWARE\KEY -I..\HARDWARE\BEEP -I"E:\STM32F103战舰V3资料\STM32F103 FreeRTOS例程\FreeRTOS实验17-1 FreeRTOS内存管理实验\USER\RTE" -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;41     
;;;42     int main(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;43     {
;;;44     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);//设置系统中断优先级分组4	 
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;45     	delay_init();	    				//延时函数初始化	 
00000a  f7fffffe          BL       delay_init
;;;46     	uart_init(115200);					//初始化串口
00000e  f44f30e1          MOV      r0,#0x1c200
000012  f7fffffe          BL       uart_init
;;;47     	LED_Init();		  					//初始化LED
000016  f7fffffe          BL       LED_Init
;;;48     	KEY_Init();							//初始化按键
00001a  f7fffffe          BL       KEY_Init
;;;49     	BEEP_Init();						//初始化蜂鸣器
00001e  f7fffffe          BL       BEEP_Init
;;;50     	LCD_Init();							//初始化LCD
000022  f7fffffe          BL       LCD_Init
;;;51     	my_mem_init(SRAMIN);            	//初始化内部内存池
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       my_mem_init
;;;52     
;;;53     	POINT_COLOR = RED;
00002c  4d37              LDR      r5,|L1.268|
00002e  f44f4078          MOV      r0,#0xf800
;;;54     	LCD_ShowString(30,10,200,16,16,"ATK STM32F103/407");	
000032  2410              MOVS     r4,#0x10
000034  8028              STRH     r0,[r5,#0]            ;53
000036  a036              ADR      r0,|L1.272|
000038  e9cd4000          STRD     r4,r0,[sp,#0]
00003c  4623              MOV      r3,r4
00003e  22c8              MOVS     r2,#0xc8
000040  210a              MOVS     r1,#0xa
000042  201e              MOVS     r0,#0x1e
000044  f7fffffe          BL       LCD_ShowString
;;;55     	LCD_ShowString(30,30,200,16,16,"FreeRTOS Examp 17-1");
000048  a036              ADR      r0,|L1.292|
00004a  e9cd4000          STRD     r4,r0,[sp,#0]
00004e  211e              MOVS     r1,#0x1e
000050  2310              MOVS     r3,#0x10
000052  22c8              MOVS     r2,#0xc8
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       LCD_ShowString
;;;56     	LCD_ShowString(30,50,200,16,16,"Mem Manage");
00005a  a037              ADR      r0,|L1.312|
00005c  e9cd4000          STRD     r4,r0,[sp,#0]
000060  2310              MOVS     r3,#0x10
000062  22c8              MOVS     r2,#0xc8
000064  2132              MOVS     r1,#0x32
000066  201e              MOVS     r0,#0x1e
000068  f7fffffe          BL       LCD_ShowString
;;;57     	LCD_ShowString(30,70,200,16,16,"KEY_UP:Malloc,KEY1:Free");
00006c  a035              ADR      r0,|L1.324|
00006e  e9cd4000          STRD     r4,r0,[sp,#0]
000072  2310              MOVS     r3,#0x10
000074  22c8              MOVS     r2,#0xc8
000076  2146              MOVS     r1,#0x46
000078  201e              MOVS     r0,#0x1e
00007a  f7fffffe          BL       LCD_ShowString
;;;58     	LCD_ShowString(30,90,200,16,16,"KEY0:Use Mem");
00007e  a037              ADR      r0,|L1.348|
000080  e9cd4000          STRD     r4,r0,[sp,#0]
000084  2310              MOVS     r3,#0x10
000086  22c8              MOVS     r2,#0xc8
000088  215a              MOVS     r1,#0x5a
00008a  201e              MOVS     r0,#0x1e
00008c  f7fffffe          BL       LCD_ShowString
;;;59     	LCD_ShowString(30,110,200,16,16,"ATOM@ALIENTEK");
000090  a036              ADR      r0,|L1.364|
000092  e9cd4000          STRD     r4,r0,[sp,#0]
000096  2310              MOVS     r3,#0x10
000098  22c8              MOVS     r2,#0xc8
00009a  216e              MOVS     r1,#0x6e
00009c  201e              MOVS     r0,#0x1e
00009e  f7fffffe          BL       LCD_ShowString
;;;60     	LCD_ShowString(30,130,200,16,16,"2016/11/14");
0000a2  a036              ADR      r0,|L1.380|
0000a4  e9cd4000          STRD     r4,r0,[sp,#0]
0000a8  2310              MOVS     r3,#0x10
0000aa  22c8              MOVS     r2,#0xc8
0000ac  2182              MOVS     r1,#0x82
0000ae  201e              MOVS     r0,#0x1e
0000b0  f7fffffe          BL       LCD_ShowString
;;;61     	
;;;62     	LCD_ShowString(30,170,200,16,16,"Total Mem:      Bytes");
0000b4  a034              ADR      r0,|L1.392|
0000b6  e9cd4000          STRD     r4,r0,[sp,#0]
0000ba  2310              MOVS     r3,#0x10
0000bc  22c8              MOVS     r2,#0xc8
0000be  21aa              MOVS     r1,#0xaa
0000c0  201e              MOVS     r0,#0x1e
0000c2  f7fffffe          BL       LCD_ShowString
;;;63     	LCD_ShowString(30,190,200,16,16,"Free  Mem:      Bytes");
0000c6  a036              ADR      r0,|L1.416|
0000c8  e9cd4000          STRD     r4,r0,[sp,#0]
0000cc  2310              MOVS     r3,#0x10
0000ce  22c8              MOVS     r2,#0xc8
0000d0  21be              MOVS     r1,#0xbe
0000d2  201e              MOVS     r0,#0x1e
0000d4  f7fffffe          BL       LCD_ShowString
;;;64     	LCD_ShowString(30,210,200,16,16,"Message:    ");
0000d8  a037              ADR      r0,|L1.440|
0000da  e9cd4000          STRD     r4,r0,[sp,#0]
0000de  2310              MOVS     r3,#0x10
0000e0  22c8              MOVS     r2,#0xc8
0000e2  21d2              MOVS     r1,#0xd2
0000e4  201e              MOVS     r0,#0x1e
0000e6  f7fffffe          BL       LCD_ShowString
;;;65     	POINT_COLOR = BLUE;
0000ea  201f              MOVS     r0,#0x1f
0000ec  8028              STRH     r0,[r5,#0]
;;;66     	
;;;67     	
;;;68     	//创建开始任务
;;;69         xTaskCreate((TaskFunction_t )start_task,            //任务函数
0000ee  4936              LDR      r1,|L1.456|
0000f0  2001              MOVS     r0,#1
0000f2  e9cd0100          STRD     r0,r1,[sp,#0]
0000f6  2300              MOVS     r3,#0
0000f8  2280              MOVS     r2,#0x80
0000fa  a134              ADR      r1,|L1.460|
0000fc  4836              LDR      r0,|L1.472|
0000fe  f7fffffe          BL       xTaskCreate
;;;70                     (const char*    )"start_task",          //任务名称
;;;71                     (uint16_t       )START_STK_SIZE,        //任务堆栈大小
;;;72                     (void*          )NULL,                  //传递给任务函数的参数
;;;73                     (UBaseType_t    )START_TASK_PRIO,       //任务优先级
;;;74                     (TaskHandle_t*  )&StartTask_Handler);   //任务句柄              
;;;75         vTaskStartScheduler();          //开启任务调度
000102  f7fffffe          BL       vTaskStartScheduler
;;;76     }
000106  2000              MOVS     r0,#0
000108  bd7c              POP      {r2-r6,pc}
;;;77     
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      POINT_COLOR
                  |L1.272|
000110  41544b20          DCB      "ATK STM32F103/407",0
000114  53544d33
000118  32463130
00011c  332f3430
000120  3700    
000122  00                DCB      0
000123  00                DCB      0
                  |L1.292|
000124  46726565          DCB      "FreeRTOS Examp 17-1",0
000128  52544f53
00012c  20457861
000130  6d702031
000134  372d3100
                  |L1.312|
000138  4d656d20          DCB      "Mem Manage",0
00013c  4d616e61
000140  676500  
000143  00                DCB      0
                  |L1.324|
000144  4b45595f          DCB      "KEY_UP:Malloc,KEY1:Free",0
000148  55503a4d
00014c  616c6c6f
000150  632c4b45
000154  59313a46
000158  72656500
                  |L1.348|
00015c  4b455930          DCB      "KEY0:Use Mem",0
000160  3a557365
000164  204d656d
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L1.364|
00016c  41544f4d          DCB      "ATOM@ALIENTEK",0
000170  40414c49
000174  454e5445
000178  4b00    
00017a  00                DCB      0
00017b  00                DCB      0
                  |L1.380|
00017c  32303136          DCB      "2016/11/14",0
000180  2f31312f
000184  313400  
000187  00                DCB      0
                  |L1.392|
000188  546f7461          DCB      "Total Mem:      Bytes",0
00018c  6c204d65
000190  6d3a2020
000194  20202020
000198  42797465
00019c  7300    
00019e  00                DCB      0
00019f  00                DCB      0
                  |L1.416|
0001a0  46726565          DCB      "Free  Mem:      Bytes",0
0001a4  20204d65
0001a8  6d3a2020
0001ac  20202020
0001b0  42797465
0001b4  7300    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L1.440|
0001b8  4d657373          DCB      "Message:    ",0
0001bc  6167653a
0001c0  20202020
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L1.456|
                          DCD      ||.data||
                  |L1.460|
0001cc  73746172          DCB      "start_task",0
0001d0  745f7461
0001d4  736b00  
0001d7  00                DCB      0
                  |L1.472|
                          DCD      start_task

                          AREA ||i.malloc_task||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  malloc_task PROC
;;;94     //MALLOC任务函数 
;;;95     void malloc_task(void *pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;96     {
;;;97     	u8 *buffer;		
;;;98     	u8 times,i,key=0;
;;;99     	u32 freemem;
;;;100    
;;;101    	LCD_ShowxNum(110,170,configTOTAL_HEAP_SIZE,5,16,0);//显示内存总容量	
000002  2700              MOVS     r7,#0
000004  f04f0810          MOV      r8,#0x10
000008  e9cd8700          STRD     r8,r7,[sp,#0]
00000c  2305              MOVS     r3,#5
00000e  031a              LSLS     r2,r3,#12
000010  21aa              MOVS     r1,#0xaa
000012  206e              MOVS     r0,#0x6e
000014  f7fffffe          BL       LCD_ShowxNum
000018  46b9              MOV      r9,r7
00001a  4647              MOV      r7,r8
                  |L2.28|
;;;102        while(1)
;;;103        {
;;;104    		key=KEY_Scan(0);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       KEY_Scan
;;;105    		switch(key)
000022  2801              CMP      r0,#1
000024  d012              BEQ      |L2.76|
000026  2802              CMP      r0,#2
000028  d00a              BEQ      |L2.64|
00002a  2804              CMP      r0,#4
00002c  d11e              BNE      |L2.108|
;;;106    		{
;;;107    			case WKUP_PRES:				
;;;108    				buffer=pvPortMalloc(30);			//申请内存，30个字节
00002e  201e              MOVS     r0,#0x1e
000030  f7fffffe          BL       pvPortMalloc
000034  4604              MOV      r4,r0
;;;109    				printf("申请到的内存地址为:%#x\r\n",(int)buffer);
000036  4601              MOV      r1,r0
000038  a019              ADR      r0,|L2.160|
00003a  f7fffffe          BL       __2printf
;;;110    				break;
00003e  e015              B        |L2.108|
                  |L2.64|
;;;111    			case KEY1_PRES:				
;;;112    				if(buffer!=NULL)vPortFree(buffer);	//释放内存
000040  b114              CBZ      r4,|L2.72|
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       vPortFree
                  |L2.72|
;;;113    				buffer=NULL;
000048  2400              MOVS     r4,#0
;;;114    				break;
00004a  e00f              B        |L2.108|
                  |L2.76|
;;;115    			case KEY0_PRES:
;;;116    				if(buffer!=NULL)					//buffer可用,使用buffer
00004c  b174              CBZ      r4,|L2.108|
00004e  1c76              ADDS     r6,r6,#1
;;;117    				{
;;;118    					times++;
000050  b2f6              UXTB     r6,r6
;;;119    					sprintf((char*)buffer,"User %d Times",times);//向buffer中填写一些数据
000052  4632              MOV      r2,r6
000054  a119              ADR      r1,|L2.188|
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       __2sprintf
;;;120    					LCD_ShowString(94,210,200,16,16,buffer);
00005c  e9cd7400          STRD     r7,r4,[sp,#0]
000060  2310              MOVS     r3,#0x10
000062  22c8              MOVS     r2,#0xc8
000064  21d2              MOVS     r1,#0xd2
000066  205e              MOVS     r0,#0x5e
000068  f7fffffe          BL       LCD_ShowString
                  |L2.108|
;;;121    				}
;;;122    				break;
;;;123    		}
;;;124    		freemem=xPortGetFreeHeapSize();		//获取剩余内存大小
00006c  f7fffffe          BL       xPortGetFreeHeapSize
;;;125    		LCD_ShowxNum(110,190,freemem,5,16,0);//显示内存总容量	
000070  e9cd7900          STRD     r7,r9,[sp,#0]
000074  4602              MOV      r2,r0                 ;124
000076  2305              MOVS     r3,#5
000078  21be              MOVS     r1,#0xbe
00007a  206e              MOVS     r0,#0x6e
00007c  f7fffffe          BL       LCD_ShowxNum
000080  1c6d              ADDS     r5,r5,#1
;;;126    		i++;
000082  b2ed              UXTB     r5,r5
;;;127    		if(i==50)
000084  2d32              CMP      r5,#0x32
000086  d106              BNE      |L2.150|
;;;128    		{
;;;129    			i=0;
;;;130    			LED0=~LED0;
000088  4810              LDR      r0,|L2.204|
00008a  2500              MOVS     r5,#0                 ;129
00008c  f8d01194          LDR      r1,[r0,#0x194]
000090  43c9              MVNS     r1,r1
000092  f8c01194          STR      r1,[r0,#0x194]
                  |L2.150|
;;;131    		}
;;;132            vTaskDelay(10);
000096  200a              MOVS     r0,#0xa
000098  f7fffffe          BL       vTaskDelay
00009c  e7be              B        |L2.28|
;;;133        }
;;;134    } 
;;;135    
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
0000a0  c9eac7eb          DCB      201,234,199,235,181,189,181,196,196,218,180,230,181,216,214
0000a4  b5bdb5c4
0000a8  c4dab4e6
0000ac  b5d8d6  
0000af  b7ceaa3a          DCB      183,206,170,":%#x\r\n",0
0000b3  2523780d
0000b7  0a00    
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L2.188|
0000bc  55736572          DCB      "User %d Times",0
0000c0  20256420
0000c4  54696d65
0000c8  7300    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L2.204|
                          DCD      0x42218000

                          AREA ||i.start_task||, CODE, READONLY, ALIGN=2

                  start_task PROC
;;;78     //开始任务任务函数
;;;79     void start_task(void *pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;80     {
;;;81         taskENTER_CRITICAL();           //进入临界区
000002  f7fffffe          BL       vPortEnterCritical
;;;82         //创建TASK1任务
;;;83         xTaskCreate((TaskFunction_t )malloc_task,             
000006  4909              LDR      r1,|L3.44|
000008  2002              MOVS     r0,#2
00000a  e9cd0100          STRD     r0,r1,[sp,#0]
00000e  2300              MOVS     r3,#0
000010  2280              MOVS     r2,#0x80
000012  a107              ADR      r1,|L3.48|
000014  4809              LDR      r0,|L3.60|
000016  f7fffffe          BL       xTaskCreate
;;;84                     (const char*    )"malloc_task",           
;;;85                     (uint16_t       )MALLOC_STK_SIZE,        
;;;86                     (void*          )NULL,                  
;;;87                     (UBaseType_t    )MALLOC_TASK_PRIO,        
;;;88                     (TaskHandle_t*  )&MallocTask_Handler);   
;;;89         vTaskDelete(StartTask_Handler); //删除开始任务
00001a  4804              LDR      r0,|L3.44|
00001c  1f00              SUBS     r0,r0,#4
00001e  6800              LDR      r0,[r0,#0]  ; StartTask_Handler
000020  f7fffffe          BL       vTaskDelete
;;;90         taskEXIT_CRITICAL();            //退出临界区
000024  e8bd401c          POP      {r2-r4,lr}
000028  f7ffbffe          B.W      vPortExitCritical
;;;91     }
;;;92     
                          ENDP

                  |L3.44|
                          DCD      ||.data||+0x4
                  |L3.48|
000030  6d616c6c          DCB      "malloc_task",0
000034  6f635f74
000038  61736b00
                  |L3.60|
                          DCD      malloc_task

                          AREA ||.data||, DATA, ALIGN=2

                  StartTask_Handler
                          DCD      0x00000000
                  MallocTask_Handler
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
